<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Visiblox.Charts</name>
  </assembly>
  <members>
    <member name="T:Visiblox.Charts.RandomAccessFilterStrategyBase">
      <summary>
            Base class for filter strategies which implement <see cref="T:System.Collections.IList" /> for performance optimisation
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IFilterStrategy">
      <summary>
            A filter strategy is a pluggable component that can be used in conjunction with a <see cref="T:Visiblox.Charts.FilteredDataSeries" /> to provide a view on the data
            contained in an <see cref="T:Visiblox.Charts.IDataSeries" /> instance.
            </summary>
      <remarks>
            Note that when implementing this interface it is the responsibility of the implementation to ensure that the indexes contained in the 
            INotifyCollectionChangedArgs
            when the CollectionChanged event is raised match up with the data returned from the GetEnumerator call such that the index 0 refers
            to the first element returned and index n refers to the (n+1)th element returned.  Failure to correctly maintain this relationship
            this may cause unexpected behaviour during the addition or modification of data points at runtime.
            </remarks>
      <seealso cref="T:Visiblox.Charts.FilteredDataSeries" />
      <seealso cref="T:Visiblox.Charts.DynamicFilterStrategy" />
      <seealso cref="T:Visiblox.Charts.IterativeEndPointFitFilterStrategy" />
      <seealso cref="T:Visiblox.Charts.RenderProximityFilterStrategy" />
      <seealso cref="T:Visiblox.Charts.SampleStatisticsFilterStrategy" />
      <seealso cref="T:Visiblox.Charts.SimpleSamplingFilterStrategy" />
    </member>
    <member name="T:Visiblox.Charts.INotifyPropertyChangedRelayer">
      <summary>
            Relays PropertyChanged events from a number of sources.
            </summary>
      <remarks>
        <para>
            The INotifyPropertyChangedRelayer interface is typically used to wrap a collection of INotifyPropertyChanged objects, 
                collect their PropertyChanged events and fire a relayed PropertyChangedRelay event.</para>
        <para>The interface is useful because the client subscribing to the PropertyChangedRelay event of this interface does
                not have to deal with individually subscribing/unsubscribing to the PropertyChanged events of the sources
                because the implementation should have taken care of this.</para>
        <para>The class <see cref="T:Visiblox.Charts.Primitives.RelayingObservableCollection`1" /> extends 
            <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />, and can be used in place of 
            <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> where PropertyChanged event relaying is desired.</para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.Primitives.RelayingObservableCollection`1" />
      <seealso cref="T:Visiblox.Charts.BindableDataSeries" />
    </member>
    <member name="E:Visiblox.Charts.INotifyPropertyChangedRelayer.PropertyChangedRelay">
      <summary>
            Occurs when a property value has changed on any of the members.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IFilterStrategy.GetSearchableSeries">
      <summary>
            Get the searchable data series associated with this DataSeries. This can either be
            the series itself, or some internal series that handles the sorting and searching.
            </summary>
      <returns>An implementation of the ISearchable interface that can be used for efficient searching of DataPoints or null if unsupported.</returns>
    </member>
    <member name="M:Visiblox.Charts.IFilterStrategy.Init(Visiblox.Charts.IAxis,Visiblox.Charts.IAxis,Visiblox.Charts.IDataSeries)">
      <summary>
             Initialises the strategy. This will be called by the FilteredDataSeries when the chart is sufficiently initialised.
             The FilteredDataSeries will continue to call Init until <see cref="P:Visiblox.Charts.IFilterStrategy.IsInitialised" /> returns true.
             </summary>
      <remarks>
            If for any reason the FilterStrategy requires to be reinitialised, 
            simply returning false from <see cref="P:Visiblox.Charts.IFilterStrategy.IsInitialised" /> will have that effect.
             </remarks>
      <remarks>
             If the implementer keeps references to any of the parameters passed to the Init method, it is the responsibility of the implementation
             to update those references.  When the underlying axes are changed, Axis ValueConversion events will be raised for the appropriate
             axis.  Similarly if the OriginalDataSeries is replaced, a reset event will be generated and passed to the OnOriginalCollectionChanged
             method with the new OriginalDataSeries as the sender.
             </remarks>
      <param name="xAxis">The x-axis against which the data is being plotted.</param>
      <param name="yAxis">The y-axis against which the data is being plotted.</param>
      <param name="initialData">The original unfiltered data. It is not advisable to keep a reference to this beyond the scope of this method.</param>
    </member>
    <member name="M:Visiblox.Charts.IFilterStrategy.OnOriginalCollectionChanged(Visiblox.Charts.IDataSeries,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Invoked by the FilteredDataSeries when a collection change on the original data series is received.
            </summary>
      <param name="sender">The sender of the event.</param>
      <param name="e">The collection changed arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.IFilterStrategy.OnXAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <summary>
            Invoked by the FilteredDataSeries when the x-axis against which the data is being plotted changes.  This includes the case where a new
            chart series is assigned to the filtered data series.
            </summary>
      <param name="sender">The axis.</param>
      <param name="eventType">The type of axis event.</param>
    </member>
    <member name="M:Visiblox.Charts.IFilterStrategy.OnYAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <summary>
            Invoked by the FilteredDataSeries when the y-axis against which the data is being plotted changes.  This includes the case where a new
            chart series is assigned to the filtered data series.
            </summary>
      <param name="sender">The axis.</param>
      <param name="eventType">The type of axis event.</param>
    </member>
    <member name="P:Visiblox.Charts.IFilterStrategy.IsInitialised">
      <summary>
            Returns true if the strategy has been successfully initialised and false otherwise.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RandomAccessFilterStrategyBase.GetSearchableSeries">
      <summary>
            Not implemented by default
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RandomAccessFilterStrategyBase.Init(Visiblox.Charts.IAxis,Visiblox.Charts.IAxis,Visiblox.Charts.IDataSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RandomAccessFilterStrategyBase.OnOriginalCollectionChanged(Visiblox.Charts.IDataSeries,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RandomAccessFilterStrategyBase.OnXAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RandomAccessFilterStrategyBase.OnYAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RandomAccessFilterStrategyBase.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Raise <see cref="E:Visiblox.Charts.RandomAccessFilterStrategyBase.CollectionChanged" /> event
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RandomAccessFilterStrategyBase.OnPropertyChangedRelay(Visiblox.Charts.PropertyChangedRelayerEventArgs)">
      <summary>
            Raise <see cref="E:Visiblox.Charts.RandomAccessFilterStrategyBase.PropertyChangedRelay" /> event
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RandomAccessFilterStrategyBase.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RandomAccessFilterStrategyBase.IndexOf(System.Object)">
      <summary>
            Default implementation via enumeration
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RandomAccessFilterStrategyBase.Contains(System.Object)">
      <summary>
            Default implementation via LINQ Contains 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RandomAccessFilterStrategyBase.IsInitialised">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.RandomAccessFilterStrategyBase.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.RandomAccessFilterStrategyBase.PropertyChangedRelay">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RandomAccessFilterStrategyBase.Count">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RandomAccessFilterStrategyBase.Item(System.Int32)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.AdditionalLabel">
      <summary>
            Represents a label on the axis with its position and optionally its text style.
            </summary>
      <para>
            The position of the label is defined by specifying the <see cref="P:Visiblox.Charts.AdditionalLabel.AxisValue" />. The orientation of the label needs to be specified
                for accurate rendering via the <see cref="P:Visiblox.Charts.AdditionalLabel.Orientation" /> property. Horizontal and vertical alignment are specified
                using the <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> and <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> properties.
            </para>
    </member>
    <member name="T:Visiblox.Charts.AxisLabel">
      <summary>
            Represents a label on the axis with its position and optionally its text style.
            </summary>
      <remarks>
        <para>
            The <see cref="P:Visiblox.Charts.AxisLabel.ActualText" /> property is displayed on the label. This value is set by the class using the following
                priority list: <see cref="P:Visiblox.Charts.AxisLabel.Text" /> and <see cref="P:Visiblox.Charts.AxisLabel.FormattedValue" /> (this set by the axis).
                In order to use a format string other than set on the axis, set the <see cref="P:Visiblox.Charts.AxisLabel.FormatString" /> property.
            </para>
        <para>
            Collision detection with other labels can be turned on by setting the <see cref="P:Visiblox.Charts.AxisLabel.CheckForCollision" /> property to true.
            </para>
      </remarks>
    </member>
    <member name="F:Visiblox.Charts.AxisLabel.BorderPaddingProperty">
      <summary>
            Identifies the BorderPadding Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.#ctor(System.Double)">
      <summary>
            Construct an AxisLabel object at a specific <paramref name="renderPosition" />.
            </summary>
      <param name="renderPosition">The centre coordinate of the label.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.GetParallelLengthForAxis(System.Windows.Controls.Orientation)">
      <summary>
            Get either the height or width of the label based on the axis orientation
            </summary>
      <param name="axisOrientation">Orientation of the axis.</param>
      <returns>The length of the label edge that is parallel to the axis.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.UpdateMeasurements">
      <summary>
            Perform an update of the label measurements by calling the framework Measure method.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.ApplyRotateTransform(System.Double)">
      <summary>
            Add a RotateTransform to the label using the given <paramref name="angle" />.
            </summary>
      <param name="angle">The angle to rotate the label through.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.ApplyTranslateTransform(System.Double,System.Double)">
      <summary>
            Add a TranslateTransform to the label using the given <paramref name="x" /> and <paramref name="y" /> values.
            </summary>
      <remarks>
            The TranslateTransform should only be added AFTER the label has been positioned on the ZoomCanvas.
            </remarks>
      <param name="x">The X value of the transform.</param>
      <param name="y">The Y value of the transform.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.GetTranslation">
      <summary>
            Get the translate transform that has been applied to this label.
            </summary>
      <returns>A TranslateTransform.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.GetRotationAngle">
      <summary>
            Check for a rotate transform and, if present, get the angle of rotation.
            </summary>
      <returns>The angle of rotation in the RotateTransform if present; 0 otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.GetDiagonal">
      <summary>
            Calculate the length of the diagonal between two opposing corners of the label's surrounding rectangle.
            </summary>
      <returns>The length of the diagonal.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.GetDiagonalAngle">
      <summary>
            Calculate the angle between the top edge and the diagonal of the label's surrounding rectangle.
            </summary>
      <returns>The angle (in radians) between the top edge and the diagonal.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.SetHorizontalAlignment(System.Windows.TextAlignment)">
      <summary>
            Set the horizontal alignment of the label itself, based on the provided <paramref name="textAlignment" />.
            </summary>
      <param name="textAlignment">The text alignment to use as reference.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.SetTextAlignment(System.Windows.HorizontalAlignment)">
      <summary>
            Set the text alignment of the label's TextBlock based on the provided <paramref name="horizontalAlignment" />.
            </summary>
      <param name="horizontalAlignment">The horizontal alignment to use as reference.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.CollidesWith(Visiblox.Charts.AxisLabel,System.Windows.Controls.Orientation)">
      <summary>
            Determine if this label collides with another label taking into account the given orientation.
            </summary>
      <param name="otherLabel">The other label against which to detect collisions.</param>
      <param name="orientation">The orientation of the Axis/</param>
      <returns>True if a collision is detected; false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.CollidesWithWhenRotated(Visiblox.Charts.AxisLabel)">
      <summary>
            Determine if this label collides with the other given label when they are both rotated
            through 90 degrees. This only makes sense for a horizontal axis as labels on a vertical
            axis would never get rotated for the purpose of collision avoidance and labels rotated
            through the use of LabelAngle property of AxisBase don't have collision detection
            performed.
            </summary>
      <param name="otherLabel">The other label against which to detect collisions.</param>
      <returns>True if a collision is detected; false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.Invalidate">
      <summary>
            Performs an immediate refresh of the label.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.InvalidateInternal">
      <summary>
            Refreshes the <see cref="P:Visiblox.Charts.AxisLabel.ActualText" /> property and re-calculates <see cref="P:Visiblox.Charts.AxisLabel.CalculatedWidth" /> and <see cref="P:Visiblox.Charts.AxisLabel.CalculatedHeight" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.ConfigureRenderTransform">
      <summary>
            Set up the RenderTransform for this label. The render transform is a transform groups with a RotateTransform at element
            0 and a translate transform at element 1.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.RefreshActualText">
      <summary>
            Update the ActualText property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.RecalculateDimensions">
      <summary>
            Recalculates <see cref="P:Visiblox.Charts.AxisLabel.CalculatedWidth" />, <see cref="P:Visiblox.Charts.AxisLabel.CalculatedHeight" /> and sets
            the Width and Height of itself.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.AxisLabel.TextProperty">
      <summary>
            Identifies the Text Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabel.BorderStyleProperty">
      <summary>
            Identifies the BorderStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabel.TextStyleProperty">
      <summary>
            Identifies the TextStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabel.FormattedValueProperty">
      <summary>
            Identifies the FormattedValue Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabel.FormatStringProperty">
      <summary>
            Identifies the FormatString Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabel.ActualTextProperty">
      <summary>
            Identifies the ActualText Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabel.FitToAxisSizeProperty">
      <summary>
            Identifies the FitToAxisSize Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabel.CalculatedWidthProperty">
      <summary>
            Identifies the CalculatedWidth Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabel.CalculatedHeightProperty">
      <summary>
            Identifies the CalculatedHeight Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabel.ShiftIfInsideProperty">
      <summary>
            Identifies the ShiftIfInside Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabel.CheckForCollisionProperty">
      <summary>
            Identifies the CheckForCollision Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabel.PositionProperty">
      <summary>
            Identifies the Position Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabel.IsElementHiddenProperty">
      <summary>
            Identifies the IsElementHidden Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabel.AllowAutoHideProperty">
      <summary>
            Identifies the AllowAutoHide Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisLabel.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.AxisLabel.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.BorderPadding">
      <summary>
            Gets or sets the padding to be applied to the border on the label. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.TemplateApplied">
      <summary>
            Flag for indicating if the label has had its template applied.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.LayoutRoot">
      <summary>
            Gets the root visual element of the axis label.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.TextBorder">
      <summary>
            Gets the border element of the axis label.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.TextLabel">
      <summary>
            Gets the text label of the axis label.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.RenderPosition">
      <summary>
            Get the position (centre coordinate) of the label
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.DesiredPadding">
      <summary>
            Gets the desired padding for an Axis label. This is only used when the Border isn't given a style.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.Text">
      <summary>
            Gets or sets the text to display on the label. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.BorderStyle">
      <summary>
            Gets or sets the style of the Border of the label. Use this style to get or set the Background and the BorderBrush properties of the label. The TargetType of this style should be Border. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.TextStyle">
      <summary>
            Gets or sets the style of the text of the label. The TargetType of this style should be TextBlock. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.FormattedValue">
      <summary>Gets the formatted form the label value.  This value should only be set by the axis and should not be set manually.</summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.FormatString">
      <summary>
            Gets or sets the format string to be used when rendering the label. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.ActualText">
      <summary>Gets the text that is displayed on the label. Setting of this value is done automatically, whenever <see cref="P:Visiblox.Charts.AxisLabel.Text" /> or <see cref="P:Visiblox.Charts.AxisLabel.FormattedValue" /> properties change and it should not be set manually.</summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.FitToAxisSize">
      <summary>
            Gets or sets whether the <see cref="T:Visiblox.Charts.IAxis" /> should limit the size of the label to the axis's dimensions (width for vertical axes, height for horizontal axes). This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.CalculatedWidth">
      <summary>
            Gets or sets the style of the calculated width of the label. This is set by the component based on the HorizontalAlignment settings. This property is automatically set by the AxisLabel class. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.CalculatedHeight">
      <summary>
            Gets or sets the style of the calculated height of the label. This is set by the component based on the VerticalAlignment settings. This property is automatically set by the AxisLabel class. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.ShiftIfInside">
      <summary>
            Gets or sets whether this label should be shifted when moved to the inside of the axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.CheckForCollision">
      <summary>
            Gets or sets whether this label should be checked for collisions when being rendered. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.Position">
      <summary>
            Gets or sets where the label is rendered with respect to the axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.IsElementHidden">
      <summary>
            Gets or sets whether this label is currently hidden from view (by an additional label). This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisLabel.AllowAutoHide">
      <summary>
            Gets or sets whether this label's Visibility can be set externally or not. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.AxisLabel.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AdditionalLabel.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AdditionalLabel.RecalculateDimensions">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.AdditionalLabel.AxisValueProperty">
      <summary>
            Identifies the AxisValue Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AdditionalLabel.OrientationProperty">
      <summary>
            Identifies the Orientation Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AdditionalLabel.HideCollidingAxisLabelsProperty">
      <summary>
            Identifies the HideCollidingAxisLabels Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AdditionalLabel.DesiredPadding">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AdditionalLabel.ForceFullInvalidation">
      <summary>
            Indicate if this additional label requires a full invalidation when being updated.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AdditionalLabel.AxisValue">
      <summary>
            Gets or sets the value on the axis against which the label is plotted. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AdditionalLabel.Orientation">
      <summary>
            Gets or sets the orientation of the label. This setting determines the layout of the label. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AdditionalLabel.HideCollidingAxisLabels">
      <summary>
            Gets or sets whether axis labels that would collide with this label should be hidden. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AxisBase`1">
      <summary>Provides a base implementation of <see cref="T:Visiblox.Charts.IAxis" />. An <see cref="T:Visiblox.Charts.IAxis" /> represents a single chart axis which may be vertical or horizontal.</summary>
      <remarks>
        <para>See <see cref="T:Visiblox.Charts.IAxis" /> for a discussion of the general responsibilities of an axis.</para>
        <para>
          <see cref="T:Visiblox.Charts.AxisBase`1" /> provides a base axis implementation which handles the logic required to render an axis. In particular AxisBase
            handles rendering of the axis line, title, ticks and grid stripes, and labels. AxisBase also takes care of coordinate conversion between data values and render positions,
            and the relationship between
            <see cref="P:Visiblox.Charts.AxisBase`1.Zoom" /> and <see cref="P:Visiblox.Charts.AxisBase`1.ActualRange" />'s EffectiveMaximum and EffectiveMinum members.</para>
        <para>To provide a new axis implementation, a subclass must implement <see cref="M:Visiblox.Charts.AxisBase`1.GetMajorTickValues" /> and <see cref="M:Visiblox.Charts.AxisBase`1.GetMinorTickValues" /> to specify
            what spacing ticks, labels, grid lines and grid stripes are given. Other virtual methods are provided for further customisation.</para>
        <para>
            If an invalid <see cref="P:Visiblox.Charts.IRangeProvider.Range" /> is supplied, the <see cref="P:Visiblox.Charts.AxisBase`1.ActualRange" /> will remain the same. A null <see cref="P:Visiblox.Charts.IRangeProvider.Range" /> will cause the <see cref="P:Visiblox.Charts.AxisBase`1.ActualRange" />
            to be auto-calculated.</para>
        <para>If the <see cref="P:Visiblox.Charts.AxisCommonBase`1.LabelStyle" /> defines either a TextAlignment or HorizontalAlignment, but not both, these two will be equivalent to each other.</para>
        <para>If a <see cref="P:Visiblox.Charts.AxisBase`1.LabelAngle" /> is explicitly set, <see cref="P:Visiblox.Charts.AxisBase`1.LabelCollisionDetectionMode" /> will have no effect and labels will be displayed at the given angle.</para>
      </remarks>
      <typeparam name="TComparable">The value type for this axis.</typeparam>
      <seealso cref="T:Visiblox.Charts.IAxis" />
      <seealso cref="T:Visiblox.Charts.NumericAxisBase" />
      <seealso cref="T:Visiblox.Charts.NumericAxisBase" />
      <seealso cref="T:Visiblox.Charts.LinearAxis" />
      <seealso cref="T:Visiblox.Charts.LogarithmicAxis" />
      <seealso cref="T:Visiblox.Charts.CategoryAxis" />
      <seealso cref="T:Visiblox.Charts.DateTimeAxis" />
    </member>
    <member name="T:Visiblox.Charts.AxisCommonBase`1">
      <summary>
            Provides a base implementation of <see cref="T:Visiblox.Charts.IAxisCommon" />.
            </summary>
      <remarks>
            Implements responsibilities that all Visiblox Charts axes need to have. This includes declaring
            shared properties that <see cref="T:Visiblox.Charts.IAxisCommon" /> defines (mostly related to styling, formatting and tick intervals),
            implementing basic handling of the <see cref="P:Visiblox.Charts.AxisCommonBase`1.Range" /> and implementing style properties and
            other properties shared among the axes.
            </remarks>
    </member>
    <member name="T:Visiblox.Charts.IAxisCommon">
      <summary>
            Represents an interface that defines axes for both Cartesian and radial charts.
            </summary>
      <remarks>
        <para>
            All Visiblox Charts axes have an <see cref="P:Visiblox.Charts.IAxisCommon.Orientation" /> (either horizontal or vertical) and a <see cref="P:Visiblox.Charts.IAxisCommon.Title" />.
            </para>
        <para>
            The axes also define two ranges. The <see cref="P:Visiblox.Charts.IRangeProvider.Range" /> is the range set by the user, <see cref="P:Visiblox.Charts.IRangeProvider.ActualRange" />
            is the range that's auto-calculated by the axis, taking <see cref="P:Visiblox.Charts.IRangeProvider.Range" /> into account if set.
            Different types of axes use different implementations of <see cref="T:Visiblox.Charts.IRange" />.  In order to maintain
            encapsulation each axis provides a factory method, <see cref="M:Visiblox.Charts.IRangeProvider.CreateRange" />, used to construct a new instance of the appropriate implementation 
            of <see cref="T:Visiblox.Charts.IRange" />.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.IAxis" />
    </member>
    <member name="T:Visiblox.Charts.IRangeProvider">
      <summary>
            An interface holding all the relevant information for axes with <see cref="P:Visiblox.Charts.IRangeProvider.Range" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IRangeProvider.SetActualRange(Visiblox.Charts.IRange)">
      <summary>
            If the axis does not have an explicit range set, the chart will automatically calculate
            a suitable range, with margins, for this axis, setting it via this method. This method should only
            be called by the chart or an axis implementation.
            </summary>
      <param name="range">Range to scale the axis to.</param>
    </member>
    <member name="M:Visiblox.Charts.IRangeProvider.CreateRange">
      <summary>
            Factory method. Returns the range type used by the axis implementation.
            </summary>
      <example>
            An axis that uses a double scale would return a <see cref="T:Visiblox.Charts.DoubleRange" />.
            One using categories would return a <see cref="T:Visiblox.Charts.CategoryRange" />.
            </example>
      <returns>The IRange implementation used by the concrete axis.</returns>
    </member>
    <member name="M:Visiblox.Charts.IRangeProvider.GrowActualRange">
      <summary>
            In the event that the EffectiveMinimum == EffectiveMaximum, we may need to grow the range by MajorTickInterval
            at either side; this lets concrete Axis classes do that
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRangeProvider.Range">
      <summary>
            Gets or sets the user-specified range for this axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRangeProvider.ActualRange">
      <summary>
            Gets the actual derived range of this axis, without zoom applied. 
            This object is volatile as it may be recomputed as a result of changes in data, range or zoom.
            </summary>
      <remarks>This range is either the user-specified <see cref="P:Visiblox.Charts.IRangeProvider.Range" /> if set, 
            or otherwise calculated based on the data.</remarks>
      <remarks>
        <b>Do not change the properties on this object as it may be overwritten by the chart. 
            Instead use <see cref="P:Visiblox.Charts.IRangeProvider.Range" /> to set a specific range.</b>
      </remarks>
      <seealso cref="P:Visiblox.Charts.IRangeProvider.Range" />
    </member>
    <member name="T:Visiblox.Charts.Primitives.IInvalidatable">
      <summary>
            This interface represents any element of Visiblox Charts which may be invalidated.  When an object requires invalidation it should add itself to 
            the <see cref="T:Visiblox.Charts.Primitives.InvalidationHandler" /> class.  The <see cref="T:Visiblox.Charts.Primitives.InvalidationHandler" /> holds the responsibility for calling <see cref="M:Visiblox.Charts.Primitives.IInvalidatable.DoInvalidate" />
            which is where the actual work for the invalidation should happen.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.IInvalidatable.DoInvalidate">
      <summary>
            Invalidates this object.  This method should implement any invalidation logic for the implementing class.
            </summary>
      <remarks>
            This method should never be called directly.  Instead, it is the responsibility of <see cref="T:Visiblox.Charts.Primitives.InvalidationHandler" /> to do the
            invalidate and call this method.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.Primitives.IInvalidatable.Invalidate">
      <summary>
            This method should implement any logic prior to adding an instance of itself to <see cref="T:Visiblox.Charts.Primitives.InvalidationHandler" />.
            </summary>
      <remarks>
            It is advised that when this method is called it should add an instance of itself to <see cref="T:Visiblox.Charts.Primitives.InvalidationHandler" />.
            Upon the next invalidation cycle, the DoInvalidate method will be called by the <see cref="T:Visiblox.Charts.Primitives.InvalidationHandler" />.
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.Primitives.IInvalidatable.Rendered">
      <summary>
            Gets or sets whether this <see cref="T:Visiblox.Charts.Primitives.IInvalidatable" /> object has been rendered. The <see cref="T:Visiblox.Charts.Primitives.InvalidationHandler" /> sets this property to true when
            the Rendering event is fired.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.Primitives.IInvalidatable.InvalidationEnded">
      <summary>
            Raised when <see cref="M:Visiblox.Charts.Primitives.IInvalidatable.DoInvalidate" /> has completed execution.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.IRenderElementOwner">
      <summary>
            Represents a component that defines a member - <see cref="P:Visiblox.Charts.Primitives.IRenderElementOwner.Element" /> - as its visual root.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.IRenderElementOwner.Element">
      <summary>
            Gets the framework element that needs to be added to the visual tree by the chart.
            This element is the root visual element of the component.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IEventSourceCondition">
      <summary>
            Holds the conditions under which an <see cref="T:Visiblox.Charts.IBehaviour" /> should be sent an event from a given <see cref="T:Visiblox.Charts.IBehaviourEventSource" />.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IEventSourceCondition.Accept(Visiblox.Charts.IBehaviourEventSource)">
      <summary>
            Returns true if and only if <paramref name="source" /> is accepted by this condition.  
            </summary>
      <param name="source">The <see cref="T:Visiblox.Charts.IBehaviourEventSource" /> from which the event is coming.</param>
      <returns>Returns true if and only if <paramref name="source" /> is accepted by this condition.</returns>
    </member>
    <member name="M:Visiblox.Charts.IAxisCommon.GetFormattedDataValue(System.IComparable)">
      <summary>
            Formats the given value for display on the axis.
            </summary>
      <param name="dataValue">Data value to format.</param>
      <returns>The formatted string representation.</returns>
    </member>
    <member name="M:Visiblox.Charts.IAxisCommon.GetNonAxisLabelFormattedDataValue(System.IComparable)">
      <summary>
            Formats the given value for display on the crosshair.
            </summary>
      <param name="dataValue">Data value to format.</param>
      <returns>The formatted string representation.</returns>
    </member>
    <member name="M:Visiblox.Charts.IAxisCommon.GetAdditionalLabelFormattedDataValue(System.IComparable)">
      <summary>
            Formats the given value for display on Axis AdditionalLabels.
            </summary>
      <param name="dataValue">Data value to format.</param>
      <returns>The formatted string representation.</returns>
    </member>
    <member name="M:Visiblox.Charts.IAxisCommon.GetCorrectFormatString(System.String)">
      <summary>
            Takes a format string and returns an equivalent string that can be
            used directly in <c>string.Format()</c>.
            </summary>
      <param name="originalFormatString">The format string to manipulate.</param>
      <returns>The processed format string.</returns>
    </member>
    <member name="M:Visiblox.Charts.IAxisCommon.IsDataValueRenderable(System.IComparable)">
      <summary>
            Determines whether <paramref name="dataValue" /> can be rendered on the axis.
            </summary>
      <param name="dataValue">The data value to test.</param>
      <returns>True if the data value can be rendered and false otherwise.</returns>
    </member>
    <member name="P:Visiblox.Charts.IAxisCommon.Orientation">
      <summary>
            Gets the axis orientation.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IAxisCommon.Location">
      <summary>
            Gets the location of the axis relative to the chart
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IAxisCommon.Title">
      <summary>
            Gets or sets the title for this axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IAxisCommon.LabelFormatString">
      <summary>
            Gets or sets the format string used for formatting the labels. This string can either be a simple format token, e.g. 'N2', or a 
            complete format string '{0:yyyy MMMM dd}'.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.Accept(Visiblox.Charts.IBehaviourEventSource)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.UpdateBehaviourEventSourceType">
      <summary>
            Updates the <see cref="P:Visiblox.Charts.AxisCommonBase`1.BehaviourEventSourceCategory" /> with respect to the current <see cref="P:Visiblox.Charts.AxisCommonBase`1.Location" /> and <see cref="P:Visiblox.Charts.AxisCommonBase`1.Orientation" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.RangePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when <see cref="P:Visiblox.Charts.AxisCommonBase`1.Range" /> is changed. Override to handle change event in child class.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.TitlePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when <see cref="P:Visiblox.Charts.AxisCommonBase`1.Title" /> is changed. Override to handle change event in child class.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.LabelFormatStringPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when <see cref="P:Visiblox.Charts.AxisCommonBase`1.LabelFormatString" /> is changed. Override to handle change event in child class.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.LabelStylePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when <see cref="P:Visiblox.Charts.AxisCommonBase`1.LabelStyle" /> is changed. Override to handle change event in child class.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.TitleStylePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when <see cref="P:Visiblox.Charts.AxisCommonBase`1.TitleStyle" /> is changed. Override to handle change event in child class.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.MajorTickStylePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when <see cref="P:Visiblox.Charts.AxisCommonBase`1.MajorTickStyle" /> is changed. Override to handle change event in child class.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.MinorTickStylePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when <see cref="P:Visiblox.Charts.AxisCommonBase`1.MinorTickStyle" /> is changed. Override to handle change event in child class.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.AxisLineStylePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when <see cref="P:Visiblox.Charts.AxisCommonBase`1.ShowAxis" /> is changed. Override to handle change event in child class.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.ShowAxisPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when <see cref="P:Visiblox.Charts.AxisCommonBase`1.ShowAxis" /> is changed. Override to handle change event in child class.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.ShowLabelsPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when <see cref="P:Visiblox.Charts.AxisCommonBase`1.ShowLabels" /> is changed. Override to handle change event in child class.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.MajorTickIntervalPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when <see cref="P:Visiblox.Charts.AxisCommonBase`1.MajorTickInterval" /> is changed. Override to handle change event in child class.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.MinorTickIntervalPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when <see cref="P:Visiblox.Charts.AxisCommonBase`1.MinorTickInterval" /> is changed. Override to handle change event in child class.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.Invalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.OrientationPropertyChanged">
      <summary>
            Raised on change of <see cref="P:Visiblox.Charts.AxisCommonBase`1.Orientation" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.GetFormattedDataValue(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.GetNonAxisLabelFormattedDataValue(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.GetAdditionalLabelFormattedDataValue(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.GetCorrectFormatString(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.IsDataValueRenderable(System.IComparable)">
      <summary>
            Returns whether <paramref name="dataValue" /> can be rendered on the axis.
            Override if there are points that aren't rendered in the concrete axis.
            </summary>
      <param name="dataValue">The value to check.</param>
      <returns>True if the data value is renderable and false otherwise.  The default implementation returns
            true for any non-null, non-NaN values.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.DoInvalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.SetActualRange(Visiblox.Charts.IRange)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.CreateRange">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.GrowActualRange">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.ConvertToTComparable(System.IComparable)">
      <summary>
            Converts value to TComparable.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>The casted or converted TComparable value of the passed parameter. 
                Throws InvalidCastException if the conversion is not possible.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.GetFormattedDataValueInternal(`0)">
      <summary>
            Formats the given Data value for display on the axis.
            </summary>
      <remarks>If a <see cref="P:Visiblox.Charts.AxisCommonBase`1.LabelFormatString" /> is specified, it is used otherwise the string representation of the value is used.
            This method calls back to <see cref="M:Visiblox.Charts.AxisCommonBase`1.GetFormattedDataValueInternal(`0,System.String)" /> passing <see cref="P:Visiblox.Charts.AxisCommonBase`1.LabelFormatString" /> as parameter.</remarks>
      <param name="dataValue">The Data value to format.</param>
      <returns>The formatted Data value.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.GetNonAxisLabelFormattedDataValueInternal(`0)">
      <summary>
            Formats the given Data value for display on the crosshair
            </summary>
      <remarks>Default action is to return the axis label format string</remarks>
      <returns>The formatted Data value.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.GetAdditionalLabelFormattedDataValueInternal(`0)">
      <summary>
            Formats the given Data value of an AdditionalLabel for display on the axis.
            </summary>
      <remarks>If a <see cref="P:Visiblox.Charts.AxisCommonBase`1.LabelFormatString" /> is specified, it is used otherwise the string representation of the value is used.
            This method calls back to <see cref="M:Visiblox.Charts.AxisCommonBase`1.GetAdditionalLabelFormattedDataValueInternal(`0,System.String)" /> passing <see cref="P:Visiblox.Charts.AxisCommonBase`1.LabelFormatString" /> as parameter.</remarks>
      <param name="dataValue">The Data value to format.</param>
      <returns>The formatted Data value.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.GetFormattedDataValueInternal(`0,System.String)">
      <summary>
            Formats the given Data value for display on the axis, based on the provided format string.
            </summary>
      <remarks>If <paramref name="formatString" /> is valid, it is used for formatting. 
            Otherwise the string representation of the value is used; 
            This method can be overridden in subclasses to provide specific behaviour.</remarks>
      <param name="dataValue">The Data value to format.</param>
      <param name="formatString">The format string.</param>
      <returns>The formatted Data value.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.GetNonAxisLabelFormattedDataValueInternal(`0,System.String)">
      <summary>
            Formats the given Data value for display on the crosshair, based on the provided format string.
            </summary>
      <remarks>Returns <see cref="M:Visiblox.Charts.AxisCommonBase`1.GetFormattedDataValueInternal(`0,System.String)" />.</remarks>
      <returns>The formatted Data value.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.GetAdditionalLabelFormattedDataValueInternal(`0,System.String)">
      <summary>
            Formats the given Data value of an AdditionalLabel for display on the axis, based on the provided format string.
            </summary>
      <remarks>If <paramref name="formatString" /> is valid, it is used for formatting. 
            Otherwise the string representation of the value is used; 
            This method can be overridden in subclasses to provide specific behaviour.</remarks>
      <param name="dataValue">The Data value to format.</param>
      <param name="formatString">The format string.</param>
      <returns>The formatted Data value.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.GetCorrectFormatStringInternal(System.String)">
      <summary>
            Takes a format string and returns an equivalent string that can be
            used directly in <c>string.Format()</c>.
            </summary>
      <param name="originalFormatString">The format string to manipulate.</param>
      <returns>The processed format string.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.ComputeActualIntervalInternal">
      <summary>
            Calculates the <see cref="P:Visiblox.Charts.AxisCommonBase`1.ActualMajorTickInterval" /> of the axis.
            </summary>
      <remarks>
            This base implementation sets the actual tick intervals to the user-set values if they exist.
            This method should be overridden in subclasses to calculate the actual tick intervals
            when the user has not set an interval.
            </remarks>
      <returns>true if <see cref="P:Visiblox.Charts.AxisCommonBase`1.ActualMajorTickInterval" />, <see cref="P:Visiblox.Charts.AxisCommonBase`1.ActualMinorTickInterval" /> has changed</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.RangePropertyChangedInternal(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Called when a property of <see cref="P:Visiblox.Charts.AxisCommonBase`1.Range" /> has changed. Override in child classes
            to handle this event.
            </summary>
      <param name="sender">The sender of the property changed event.</param>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.AxisCommonBase`1.RangeProperty">
      <summary>
            Identifies the Range Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisCommonBase`1.TitleProperty">
      <summary>
            Identifies the Title Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisCommonBase`1.LabelFormatStringProperty">
      <summary>
            Identifies the LabelFormatString Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisCommonBase`1.LabelStyleProperty">
      <summary>
            Identifies the LabelStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisCommonBase`1.TitleStyleProperty">
      <summary>
            Identifies the TitleStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisCommonBase`1.MajorTickStyleProperty">
      <summary>
            Identifies the MajorTickStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisCommonBase`1.MinorTickStyleProperty">
      <summary>
            Identifies the MinorTickStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisCommonBase`1.AxisLineStyleProperty">
      <summary>
            Identifies the AxisLineStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisCommonBase`1.ShowAxisProperty">
      <summary>
            Identifies the ShowAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisCommonBase`1.ShowLabelsProperty">
      <summary>
            Identifies the ShowLabels Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisCommonBase`1.MajorTickIntervalProperty">
      <summary>
            Identifies the MajorTickInterval Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisCommonBase`1.MinorTickIntervalProperty">
      <summary>
            Identifies the MinorTickInterval Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisCommonBase`1.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.AxisCommonBase`1.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.Orientation">
      <summary>
            Gets or sets the orientation of this axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.Location">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.BehaviourEventSourceCategory">
      <inheritdoc cref="P:Visiblox.Charts.IBehaviourEventSource.BehaviourEventSourceCategory" />
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.EventSourceContainer">
      <inheritdoc cref="P:Visiblox.Charts.IBehaviourEventSource.EventSourceContainer" />
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.LayoutRoot">
      <summary>
            Gets the root of this axis control.
            </summary>
      <remarks>
            Internal for UnitTesting
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.ActualMajorTickInterval">
      <summary>
            Gets the actual interval at which major ticks are drawn on the axis. Grid lines are also drawn at this interval.
            </summary>
      <remarks>This property is set to <see cref="P:Visiblox.Charts.AxisCommonBase`1.MajorTickInterval" /> if it exists, otherwise it is computed based on the data ranges.</remarks>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.ActualMinorTickInterval">
      <summary>
            Gets the actual interval at which minor ticks are drawn on the axis.
            </summary>
      <remarks>This property is set to <see cref="P:Visiblox.Charts.AxisCommonBase`1.MajorTickInterval" /> if it exists, otherwise it is computed based on the data ranges.</remarks>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.ActualRange">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.Element">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.Rendered">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.AxisCommonBase`1.InvalidationEnded">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.Range">
      <summary>
            Gets or sets the user-specified range of this axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.Title">
      <summary>
            Gets or sets the title of the axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.LabelFormatString">
      <summary>
            Gets or sets the format string used for formatting the labels. This string can either be a simple format token, e.g. 'N2', or a complete format string '{0:yyyy MMMM dd}'. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.LabelStyle">
      <summary>
            Gets or sets  the style for the labels. The Style should have a TargetType of AxisLabel. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.TitleStyle">
      <summary>
            Gets or sets  the style for the title that is shown for this axis. The Style should have a TargetType of TextBlock. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.MajorTickStyle">
      <summary>
            Gets or sets  the style for the minor ticks. The Style should have a TargetType of Line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.MinorTickStyle">
      <summary>
            Gets or sets  the style for the major ticks. The Style should have a TargetType of Line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.AxisLineStyle">
      <summary>
            Gets or sets the style used for the axis line. This Style should have a TargetType of Line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.ShowAxis">
      <summary>
            Gets or sets whether to show the whole of the axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.ShowLabels">
      <summary>
            Gets or sets whether to show tick labels on the axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.MajorTickInterval">
      <summary>
            Gets or sets the interval between major ticks. Grid lines are also spaced at this interval. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisCommonBase`1.MinorTickInterval">
      <summary>
            Gets or sets the interval between minor ticks. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.AxisCommonBase`1.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IAxis">
      <summary>
            Represents a single Cartesian chart axis which may be vertical or horizontal.
            </summary>
      <remarks>
        <para>
            An <see cref="T:Visiblox.Charts.IAxis" /> is situated along one edge of the chart's plot area (depending on the orientation 
            and specified location of the axis). Visually, it is responsible for the calculation and display of ticks and labels,
            and for adding grid lines on the chart's plot area.
            </para>
        <para>
            The <see cref="T:Visiblox.Charts.IAxis" /> is also responsible for the calculations converting between data values and plot area coordinates,
            and handling the range of data displayed along this axis.
            </para>
        <para>
            The axis supports zooming through the <see cref="P:Visiblox.Charts.IAxis.Zoom" /> property. When this property is changed the axis redraws itself.
            Also, components of the <see cref="T:Visiblox.Charts.Chart" /> (such as series and behaviours) render themselves based on the zoom value of the
            chart's axes.
            </para>
        <para>
            The axis has multiple range properties:
            <list type="bullet"><item><see cref="P:Visiblox.Charts.IRangeProvider.Range" /> -  The client supplied range. This may be null.</item><item><see cref="P:Visiblox.Charts.IAxis.ActualRange" /> - The actual axis range. If Range is specified in most cases the ActualRange will equal
            the Range exactly, otherwise ActualRange is computed automatically.</item></list></para>
        <para>The axis contains 2 distinct coordinate systems:
            <list type="bullet"><item>The Data Value- this coordinate system is defined in the data value space. This can contain any of the supported Data types, e.g. double, DateTime, etc.</item><item>The Render Position - this coordinate system is defined within the chart's PlotArea. It is used to return a coordinate where the shape can be drawn. 
            As such, it is scaled from the top in the Y direction, not the bottom.</item></list></para>
        <para>The <see cref="T:Visiblox.Charts.Chart" /> will automatically create axes based upon the supplied data, but chart users will often wish to specify their own axes
            in order to use a different axis type, or customise the various properties of an axis.</para>
        <para>To implement a new axis, it is recommended to inherit from <see cref="T:Visiblox.Charts.AxisBase`1" />.</para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.AxisBase`1" />
      <seealso cref="T:Visiblox.Charts.LinearAxis" />
      <seealso cref="T:Visiblox.Charts.DateTimeAxis" />
      <seealso cref="T:Visiblox.Charts.CategoryAxis" />
    </member>
    <member name="M:Visiblox.Charts.IAxis.GetDataValueAsRenderPositionWithZoom(System.IComparable)">
      <summary>
            Determines the render position within chart's plot area where the data value would be plotted WITH the zoom applied.
            </summary>
      <example>
            On an axis with Horizontal <see cref="T:System.Windows.Controls.Orientation" />; a <paramref name="dataValue" /> rendered at the far left of the axis (with zoom) would return 0, 
            rendered at the far right would return the Axis' ActualWidth.
            </example>
      <example>
            On an axis with Vertical <see cref="T:System.Windows.Controls.Orientation" />; a <paramref name="dataValue" /> rendered at the top of the axis (with zoom) would return 0, rendered
            at the bottom would return the Axis' ActualHeight.
            </example>
      <example>
            Should the <paramref name="dataValue" /> currently be displayed off the side of the axis, a negative or greater than the width/height position 
            may be returned.
            </example>
      <param name="dataValue">The data value for which to get the render position.</param>
      <returns>Render position where <paramref name="dataValue" /> should be plotted or Double.NaN if the provided data value is not able to be plotted.</returns>
    </member>
    <member name="M:Visiblox.Charts.IAxis.GetDataValueAsRenderPositionWithoutZoom(System.IComparable)">
      <summary>
            Determines the render position within chart's plot area where the data value would be plotted WITHOUT the zoom applied.
            I.e. this method returns a value which would be the same as invoking <see cref="M:Visiblox.Charts.IAxis.GetDataValueAsRenderPositionWithZoom(System.IComparable)" /> without the axis being zoomed in.
            </summary>
      <remarks>
            This method returns where the <paramref name="dataValue" /> would be rendered without zoom applied, regardless of whether a zoom has 
            actually been applied or not.
            </remarks>
      <example>
            On an axis with Horizontal <see cref="T:System.Windows.Controls.Orientation" />; a <paramref name="dataValue" /> rendered at the far left of the axis would return 0, rendered
            at the far right would return the Axis' ActualWidth.
            </example>
      <example>
            On an axis with Vertical <see cref="T:System.Windows.Controls.Orientation" />; a <paramref name="dataValue" /> rendered at the top of the axis would return 0, rendered
            at the bottom would return the Axis' ActualHeight.
            </example>
      <example>
            Should the <paramref name="dataValue" /> currently be displayed off the side of the axis, a negative or greater than the width/height position may be returned.
            </example>
      <param name="dataValue">The data value for which to get the render position.</param>
      <returns>Render position where <paramref name="dataValue" /> would be plotted or Double.NaN if the provided data value is not able to be plotted.</returns>
    </member>
    <member name="M:Visiblox.Charts.IAxis.GetRenderPositionAsDataValueWithZoom(System.Double)">
      <summary>
            Converts a render space coordinate position (relative to the chart's plot area) into a data space value, taking the zoom into account.
            </summary>
      <example>
            If this axis is a <c>AxisBase&lt;DateTime&gt;</c> then it will convert the double position
            to the <see cref="T:System.DateTime" /> value that it represents on the axis with zoom applied.
            </example>
      <param name="renderPosition">The render position relative to the plot area in screen coordinates.</param>
      <returns>The data value that the specified render position maps to considering the current zoom level.</returns>
    </member>
    <member name="M:Visiblox.Charts.IAxis.GetRenderPositionAsDataValueWithoutZoom(System.Double)">
      <summary>
            Converts a render space coordinate position (relative to the chart's plot area) into a data space value, without taking the zoom into account.
            </summary>
      <example>
            If this axis is a <c>AxisBase&lt;DateTime&gt;</c> then it will convert the double position
            to the <see cref="T:System.DateTime" /> value that it represents on the axis.
            </example>
      <param name="renderPosition">The render position relative to the plot area in screen coordinates.</param>
      <returns>The data value that the specified render position would map to if the chart were not zoomed.</returns>
    </member>
    <member name="M:Visiblox.Charts.IAxis.Init(System.Windows.Controls.Grid,Visiblox.Charts.AxisLocation,System.Windows.Controls.Orientation)">
      <summary>
            Invoked by the <see cref="T:Visiblox.Charts.Chart" /> when an axis
            is initially added to the chart or its location within the chart is changed.</summary>
      <remarks>This method allows the axis to obtain a reference to the 
            Grid UI element that is the chart's layout root, as well as the <paramref name="location" /> of the axis
            in relation to the plot area (e.g. primary (left or bottom) or secondary (right or top)), and the <paramref name="orientation" /> of the axis
            (i.e. vertical or horizontal). 
            Typically initialisation would include adding grid lines (which are the responsibility of each axis).
            </remarks>
      <param name="gridLayoutRoot">The root Grid of the chart's control template.</param>
      <param name="location">The location of the axis within the chart, this can be used to determine how
            to render the axis.</param>
      <param name="orientation">The orientation of the axis (i.e. vertical or horizontal).</param>
    </member>
    <member name="M:Visiblox.Charts.IAxis.DeInit">
      <summary>
            Invoked by the chart when an axis is removed from display. 
            Typically used to remove grid lines and anything else set up in the <see cref="M:Visiblox.Charts.IAxis.Init(System.Windows.Controls.Grid,Visiblox.Charts.AxisLocation,System.Windows.Controls.Orientation)" /> method.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IAxis.GetZoom(System.Double,System.Double)">
      <summary>
            Determines the zoom required such that the indicated render position (i.e. pixel) range fills the axis.
            </summary>
      <remarks>
            Determines the Zoom value that would be required in order to zoom the axis such 
            that the range described by the startPoint and endPoint pixel coordinates fills the 
            axis. For example, if this is a horizontal axis with an ActualWidth of 500 pixels,
            invoking GetZoom with start and end points of 100 and 200 respectively would provide a 
            zoom, which when applied to the axis, would result in the data within this 100 pixel range filling
            the entire axis.
            </remarks>
      <param name="startPoint">The start point, in render coordinates.</param>
      <param name="endPoint">The end point, in render coordinates.</param>
      <returns>The computed zoom, or null if no zoom could be computed.</returns>
    </member>
    <member name="M:Visiblox.Charts.IAxis.AdoptZoomAsRange">
      <summary>
            Normalises the <see cref="P:Visiblox.Charts.IRangeProvider.Range" /> of the axis to represent the effective range of the axis with a default <see cref="P:Visiblox.Charts.IAxis.Zoom" /> 
            (i.e. scale 1 and offset 0).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IAxis.Zoom">
      <summary>
            Gets or sets the zoom applied to this axis. This property is used by components of the
            <see cref="T:Visiblox.Charts.Chart" /> to determine their position and size when plotting themselves.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IAxis.ActualRange">
      <summary>
            Gets the actual derived range of this axis, without zoom applied. This object is volatile as it may be recomputed as a result of changes in data, range or zoom.
            </summary>
      <remarks>
        <para>This range is either the user-specified <see cref="P:Visiblox.Charts.IRangeProvider.Range" /> if set, or otherwise calculated based on the data.</para>
        <para>
          <b>Do not change the properties on this object as it may be overwritten by the chart. 
            Instead use IAxis.Range to set a specific range.</b>
        </para>
        <para>To obtain the range with zoom applied, see the <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMinimum" /> and <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMaximum" /> properties
            of this range object.</para>
      </remarks>
      <seealso cref="P:Visiblox.Charts.IRangeProvider.Range" />
    </member>
    <member name="P:Visiblox.Charts.IAxis.ActualRenderedRange">
      <summary>
            Get the actual rendered range of the axis taking the window scaling factor into account.
            </summary>
      <remarks>
            This value may be computed asynchronously as the axis is not rendered immediately. In most cases the <see cref="P:Visiblox.Charts.IAxis.ActualRange" /> should be used
            to obtain the <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMinimum" /> and <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMaximum" /> which
            define the 
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.IAxis.ReverseAxis">
      <summary>
            Gets or sets whether the axis is reversed.  A reversed axis will render in the reverse order, such that the smaller values are at the right or top and the
            larger values are at the left or bottom of an X or Y axis respectively.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IAxis.SupportsStreaming">
      <summary>
            Indicates whether the axis supports streaming optimizations. It will only take effect if the chart <see cref="T:Visiblox.Charts.StreamingMode" /> is not set to None.
            </summary>
      <remarks>
            Only set it to true if the axis plots continuous values.
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.IAxis.AutoScaleToVisibleData">
      <summary>
            Gets or sets whether the axis range should be computed to include only data currently visible on the chart on the basis of another axis' range.
            </summary>
      <remarks>
            If enabled, the axis will be rendered each time the visible data changes. This is particularly useful when setting the range of one axis manually
            resulting in data points no longer on the chart's visible area.
            </remarks>
      <remarks>
            Note that the use of this property is only required when wanting to restrict the auto-calculated range of one axis based on the data currently included by the range
            on another.  Take the example where the data series contains the first 10 integer points of the function y=x from 0 to 9, but the x-axis range was restricted
            manually to the range 0-3.  If <see cref="P:Visiblox.Charts.IAxis.AutoScaleToVisibleData" /> is set to false on the y-axis its range will be calculated as 0-9, taking into
            consideration all points in the data series.  If <see cref="P:Visiblox.Charts.IAxis.AutoScaleToVisibleData" /> is set to true on the y-axis its range will be calculated as 
            0-3, taking into consideration only those points shown based on the x-axis' range.
            </remarks>
      <remarks>
            This property is not required to make the axis automatically calculate a range based on the data contained in the data series, that will automatically
            happen by default unless an explicit <see cref="P:Visiblox.Charts.IRangeProvider.Range" /> is set by the user.
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.IAxis.IsAutoMarginEnabled">
      <summary>
            Gets or sets whether margins are enabled for auto-generated ranges on this axis.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.IAxis.ValueConversionChanged">
      <summary>
            Raised to indicate the display position &lt;-&gt; axis value conversion has changed thus requiring data plotted against this axis to re-render.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IAxis.RenderingEnabled">
      <summary>
            Gets or sets whether rendering is enabled.  If set to false the axis should not render itself, in particular ticks and labels.  This can be used during
            panning or zooming to improve performance of the animation.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IAxis.AdditionalLabels">
      <summary>
            Gets the list of labels added externally to the axis.  These are labels that are positioned in the same panel as the tick labels but at user defined
            position and optionally with alternate styling.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IBehaviourEventSource">
      <summary>
            The logical source of a behaviour event.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IBehaviourEventSource.BehaviourCanvas">
      <summary>
            The <see cref="T:System.Windows.Controls.Canvas" /> from which interaction events are raised and to which <see cref="T:System.Windows.FrameworkElement" />s can be added. 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IBehaviourEventSource.EventSourceContainer">
      <summary>
            The <see cref="T:System.Windows.FrameworkElement" /> container in which this event source resides. 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IBehaviourEventSource.BehaviourEventSourceCategory">
      <summary>
            Some information about what kind of source this is.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.MAXIMUM_ALLOWED_TICKS">
      <summary>
            Defines the maximum number of ticks that can be created.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.ShowAxisPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.ShowLabelsPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.MajorTickIntervalPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.MinorTickIntervalPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.LabelStylePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.LabelFormatStringPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.#ctor">
      <summary>
            Default constructor, sets up default properties.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.CreateElementContainer">
      <summary>
            Create an instance of an appropriate implementation of IAxisElementContainer to be used by this Axis.
            </summary>
      <returns>An instance of an implementation of IAxisElementContainer.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.OnApplyTemplate">
      <summary>
             Called whenever ApplyTemplate is called on the control.
             Sets up the graphical components of the Axis.
            </summary>
      <remarks>
            Subclasses must call this base implementation for correct behaviour.
            Subclasses can override <see cref="M:Visiblox.Charts.AxisBase`1.GetTemplateChildren" /> if they use a different template. In this case, the subclass
            will have responsibility for configuring the visual elements correctly (by also overriding
            <see cref="M:Visiblox.Charts.AxisBase`1.SetupAxisContainerLayout" /> and, if using the <see cref="T:Visiblox.Charts.IAxisElementContainer" />, <see cref="M:Visiblox.Charts.AxisBase`1.ConfigureElementContainer" />).
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.DoInvalidate">
      <summary>
        <inheritdoc />
            Does this by recalculating the display location / visibility of the axis.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.Invalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.GetTemplateChildren">
      <summary>
            Get any elements from the ControlTemplate that are required for the Axis to correctly render. If the axis template has been altered from the
            default, this method should be overridden to accommodate any new/different elements that are in the template.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.ConfigureElementContainer">
      <summary>
            If the Axis is using an AxisZoomCanvas to render its ticks and tick labels, it should be setup in here. The default implementation
            synchronizes the properties used by AxisElementCanvas and adds it to it container object on the Axis.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.SetupAxisContainerLayout">
      <summary>
            Sets up the layout of the axis label and tick labels containers by (re)assigning their grid cells as needed.
            Subclasses can override to layout the axis elements containers as necessary. Note that the default implementation
            requires the elements defined in the default ControlTemplates which are obtained in OnApplyTemplate.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.LinkGridManagerToElementContainer">
      <summary>
            This method provides a hook for linking any properties of the GridManager (which is a ZoomCanvas) to any
            appropriate properties of the ElementContainer.
            </summary>
      <remarks>
            The default implementation of IAxisElementContainer is based on a ZoomCanvas and this method
            connects to Zoom properties together.
            If a different implementation of IAxisElementContainer is used, appropriate measures should be
            taken to ensure the GridManager has its Zoom property updated when the data is zoomed/panned.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.ConfigureElementContainerRenderCollection(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{System.Double})">
      <summary>
            Provide a hook for configuring the render collection of the element container.
            </summary>
      <param name="tickValues">A list of tick values that the element container can use.</param>
      <param name="tickPositions">The corresponding list of render positions for the tick values.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.UpdateElementContainerElements">
      <summary>
            Provide a hook for updating the element container elements.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.ResetElementContainer">
      <summary>
            Provide a hook for resetting the element container.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.ReconfigureElementContainerSize">
      <summary>
            Provide a hook for forcing the element container to re-measure itself.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.SynchroniseElementContainerProperties">
      <summary>
            Synchronizes the properties of the ElementContainer with the current Axis property values.
            </summary>
      <remarks>
            Default implementation synchronizes the following properties of AxisElementCanvas:
              TickLabelStyle, TickLabelAngle, TickLabelsTickAlignment,
              Major/MinorTickStyle, Major/MinorTickSize,
              Location, Orientation,
              LabelCollisionDetectionMode, LabelsPosition, LabelOverflowAllowed
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.UpdateElementContainerSpecialProperties">
      <summary>
            This method provides a hook for updating any special properties of the Axis Element Container
            at the end of an Invalidation.
            </summary>
      <remarks>
            The default implementation of IAxisElementContainer (a ZoomCanvas) uses the Zoom property to
            correctly scale and offset the elements so they still in synch with the rendered data.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.GetMajorTickValues">
      <summary>
             Calculates the major tick values to be displayed, using the current effective range of the axis.
            </summary>
      <seealso cref="M:Visiblox.Charts.AxisBase`1.GetMinorTickValues" />
      <returns>A list of major tick values containing no duplicates.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.GetMinorTickValues">
      <summary>
            Calculates the minor tick values to be displayed, using the current effective range of the axis.
            </summary>
      <seealso cref="M:Visiblox.Charts.AxisBase`1.GetMajorTickValues" />
      <returns>A list of minor tick values containing no duplicates.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.CreateTicks">
      <summary>
             Creates the major/minor ticks and adds them to the appropriate container on the axis.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.CreateAxisTickLabels">
      <summary>
            Creates the axis labels and adds them to the appropriate container on the axis.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.CreateAdditionalAxisLabels">
      <summary>
            Add any additional labels to the element container.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.GetMajorGridlineTickValues">
      <summary>
            Get the tick values that will be used for major gridlines (and stripes).
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.GetMinorGridlineTickValues">
      <summary>
            Get the tick values that will be used for minor gridlines.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.InvalidateGridlines">
      <summary>
            This method is responsible for 'invalidating' the GridContainer/&gt;.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.GetDataValueAsRenderPositionWithZoom(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.GetDataValueAsRenderPositionWithoutZoom(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.GetRenderPositionAsDataValueWithZoom(System.Double)">
      <inheritdoc />
      <remarks>
            If the ActualRange is null - i.e. the axis is not fully built - a null value will be returned as the data value.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.GetRenderPositionAsDataValueWithoutZoom(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.GetDataValueAsAxisValue(`0)">
      <summary>
            Converts a data value into an arbitrary double scale. This removes the complexity of converting to/from a render position which is handled
            in <see cref="T:Visiblox.Charts.AxisBase`1" />.
            </summary>
      <remarks>
            Converting a Data value to and from a Render position requires finding the data value relative to the current location of the left most
            Data value and the height/width of the chart. This method is provided to remove the need to implement this boiler plate code
            and allow an implementation to simply convert the Data value into an arbitrary double scale, which will be converted to a render position
            internally.
            </remarks>
      <remarks>
            This is the inverse of <see cref="M:Visiblox.Charts.AxisBase`1.GetAxisValueAsDataValue(System.Double)" />.</remarks>
      <example>
            A DateTime axis implementation could use the Ticks value of the DateTime passed through.
            </example>
      <example>
            A double-based axis implementation could simply return the Data value as a double.
            </example>
      <param name="dataValue">A data value.</param>
      <returns>Arbitrary axis value corresponding to <paramref name="dataValue" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.GetAxisValueAsDataValue(System.Double)">
      <summary>
            Converts a value in the arbitrary double scale into a data value. This removes the complexity of converting to/from a
            render position which is handled in <see cref="T:Visiblox.Charts.AxisBase`1" />.
            </summary>
      <remarks>
            Converting a Data value to and from a Render position requires finding the data value relative to the current location of the left most
            Data value and the height/width of the chart. This method is provided to remove the need to implement this boiler plate code
            and allow an implementation to simply convert an arbitrary double scale into the Data value, which will be converted to a render position
            internally.
            </remarks>
      <remarks>
            This is the inverse of <see cref="M:Visiblox.Charts.AxisBase`1.GetDataValueAsAxisValue(`0)" />.</remarks>
      <example>
            A DateTime axis implementation could return the DateTime value of the number of Ticks passed through.
            </example>
      <example>
            A double-based axis implementation could simply return the double as the Data value.
            </example>
      <param name="axisValue">The value (in the axis specific axis range) to retrieve as a data value.</param>
      <returns>Data value corresponding to <paramref name="axisValue" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.GetZoom(System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.ComputeZoom(System.Double,System.Double)">
      <summary>
            Determines the zoom required in order for the EffectiveRange to have the given
            max / min values.
            </summary>
      <param name="max">The effective maximum value of the range to zoom in to.</param>
      <param name="min">The effective minimum value of the range to zoom in to.</param>
      <returns>A created zoom object representing the zoom required to result in the specified range.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.SetActualRange(Visiblox.Charts.IRange)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.CreateRangeWithEffectiveLimits(Visiblox.Charts.IRange{`0})">
      <summary>
            Factory method. Returns the range type used by the axis implementation as a range with effective limits.
            Clones the <see cref="P:Visiblox.Charts.IRange.Maximum" /> and <see cref="P:Visiblox.Charts.IRange.Minimum" /> from <paramref name="range" />.
            </summary>
      <param name="range">The range describing the maximum and minimum extents to set on the new range with effective limits.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.AdoptZoomAsRange">
      <summary>
            Normalises the <see cref="P:Visiblox.Charts.IRangeProvider.Range" /> of the axis to represent the effective range of the axis with a default <see cref="P:Visiblox.Charts.AxisBase`1.Zoom" />
            (i.e. scale 1 and offset 0). Note that if <see cref="P:Visiblox.Charts.AxisBase`1.ActualRange" /> is null (which may happen if there is no <see cref="P:Visiblox.Charts.IRangeProvider.Range" /> set and
            no data on the chart from which to calculate a range) then this method will simply result in resetting the <see cref="P:Visiblox.Charts.AxisBase`1.Zoom" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.ComputeEffectiveRange">
      <summary>
            Re-computes <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMaximum" /> and <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMaximum" />
            on <see cref="P:Visiblox.Charts.AxisBase`1.ActualRange" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.GetActualMinimumDisplayValue">
      <summary>
            Returns the display value of the beginning of the rendered range.
            This implementation returns the render position of ActualRange.Minimum.
            Override if needed to modify this value.
            </summary>
      <returns>The display value.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.GetActualMaximumDisplayValue">
      <summary>
            Returns the display value of the end of the rendered range.
            This implementation returns the render position of ActualRange.Maximum.
            Override if needed to modify this value.
            </summary>
      <returns>The display value.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.GrowWindowedRange">
      <summary>
            Grow the ActualRenderedRange by the amount specified in RenderWindowFactor
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.OrientationPropertyChanged">
      <summary>
            Handles when the Orientation property is changed.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.TitlePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            If the Title of the axis is blank then manually collapse the axis label (AxisLabel), otherwise ensure that it's visible.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.OnActualRangePropertyChanged">
      <summary>
            Invoked when ActualRange has changed.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.OnValueConversionChanged(System.EventArgs)">
      <summary>
            Called by a subclass to raise the <see cref="E:Visiblox.Charts.AxisBase`1.ValueConversionChanged" /> event.
            </summary>
      <param name="args">Event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.RangePropertyChangedInternal(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Called when the PropertyChanged event has been fired on the Range.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.Init(System.Windows.Controls.Grid,Visiblox.Charts.AxisLocation,System.Windows.Controls.Orientation)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisBase`1.DeInit">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.AutoScaleToVisibleDataProperty">
      <summary>
            Identifies the AutoScaleToVisibleData Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.ZoomProperty">
      <summary>
            Identifies the Zoom Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.LabelAngleProperty">
      <summary>
            Identifies the LabelAngle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.LabelCollisionDetectionModeProperty">
      <summary>
            Identifies the LabelCollisionDetectionMode Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.LabelPositionProperty">
      <summary>
            Identifies the LabelPosition Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.MajorGridlineStyleProperty">
      <summary>
            Identifies the MajorGridlineStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.MinorGridlineStyleProperty">
      <summary>
            Identifies the MinorGridlineStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.GridStripeStyleProperty">
      <summary>
            Identifies the GridStripeStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.ShowMajorTicksProperty">
      <summary>
            Identifies the ShowMajorTicks Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.ShowMinorTicksProperty">
      <summary>
            Identifies the ShowMinorTicks Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.ShowAdditionalLabelsProperty">
      <summary>
            Identifies the ShowAdditionalLabels Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.ShowMajorGridlinesProperty">
      <summary>
            Identifies the ShowMajorGridlines Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.ShowMinorGridlinesProperty">
      <summary>
            Identifies the ShowMinorGridlines Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.ShowGridStripesProperty">
      <summary>
            Identifies the ShowGridStripes Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.IsAutoMarginEnabledProperty">
      <summary>
            Identifies the IsAutoMarginEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.IsLabelOverflowAllowedProperty">
      <summary>
            Identifies the IsLabelOverflowAllowed Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.LabelTickAlignmentProperty">
      <summary>
            Identifies the LabelTickAlignment Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.RenderingEnabledProperty">
      <summary>
            Identifies the RenderingEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.ReverseAxisProperty">
      <summary>
            Identifies the ReverseAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.RenderWindowFactorProperty">
      <summary>
            Identifies the RenderWindowFactor Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.AxisMinWidthProperty">
      <summary>
            Identifies the AxisMinWidth Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisBase`1.LayoutCycleDetectionLimitProperty">
      <summary>
            Identifies the LayoutCycleDetectionLimit Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.AxisTitleLabel">
      <summary>
             The axis label control.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.GridManager">
      <summary>
            Gets the container for the grid lines and stripes
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.LabelsContainer">
      <summary>
            Gets the container of the AxisElementCanvas.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.AxisLabelContainer">
      <summary>
            The container of the AxisTitleLabel
            </summary>
      <remarks>
            The transpose panel is used to rotate the control so that it can be used in horizontal or vertical situations.
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.AxisLine">
      <summary>
            The visible Axis Line
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.AxisElementContainer">
      <summary>
            The container onto which Axis Ticks and Tick Labels are rendered. This object contains all the logic for
            correctly positions the ticks and labels based on the tick values and render positions provided by the
            Axis during Invalidation.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.BehaviourCanvas">
      <summary>
            The <see cref="T:System.Windows.Controls.Canvas" /> from which user input events are raised.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.AdditionalLabels">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.ActualRenderedRangeValid">
      <summary>
            A flag indicating the ActualRenderedRange property can be used for this Axis type. This has nothing
            to do with the actual validity of the RenderedRange, just whether it should be used.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.NumberOfTicks">
      <summary>
            Gets the number of ticks to be displayed on the Axis.
            </summary>
      <remarks>Calculated based on the size of the chart in order to provide a readable and aesthetic display.
            This is not related to the data being displayed, and may be varied slightly in order to suitably subdivide the range.</remarks>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.ActualLabelsTickAlignment">
      <summary>
            Gets or sets the actual tick label alignment of the axis, i.e. the user set value of
            <see cref="P:Visiblox.Charts.AxisBase`1.LabelTickAlignment" /> if one exists, otherwise the alignment assigned by the axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.ActualLabelCollisionDetectionMode">
      <summary>
            The LabelCollisionDetectionMode has certain restrictions.
            1. Only None and Hide make sense on a Vertical Axis.
            2. A horizontal Axis with LabelPosition of Inside should use RotateAndHide only.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.SupportsStreaming">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.OrientationReversed">
      <summary>
            Special property used to assist calculation where a Reverse Axis effectively results in
            a switch of the orientation for the purpose of the calculation.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.AxisBase`1.ValueConversionChanged">
      <summary>
            Raised to indicate the render position &lt;-&gt; data value conversion has changed.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.CachedReverseAxis">
      <summary>
            Cached Reverse Axis property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.AxisBase`1.InvalidationEnded">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.ActualRange">
      <inheritdoc cref="P:Visiblox.Charts.IAxis.ActualRange" />
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.ActualRenderedRange">
      <inheritdoc cref="P:Visiblox.Charts.IAxis.ActualRenderedRange" />
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.AutoScaleToVisibleData">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.Zoom">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.LabelAngle">
      <summary>
            Gets or sets the angle of the labels, in degrees, with clockwise rotation. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.LabelCollisionDetectionMode">
      <summary>
            Gets or sets the mode of collision detection that is used when rendering Axis Tick Labels. Only applies to X Axes. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.LabelPosition">
      <summary>
            Gets or sets where labels on the axis should be displayed. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.MajorGridlineStyle">
      <summary>
            Gets or sets the style that is applied to the Major Grid lines drawn on the chart. The Style should have a TargetType of Line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.MinorGridlineStyle">
      <summary>
            Gets or sets the style that is applied to the Minor Grid lines drawn on the chart. The Style should have a TargetType of Line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.GridStripeStyle">
      <summary>
            Gets or sets the style applied to grid stripes, if shown. The Style should have a TargetType of Path. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.ShowMajorTicks">
      <summary>
            Gets or sets whether to show major ticks on the axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.ShowMinorTicks">
      <summary>
            Gets or sets whether to show minor ticks on the axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.ShowAdditionalLabels">
      <summary>
            Gets or sets whether to show additional labels on the axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.ShowMajorGridlines">
      <summary>
            Gets or sets whether the major grid lines are shown on the graph for this Axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.ShowMinorGridlines">
      <summary>
            Gets or sets whether the minor grid lines are shown on the graph for this Axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.ShowGridStripes">
      <summary>
            Gets or sets whether grid stripes are shown on the chart. Grid stripes are alternating bands of colour (as if filling in between every second pair of grid lines). This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.IsAutoMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.IsLabelOverflowAllowed">
      <summary>
            Gets or sets whether labels are allowed to overflow outside of their panel. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.LabelTickAlignment">
      <summary>
            Gets or sets whether tick labels should be located beside their tick or between two ticks. Note that when tick labels are between ticks, minor ticks will not be generated regardless of the value of ShowMinorTicks. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.RenderingEnabled">
      <summary>
            Gets or sets whether rendering is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.ReverseAxis">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.RenderWindowFactor">
      <summary>
            Gets or sets the factor to grow the effective range by when determining how much of the visual axis elements to render (not applicable to CategoryAxis). This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.AxisMinWidth">
      <summary>
            Gets or sets the minimum width of a vertical axis, should be used instead of MinWidth. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisBase`1.LayoutCycleDetectionLimit">
      <summary>
            Gets or sets the time window used to constrain layout cycle detection (in ms). Layout cycles can occur when different chart elements (such as the axes) cause each other to resize in a loop, and will cause the application to hang/crash. The chart tries to avoid this by detecting repeated cyclical size changes which occur during the specified time window. A large value may cause false positives, leading to incorrect rendering, whereas a small value may not detect a layout cycle. A non-positive value will disable this detection. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AxisCollection">
      <summary>
            Instantiation of the generic type <c>ObservableCollection&lt;IAxis&gt;</c> so that it can be used in XAML.
            </summary>
      <remarks>
            Used by <see cref="T:Visiblox.Charts.Chart" /> to represent its additional axes: <see cref="P:Visiblox.Charts.Chart.AdditionalPrimaryYAxes" /> and
            <see cref="P:Visiblox.Charts.Chart.AdditionalSecondaryYAxes" /></remarks>
    </member>
    <member name="T:Visiblox.Charts.AxisProperties">
      <summary>
            A container for properties associated with an Axis that can be provided to an implementation of
            IAxisElementContainer for use when rendering axis elements.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisProperties.Orientation">
      <summary>
            The orientation of the Axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisProperties.Location">
      <summary>
            The location of the Axis with respect to the chart (primary/secondary).
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AxisZoomCanvas`1">
      <summary>
            The AxisZoomCanvas{TComparable} allows an Axis to provide its Tick values and corresponding render values. These are
            then used by the AxisZoomCanvas to correctly position ticks and labels and update their visibility with respect to
            their position relative to the visible window.
            </summary>
      <typeparam name="TComparable">The IComparable data type being used by the Axis.</typeparam>
    </member>
    <member name="T:Visiblox.Charts.AxisZoomCanvasBase">
      <summary>
            Canvas for rendering ticks and labels on the axis. Responsible for detecting collisions and plotting elements to avoid collision when this is required.
            Rendering is based on the <see cref="T:System.Windows.Controls.Orientation" />, <see cref="P:Visiblox.Charts.AxisCommonBase`1.Location" />, <see cref="P:Visiblox.Charts.AxisBase`1.LabelPosition" /> and <see cref="P:Visiblox.Charts.AxisBase`1.LabelCollisionDetectionMode" /> properties.
            </summary>
      <remarks>
        <para>
            Custom logic is applied to render elements correctly on horizontal and vertical axes (based on the <see cref="T:System.Windows.Controls.Orientation" /> property),
            primary and secondary axes (based on the <see cref="P:Visiblox.Charts.AxisCommonBase`1.Location" /> property),
            and depending if labels are to be displayed inside or outside of the axis (based on the <see cref="P:Visiblox.Charts.AxisBase`1.LabelPosition" /> property).
            </para>
        <para>
            If collision is detected, elements are first displayed alternating, then rotated 90 degrees to avoid collision.
            If rotated elements are still colliding, labels are dropped until such time that there are no collisions.
            </para>
        <para>
            Collision detection is only done for elements that have the CheckForCollision attached property set to true.
            Typically this property is set true for labels and false for ticks by the axis that contains this canvas.
            </para>
      </remarks>
    </member>
    <member name="T:Visiblox.Charts.Primitives.ZoomCanvas">
      <summary>
            Represents a canvas which provides a zooming effect for its child elements.
            </summary>
      <remarks>
            A ZoomCanvas behaves like a <see cref="T:System.Windows.Controls.Canvas" /> which can reposition / scale 
            its child elements based on  its <see cref="P:Visiblox.Charts.Primitives.ZoomCanvas.XZoom" /> and <see cref="P:Visiblox.Charts.Primitives.ZoomCanvas.YZoom" /> properties. 
            Like <see cref="T:System.Windows.Controls.Canvas" />, ZoomCanvas has a <see cref="P:Visiblox.Charts.Primitives.ZoomCanvas.Children" /> property which is 
            a collection containing the items displayed on the canvas. In addition, ZoomCanvas defines two attached 
            dependency properties which control the repositioning or rescaling of these items. 
            The <c>ZoomCanvas.ElementPosition</c> property defines the position of a <see cref="T:System.Windows.UIElement" />, 
            which will be changed on zoom to move the element appropriately (without rescaling it). Alternatively, the 
            <c>ZoomCanvas.IsScaledPath</c> property indicates that a <see cref="T:System.Windows.Shapes.Path" /> should be 
            rescaled on zoom, so that it will be enlarged or shrunk appropriately.  <c>ZoomCanvas.ElementPosition</c> should be used
            to handle shapes on which a resizing effect is not desired when zooming in (e.g. points on a line series, where the size
            of the ellipses should remain constant regardless of the zoom factor). <c>ZoomCanvas.IsScaledPath</c> should be set where
            a path defining the child of the zoom canvas should have the zoom applied to it (e.g. columns in a column chart, 
            which should become larger when zooming in).  Note also when making changes to an element for which IsScaledPath is set to true, 
            a manual call to <see cref="M:Visiblox.Charts.Primitives.ZoomCanvas.RepositionOrRescaleElement(System.Windows.FrameworkElement)" /> should be made to notify the chart to update the scaling of that element.</remarks>
      <example>The following example creates a ZoomCanvas in XAML, with a square set to be scaled, and a circle set 
            to be repositioned.
            The XZoom is set to 0.5, resulting in half as much data being shown and an apparent 'zoom in'. No offset is applied, so the shapes'
            bottom left corner will remain in the same location. As the square has <c>ZoomCanvas.IsScaledPath</c> set to true, the square
            will becomes a rectangle twice as wide as it is high.
            <code source="Help\Charts\IncludedCode\ZoomCanvasExample.xml" lang="XAML" /></example>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ZoomCanvas.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.ZoomCanvas.ElementPositionProperty">
      <summary>
            Sets the position of an element when in a non-zoomed state.  Using this attached property will result in the 
            element being translated into the right place during a zoom but it will not be resized at all.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ZoomCanvas.SetElementPosition(System.Windows.DependencyObject,System.Windows.Point)">
      <summary>
             Sets the position of an element when in a non-zoomed state.
            </summary>
      <param name="obj">The object to add element position to.</param>
      <param name="position">The elements position.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ZoomCanvas.GetElementPosition(System.Windows.DependencyObject)">
      <summary>
            Gets the position of an element when in a non-zoomed state.
            </summary>
      <param name="obj">The object to find the position of.</param>
      <returns>The position of the object.</returns>
    </member>
    <member name="F:Visiblox.Charts.Primitives.ZoomCanvas.IsScaledPathProperty">
      <summary>
            Indicates that a Path should be scaled on zoom.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ZoomCanvas.SetIsScaledPath(System.Windows.Shapes.Path,System.Boolean)">
      <summary>
            Sets whether a Path should be scaled on zoom.
            </summary>
      <param name="path">The path which this property is attached to.</param>
      <param name="scaled">Whether to scale <paramref name="path" /> on zoom.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ZoomCanvas.GetIsScaledPath(System.Windows.Shapes.Path)">
      <summary>
            Gets whether a Path should be scaled on zoom.
            </summary>
      <param name="path">The path which this property is attached to.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ZoomCanvas.OnApplyTemplate">
      <summary>
            Handles the visual layout of the element.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ZoomCanvas.RepositionOrRescaleElement(System.Windows.FrameworkElement)">
      <summary>
            Force a rescale/reposition of the <paramref name="element" /> when the chart contents change for any reason
            other than zooming occurring.
            </summary>
      <param name="element">The FrameworkElement to be repositioned/resized.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ZoomCanvas.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.Primitives.ZoomCanvas.XZoomProperty">
      <summary>
            Identifies the XZoom Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.ZoomCanvas.YZoomProperty">
      <summary>
            Identifies the YZoom Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ZoomCanvas.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.Primitives.ZoomCanvas.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.Primitives.ZoomCanvas.Children">
      <summary>
            Gets the collection of items displayed on this canvas.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.ZoomCanvas.XZoom">
      <summary>
            Gets or sets the XZoom property, used to apply a zoom to the canvas in the X direction. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.ZoomCanvas.YZoom">
      <summary>
            Gets or sets the YZoom property, used to apply a zoom to the canvas in the Y direction. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.Primitives.ZoomCanvas.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IAxisElementContainer">
      <summary>
            An Axis will use an implementation of an IAxisElementContainer to render its ticks and labels along
            with any other UI Elements it wishes to show.
            </summary>
      <remarks>
            The responsibilities of an IAxisElementContainer include:
             - Rendering the elements of an Axis (such a ticks marks, labels and additional labels).
             - Refreshing those elements when necessary
                 - This may include altering the position in line with changes to the Axis (for Zoom, Pan, etc) and updating any text or values they display
             - Measuring both its elements and itself.
             
            For this, the container will/may need the following information from the Axis:
            <list type="bullet"><item><description>The tick values and their respective render positions</description></item><item><description>Tick styles and size (for both Major and Minor ticks)</description></item><item><description>Label styles, angle and position (inside/outside)</description></item><item><description>Any label collision detection that should be performed</description></item><item><description>Whether overflowing labels are allowed</description></item><item><description>Orientation and Location of Axis</description></item></list></remarks>
    </member>
    <member name="M:Visiblox.Charts.IAxisElementContainer.MeasureSize(System.Boolean)">
      <summary>
            Measure the size of the container, taking any children into account.
            </summary>
      <param name="widenLabels">Flag indicating if any labels should be widened if alignment is Stretch.</param>
    </member>
    <member name="M:Visiblox.Charts.IAxisElementContainer.UpdateElements(System.Boolean)">
      <summary>
            Update the rendered elements (visibility, position, text, etc.)
            </summary>
      <param name="forceCollapsed">Indicates that all elements should be collapsed regardless of anything else.</param>
    </member>
    <member name="M:Visiblox.Charts.IAxisElementContainer.ResetContainer">
      <summary>
            A master reset for any container specific properties, objects etc. Will be called during an Axis Invalidation.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IAxisElementContainer.ResetMaxSizes">
      <summary>
            A softer reset operation than <see cref="M:Visiblox.Charts.IAxisElementContainer.ResetContainer" />, indicates the max sizes should be reset as a prelude to remeasuring label sizes.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IAxisElementContainer.RenderAdditionalLabel(Visiblox.Charts.AdditionalLabel)">
      <summary>
            Render a single additional label
            </summary>
      <remarks>
            It is the responsibility of the caller to instantiate and correctly configure the AdditionalLabel. The Axis will
            determine the correct render position of the label (setting the RenderPosition property) based on how it has been
            configured.</remarks>
      <param name="label">The AdditionalLabel to add to the container.</param>
    </member>
    <member name="M:Visiblox.Charts.IAxisElementContainer.PreRenderAdditionalLabel(Visiblox.Charts.AdditionalLabel)">
      <summary>
            Prepare for rendering a single additional label by ensuring property values are correctly inherited.
            </summary>
      <remarks>In practice this means adding to the visual tree</remarks>
      <param name="label">
      </param>
    </member>
    <member name="M:Visiblox.Charts.IAxisElementContainer.RemoveAdditionalLabel(Visiblox.Charts.AdditionalLabel)">
      <summary>
            Remove the <paramref name="label" /> from the container. As AdditionalLabels are the responsibility of their
            constructing owner, this method provides a way of removing them rather than expecting the container to do it
            as part of its reset process.
            </summary>
      <param name="label">The AdditionalLabel to remove from the container.</param>
    </member>
    <member name="M:Visiblox.Charts.IAxisElementContainer.HideCollidingLabels(Visiblox.Charts.AdditionalLabel)">
      <summary>
            Used by the Axis to hide any of the labels that may collide with the given additional<paramref name="label" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IAxisElementContainer.UnhideCollidingLabels">
      <summary>
            Used by the Axis to unhide any labels that may have been colliding with any AdditionalLabels.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IAxisElementContainer.TickProperties">
      <summary>
            Collection of properties associated with the Tick Marks of the Axis. <see cref="T:Visiblox.Charts.AxisBase`1" /> can update these values as it deems necessary.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IAxisElementContainer.LabelProperties">
      <summary>
            Collection of properties associated with the labels of the Axis. <see cref="T:Visiblox.Charts.AxisBase`1" /> can update these values as it deems necessary.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IAxisElementContainer.AxisProperties">
      <summary>
            Collection of properties associated with Axis. <see cref="T:Visiblox.Charts.AxisBase`1" /> can update these values as it deems necessary.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisZoomCanvasBase.DEFAULT_MAJOR_TICK_SIZE">
      <summary>
            Default size for Major Ticks.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisZoomCanvasBase.DEFAULT_MINOR_TICK_SIZE">
      <summary>
            Default size for Minor Ticks.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisZoomCanvasBase.ELEMENT_POOL_SIZE">
      <summary>
            The initial size of the <see cref="T:System.Windows.FrameworkElement" /> collections (for major ticks and labels, minor ticks is 3 times this size).
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisZoomCanvasBase.DEFAULT_CANVAS_PADDING">
      <summary>
            A default padding added to the edges of the canvas when calculating sizes.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisZoomCanvasBase.DEFAULT_HORIZONTAL_TICK_LABEL_SPACE">
      <summary>
            Default space between horizontal ticks and tick labels.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisZoomCanvasBase.DEFAULT_VERTICAL_TICK_LABEL_SPACE">
      <summary>
            Default space between vertical ticks and tick labels.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.#ctor(Visiblox.Charts.Primitives.StyleManager)">
      <summary>
            Constructor for a AxisZoomCanvasBase responsible for assigning the StyleManager object. 
            </summary>
      <param name="styleManager">
      </param>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.LabelStyleRefresh">
      <summary>
            Handle an update to the LabelStyle property of the AxisBase. [This was previously done in AxisBase.OnLabelStylePropertyChanged].
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.SpecializeLabel(Visiblox.Charts.AxisLabel)">
      <summary>
            Specialize the given <paramref name="label" /> by updating its measurements, applying any rotate transform and setting
            its position and centre coordinate.
            </summary>
      <param name="label">The label to be specialized.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.AddElementToContainer(System.Windows.FrameworkElement)">
      <summary>
            Add the given element to the children collection.
            </summary>
      <param name="element">The framework element (tick mark or axis label) to be added.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.MeasureSizeInternal">
      <summary>
            Re-measure the size of the canvas by measuring the size of the labels it contains, including any additional labels.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.ResetContainerInternal">
      <summary>
      </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.PositionTickMark(System.Windows.Shapes.Line,System.Double,Visiblox.Charts.AxisLocation,System.Windows.Controls.Orientation)">
      <summary>
            Position the given  <paramref name="tick" /> on the canvas based on its <paramref name="tickSize" />,
            along with the <paramref name="location" /> and <paramref name="orientation" /> of the Axis. 
            </summary>
      <param name="tick">The tick to be positioned.</param>
      <param name="tickSize">The size of the tick being positioned.</param>
      <param name="location">The location of the Axis.</param>
      <param name="orientation">The orientation of the Axis.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.ConfigureTickLabelElements(Visiblox.Charts.AxisLabel,System.String)">
      <summary>
            Configure the text and style of the given <paramref name="tickLabel" /> based on the provided
            <paramref name="labelText" /> and sets the alignment of the label and its text.
            </summary>
      <param name="tickLabel">The label to be configured.</param>
      <param name="labelText">The text to apply to the label.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.UpdateTickLabelGridAlignment">
      <summary>
            Update the alignment of the tick label within its grid container based on the HorizontalAlignmentProperty
            and the VerticalAlignmentProperty.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.GetTickLabelPosition(System.Double,System.Double)">
      <summary>
            Modifies the tick label position such that it will be aligned with or offset from its respective
            tick mark based on the TickLabelAlignment property.
            </summary>
      <param name="majorTickPosition">The current position of this tick.</param>
      <param name="nextMajorTickPosition">The position of the next tick.</param>
      <returns>A double representing the render position of a label.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.PreRenderAdditionalLabel(Visiblox.Charts.AdditionalLabel)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.RenderAdditionalLabel(Visiblox.Charts.AdditionalLabel)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.RemoveAdditionalLabel(Visiblox.Charts.AdditionalLabel)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.HideCollidingLabels(Visiblox.Charts.AdditionalLabel)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.UnhideCollidingLabels">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.MeasureSize(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.ResetContainer">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.ResetMaxSizes">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvasBase.UpdateElements(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AxisZoomCanvasBase.LabelHorizontalAlignment">
      <summary>
            Cached version of the labels HoriztonalAlignment property taken from the LabelStyle
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisZoomCanvasBase.LabelVerticalAlignment">
      <summary>
             Cached version of the labels VerticalAlignment property taken from the LabelStyle
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisZoomCanvasBase.LabelTextAlignment">
      <summary>
             Cached version of the labels TextBox TextAlignment property taken from the LabelStyle
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisZoomCanvasBase.ResolveLabelGridAlignment">
      <summary>
            Flag used to mark the Labels Alignment as dirty so that it gets refreshed.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisZoomCanvasBase.ResolveLabelTextAlignment">
      <summary>
            Flag used to mark the Labels TextBlock TextAlignment as dirty so that it gets refreshed.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisZoomCanvasBase.LabelStyleVerticalAlignmentSet">
      <summary>
            Flag used to mark the Labels VerticalAlignment as clean so that it doesn't get refreshed unnecessarily.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisZoomCanvasBase.LabelStyleHorizontalAlignmentSet">
      <summary>
            Flag used to mark the Labels HorizontalAlignment as clean so that it doesn't gets refreshed unnecessarily.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisZoomCanvasBase.LabelStyleTextAlignmentSet">
      <summary>
            Flag used to mark the Labels TextAlignment as clean so that it doesn't gets refreshed unnecessarily.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisZoomCanvasBase.TickProperties">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AxisZoomCanvasBase.LabelProperties">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AxisZoomCanvasBase.AxisProperties">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.IAxisElementContainer`1">
      <summary>
            An Axis will use an implementation of an IAxisElementContainer to render its ticks and labels along
            with any other UI Elements it wishes to show.
            </summary>
      <remarks>
            The responsibilities of an IAxisElementContainer include:
             - Rendering the elements of an Axis (such a ticks marks, labels and additional labels).
             - Refreshing those elements when necessary
                 - This may include altering the position in line with changes to the Axis (for Zoom, Pan, etc) and updating any text or values they display
             - Measuring both its elements and itself.
             
            For this, the container will/may need the following information from the Axis:
             - The tick values and their respective render positions,
             - Tick styles and size (for both Major and Minor ticks),
             - Label styles, angle and position (inside/outside),
             - Any label collision detection that should be performed,
             - Whether overflowing labels are allowed,
             - Orientation and Location of Axis.
             - ???
            </remarks>
      <typeparam name="TComparable">The IComparable type of the axis.</typeparam>
    </member>
    <member name="M:Visiblox.Charts.IAxisElementContainer`1.ConfigureRendering(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{System.Double})">
      <summary>
            Provides a way of configuring the container with the Tick values and their corresponding render positions.
            Will be called during an Axis Invalidation.
            </summary>
      <remarks>
            The list of <paramref name="tickValues" /> and <paramref name="renderPositions" /> must contain the same number
            of elements and the values and render positions should be index aligned.</remarks>
      <param name="tickValues">The tick values that may subsequent objects may get rendered for.</param>
      <param name="renderPositions">The render positions of the tick values.</param>
    </member>
    <member name="M:Visiblox.Charts.IAxisElementContainer`1.RenderTicks(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
      <summary>
            Render the minor and major ticks of the axis.
            </summary>
      <param name="minorTickValues">The list of minor ticks values to render ticks on; if null, no minor ticks should be rendered.</param>
      <param name="majorTickValues">The list of major ticks values to render ticks on; if null, no major ticks should be rendered.</param>
    </member>
    <member name="M:Visiblox.Charts.IAxisElementContainer`1.RenderLabels(System.Collections.Generic.IList{`0})">
      <summary>
            Render the tick label of the axis.
            </summary>
      <param name="tickValues">The list of tick values for which labels should be rendered.</param>
    </member>
    <member name="F:Visiblox.Charts.AxisZoomCanvas`1.RenderPositions">
      <summary>
            Holds a cache of the tick values and their respective render positions. This gets cleared and refilled when the 
            Axis carries out a full invalidation.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisZoomCanvas`1.RenderedMajorTicks">
      <summary>
            Holds FrameworkElements for the major tick marks that have been configured keyed by their respective
            tick value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisZoomCanvas`1.RenderedMinorTicks">
      <summary>
            Holds FrameworkElements for the minor tick marks that have been configured keyed by their respective
            tick value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisZoomCanvas`1.RenderedLabels">
      <summary>
            Holds FrameworkElements for the tick labels that have been configured keyed by their respective
            tick value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisZoomCanvas`1.RenderManager">
      <summary>
            An implementation of the IRenderManager interface that can be used in determining where to position labels and ticks.
            Also responsible for any collision detection that is required.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvas`1.#ctor(Visiblox.Charts.Primitives.StyleManager,System.Func{`0,System.String},System.Func{`0,System.String})">
      <summary>
            Constructor for the AxisZoomCanvas.
            </summary>
      <param name="styleManager">The <see cref="T:Visiblox.Charts.Primitives.StyleManager" /> object responsible for resolving style properties of the Axis Labels. </param>
      <param name="labelValueConverter">The method used to format the Axis Labels.</param>
      <param name="additionalLabelValueConverter">The method used to format any AdditionalLabels on the Axis.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvas`1.HandleEmptyLabelPool">
      <summary>
            Handle the case where the Tick Label pool has become empty
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvas`1.HandleEmptyMajorTickPool">
      <summary>
            Handle the case where the Major Tick pool has become empty
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvas`1.HandleEmptyMinorTickPool">
      <summary>
            Handle the case where the Minor Tick pool has become empty
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvas`1.MeasureSizeInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvas`1.RefreshRenderManager">
      <summary>
            Create a new render manager object and set any of its properties that are required
            for correctly rendering ticks and labels. Override this if not using the
            DefaultRenderManager implementation of IRenderManager.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvas`1.UpdateElementsInternal(System.Boolean)">
      <summary>
            Loop through all the rendered elements on the ZoomCanvas and determine their visibility based on their individual render
            positions. Also update any label text that may require updating.
            </summary>
      <param name="forceCollapsed">Determines if the elements should be forced to Collapsed regardless of render position.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvas`1.ConfigureRenderingInternal(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{System.Double})">
      <summary>
            Cache the provided <paramref name="tickValues" /> along side their corresponding
            <paramref name="renderPositions" />.
            </summary>
      <param name="tickValues">The tick values needed for rendering elements against.</param>
      <param name="renderPositions">The render positions of the tick values.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvas`1.ResetContainerInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvas`1.CreateAxisTicksInternal(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
      <summary>
            Create any ticks that should be rendered on the axis.
            </summary>
      <param name="minorTickValues">A list of minor tick values. Null if no minor ticks are to be rendered.</param>
      <param name="majorTickValues">A list of major tick values. Null if no minor ticks are to be rendered.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvas`1.CreateAxisTickLabelsInternal(System.Collections.Generic.IList{`0})">
      <summary>
            Create labels for the axis values provided in <paramref name="tickValues" />.
            </summary>
      <param name="tickValues">The tick values for which labels should be rendered.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvas`1.RenderTicks(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvas`1.RenderLabels(System.Collections.Generic.IList{`0})">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvas`1.ConfigureRendering(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{System.Double})">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AxisZoomCanvas`1.UpdateElements(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.LabelProperties">
      <summary>
            A container for properties associated with Axis labels that can be provided to an implementation
            of IAxisElementContainer for use when rendering axis elements.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LabelProperties.ShowLabels">
      <summary>
            Whether labels should be rendered or not.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LabelProperties.LabelStyle">
      <summary>
            The Style to applied to the labels.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LabelProperties.LabelAngle">
      <summary>
            The angle labels should be rendered at (all labels use horizontal as zero, regardless of Axis orientation).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LabelProperties.OverflowAllowed">
      <summary>
            This flag is used to indicate if a label that's bounds would overflow the bounds of the chart should be 
            rendered. 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LabelProperties.CollisionDetectionMode">
      <summary>
            The mode of collision detection that is to be applied when testing if labels overlap.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LabelProperties.Position">
      <summary>
            The position of the labels with respect to the Axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LabelProperties.LabelAlignment">
      <summary>
            The alignment of labels with respect to their tick marks.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.TickProperties">
      <summary>
            A container for properties associated with Axis tick marks that can be provided to an implementation of
            IAxisElementContainer for use when rendering axis elements.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TickProperties.ShowMinorTicks">
      <summary>
            Whether minor ticks should be rendered or not.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TickProperties.ShowMajorTicks">
      <summary>
            Whether major ticks should be rendered or not.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TickProperties.MinorTickStyle">
      <summary>
            The Style to be applied to Minor Ticks.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TickProperties.MajorTickStyle">
      <summary>
            The Style to be applied to Major Ticks.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TickProperties.MinorTickSize">
      <summary>
            The size of Minor Ticks (default = 3).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TickProperties.MajorTickSize">
      <summary>
            The size of Major Ticks (default = 5).
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AxisEnum">
      <summary>
            Represents an axis of a series.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisEnum.XAxis">
      <summary>
            Represents the X-Axis.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisEnum.YAxis">
      <summary>
            Represents the Y-Axis.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AxisEventRelay">
      <summary>
            Relays a collection of events from <see cref="T:Visiblox.Charts.IAxis" />.
            </summary>
      <remarks>
        <para>
            Relayed events are the following: <see cref="E:Visiblox.Charts.IAxis.ValueConversionChanged" /> and 
                property changed notifications on <see cref="P:Visiblox.Charts.IAxis.ActualRange" />.
            </para>
        <para>
            The type of the event that is being relayed can be determined from the 
                enumeration value of <see cref="E:Visiblox.Charts.AxisEventRelay.AxisEvent" /> which is a <see cref="T:Visiblox.Charts.AxisEventTypes" /> 
                type enumeration.
            </para>
        <para>
            The sender of the relayed event will be the axis which originally fired the event.
            </para>
      </remarks>
    </member>
    <member name="M:Visiblox.Charts.AxisEventRelay.#ctor(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <summary>
            Constructor.
            </summary>
      <param name="axis">The axis that's events are relayed.</param>
      <param name="axisEvent">Types of axis events to be relayed.</param>
    </member>
    <member name="M:Visiblox.Charts.AxisEventRelay.UnSubscribe">
      <summary>
            Un-subscribes all events from the axis it wraps.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AxisEventRelay.Axis">
      <summary>
            Gets the axis whose event this object is forwarding.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.AxisEventRelay.AxisEvent">
      <summary>
            Fires whenever an event specified by the passed <see cref="T:Visiblox.Charts.AxisEventTypes" /> occurs.
            The sender will be the axis which originally fired the event.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AxisEventRelay.AxisEventHandler">
      <summary>
            Delegate for relay events.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event argument.</param>
    </member>
    <member name="T:Visiblox.Charts.AxisEventRelayEventArgs">
      <summary>
            Contains event data for <see cref="E:Visiblox.Charts.ChartAxesEventRelay.AxisEvent" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisEventRelayEventArgs.#ctor(Visiblox.Charts.AxisEventTypes)">
      <summary>
            Constructor.
            </summary>
      <param name="axisEvent">The axis event type being relayed.</param>
    </member>
    <member name="P:Visiblox.Charts.AxisEventRelayEventArgs.AxisEvent">
      <summary>
            The type of event that has been fired.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AxisEventTypes">
      <summary>
            Specifies types of events <see cref="T:Visiblox.Charts.ChartAxesEventRelay" /> can subscribe to and
            relay.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisEventTypes.None">
      <summary>
      </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisEventTypes.ValueConversion">
      <summary>
            Relays the <see cref="E:Visiblox.Charts.IAxis.ValueConversionChanged" /> event.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisEventTypes.ActualRangeLimitsChanged">
      <summary>
            Relays <see cref="P:Visiblox.Charts.IRange.Minimum" /> or <see cref="P:Visiblox.Charts.IRange.Maximum" /> 
            changing on <see cref="P:Visiblox.Charts.IAxis.ActualRange" />.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisEventTypes.ActualRangeEffectiveLimitsChanged">
      <summary>
            Relays <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMinimum" /> or <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMaximum" /> 
            changing on <see cref="P:Visiblox.Charts.IAxis.ActualRange" />.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisEventTypes.AutoScaleToVisibleDataChanged">
      <summary>
            Relays that <see cref="P:Visiblox.Charts.IAxis.AutoScaleToVisibleData" /> has changed on an 
            <see cref="T:Visiblox.Charts.IAxis" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AxisHelper">
      <summary>
            Helper class for AxisBase.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisHelper.FilterTickValues``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Remove any values found in the list of <paramref name="ticksToRemove" /> from the list of <paramref name="tickList" />.
            </summary>
      <typeparam name="TComparable">The data type the axis is using.</typeparam>
      <param name="tickList">The main list of tick values.</param>
      <param name="ticksToRemove">The list of tick values to remove from the main list.</param>
      <returns>A filtered list of tick values.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisHelper.MergeTickValues``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
      <summary>
            Merge two lists of tick values together. Note that duplicates will be retained.
            </summary>
      <typeparam name="TComparable">The data type the axis is using.</typeparam>
      <param name="tickList1">The first list of ticks.</param>
      <param name="tickList2">The second list of ticks.</param>
      <returns>A merged list of tick values.</returns>
    </member>
    <member name="M:Visiblox.Charts.AxisHelper.ConvertToTComparable``1(System.IComparable)">
      <summary>
            Converts <paramref name="value" /> to TComparable.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>The casted or converted TComparable value of the passed parameter. 
                Throws InvalidCastException if the conversion is not possible.</returns>
    </member>
    <member name="T:Visiblox.Charts.AxisLabelPosition">
      <summary>
            Defines possible positions of labels on the axis.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabelPosition.Outside">
      <summary>
            Labels are on the opposite side of the axis as the plot area. This is the most common usage.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabelPosition.Inside">
      <summary>
            Labels are rendered on the same side of the axis as the plot area.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AxisLabelTickAlignment">
      <summary>
            Provides options to specify how axis tick labels are spaced with respect to their associated ticks.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabelTickAlignment.OnTicks">
      <summary>
            Axis labels are situated at their associated tick.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabelTickAlignment.BetweenTicks">
      <summary>
            Axis labels are situated between their tick and the next greater tick (e.g. because they indicate a range rather than a discrete value).
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AxisLocation">
      <summary>
            Enumeration describing possible the locations of an axis.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLocation.Primary">
      <summary>
            Primary axis position
            </summary>
      <remarks>For a vertical axis this is on the left of the chart by default.</remarks>
    </member>
    <member name="F:Visiblox.Charts.AxisLocation.Secondary">
      <summary>
            Secondary axis position
            </summary>
      <remarks>For a vertical axis this is on the right of the chart by default.</remarks>
    </member>
    <member name="T:Visiblox.Charts.AxisTickIntervalHelper">
      <summary>
            Axis helper class responsible for calculating the tick intervals
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AxisTickIntervalHelper.ComputeNumberOfTicks(System.Double)">
      <summary>
            Computes the number of ticks that can fit in the given <paramref name="dimension" />.
            </summary>
      <param name="dimension">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.AxisTickIntervalHelper.GetTickValues(Visiblox.Charts.IRangeProvider,System.Double,System.Boolean,System.Int32,System.Double,System.Double)">
      <summary>
            Returns a list with the tick values that should be displayed
            </summary>
      <param name="rangeProvider">
      </param>
      <param name="interval">
      </param>
      <param name="growRangeIfRequired">
      </param>
      <param name="maximumAllowedTicks">
      </param>
      <param name="axisValueMaximum">
      </param>
      <param name="axisValueMinimum">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.AxisTickIntervalHelper.ComputeActualInterval(Visiblox.Charts.IRangeProvider,System.Int32,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
            Computes the interval between major or minor ticks
            </summary>
      <param name="rangeProvider">
      </param>
      <param name="numberOfTicks">
      </param>
      <param name="majorTickInterval">
      </param>
      <param name="minorTickInterval">
      </param>
      <param name="range">
      </param>
      <param name="actualMajorTickInterval">
      </param>
      <param name="actualMinorTickInterval">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Visiblox.Charts.BusinessHoursMode">
      <summary>
            Defines a business hours calculation mode.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BusinessHoursMode.Daily">
      <summary>
            Included/excluded hours are defined by a daily start and end time, and weekend days are defined separately. Weekly start and end days/times are ignored.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BusinessHoursMode.Weekly">
      <summary>
            A single included period is defined per week by a weekly start day/time and end day/time. Daily start/end hours and weekend days are ignored.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.CategoryAxis">
      <summary>
            Represents an axis where the values are discrete categories.
            </summary>
      <remarks>
        <para>
            CategoryAxis will show a major tick for each distinct category plotted against it, and no minor ticks.
            This is often used in bar and column charts, and more generally wherever the axis labels are
            discrete values which should not be subdivided in any way.
            </para>
        <para>
            The <see cref="T:Visiblox.Charts.CategoryRange" /> determines the set of categories, and their ordering,
            if this is not specified the categories will be taken from the data values in their series order.
            </para>
        <para>
            By default margins are displayed on the axis, these can be turned off by setting
            <see cref="P:Visiblox.Charts.IAxis.IsAutoMarginEnabled" /> to false.
            It is recommended to do so e.g. when using <see cref="T:Visiblox.Charts.StackedLineSeries" /> on the chart.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.CategoryRange" />
      <seealso cref="T:Visiblox.Charts.DateTimeAxis" />
      <seealso cref="T:Visiblox.Charts.LinearAxis" />
    </member>
    <member name="T:Visiblox.Charts.IAxisWithAxisValues">
      <summary>
            Interface for getting raw axis values from an Axis
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IAxisWithAxisValues.GetDataValueAsAxisDouble(System.IComparable)">
      <summary>
            Get the raw axis value on an arbitrary double scale
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IAxisWithAxisValues.GetDataValueAsAxisFloat(System.IComparable)">
      <summary>
            Get the raw axis value as a float
            </summary>
      <remarks>
            Required by positioning systems that don't support 64-bit double values,
            such as DirectX which is limited to 32-bit float. May result in loss
            of accuracy
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.CreateRange">
      <summary>
            Creates a <see cref="T:Visiblox.Charts.CategoryRange" />.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.AdoptZoomAsRange">
      <summary>
            This functionality is not supported on the CategoryAxis and will not result in any action.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.GetMajorTickValues">
      <summary>
             Returns the major tick values (all categories within the effective range).
            </summary>
      <returns>A collection of all categories within the effective range.</returns>
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.GetMinorTickValues">
      <summary>
             Returns the minor tick values (none).
            </summary>
      <returns>An empty list</returns>
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.GetMajorGridlineTickValues">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.GetAxisValueAsDataValue(System.Double)">
      <summary>
            Transforms a display value on the axis to a value within the continuous value range.
            Since the continuous value range is a double range, no logic is applied in this method.
            </summary>
      <param name="axisValue">Axis value.</param>
      <returns>
        <paramref name="axisValue" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.GetDataValueAsAxisValue(System.IComparable)">
      <summary>
            Transforms a value within the continuous value range to the display value on the axis.
            Since the continuous value range is a double range, this only means casting to double.
            </summary>
      <param name="dataValue">Value within the continuous value range.</param>
      <returns>
        <paramref name="dataValue" /> cast to double.</returns>
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.GetActualMaximumDisplayValue">
      <summary>
            Adds an extra padding to the first displayed category.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.GetActualMinimumDisplayValue">
      <summary>
            Adds an extra padding to the last displayed category.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.GetFormattedDataValueInternal(System.IComparable,System.String)">
      <summary>
            Returns the appropriate category's string representation.
            </summary>
      <param name="dataValue">Data value</param>
      <param name="formatString">The format string</param>
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.OnActualRangePropertyChanged">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.CreateRangeWithEffectiveLimits(Visiblox.Charts.IRange{System.IComparable})">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.IsDataValueRenderable(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.GetDataValueAsAxisDouble(System.IComparable)">
      <summary>
            Get the raw axis value on an arbitrary double scale
            </summary>
      <remarks>
            Since the continuous value range is a double range, this only means casting to double.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.CategoryAxis.GetDataValueAsAxisFloat(System.IComparable)">
      <summary>
            Get the raw axis value as a float
            </summary>
      <remarks>
            Required by positioning systems that don't support 64-bit double values,
            such as DirectX which is limited to 32-bit float. May result in loss
            of accuracy
            </remarks>
    </member>
    <member name="F:Visiblox.Charts.CategoryAxis.SortOrderProperty">
      <summary>
            Identifies the SortOrder Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CategoryAxis.Categories">
      <summary>
            Gets or sets the categories of the axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CategoryAxis.ActualRenderedRangeValid">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.CategoryAxis.SortOrder">
      <summary>
            Gets or sets the sort order of the category labels.  Note that series will be rendered in the order that points appear in their DataSeries, which may cause unexpected results if that differs from the order specified by this property. . This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ChartAxesEventRelay">
      <summary>
            Relays events from the X, Y and secondary Y axes of the chart on to an object which has no notion of these components.
            </summary>
      <remarks>
        <para>
            Relayed events are the following: <see cref="E:Visiblox.Charts.IAxis.ValueConversionChanged" /> and 
                property changed notifications on <see cref="P:Visiblox.Charts.IAxis.ActualRange" />.
            </para>
        <para>
            The type of the event that is being relayed can be determined from the 
                enumeration value of <see cref="E:Visiblox.Charts.ChartAxesEventRelay.AxisEvent" /> which is a <see cref="T:Visiblox.Charts.AxisEventTypes" /> 
                type enumeration.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.AxisEventRelay" />
    </member>
    <member name="M:Visiblox.Charts.ChartAxesEventRelay.#ctor(Visiblox.Charts.Chart,Visiblox.Charts.AxisEventTypes)">
      <summary>
            Constructor
            </summary>
      <param name="chart">The chart object</param>
      <param name="axisEvent">Types of axis events to be relayed</param>
    </member>
    <member name="M:Visiblox.Charts.ChartAxesEventRelay.UnSubscribe">
      <summary>
            Un-subscribes all event subscriptions from the passed <see cref="T:Visiblox.Charts.Chart" /> instance.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.ChartAxesEventRelay.AxisEvent">
      <summary>
            Fires whenever an event specified by the passed <see cref="T:Visiblox.Charts.AxisEventTypes" />
                happens.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ChartAxesEventRelay.AxisEventHandler">
      <summary>
            Delegate for relay events.
            </summary>
      <param name="sender">The event source.</param>
      <param name="e">The event arguments.</param>
    </member>
    <member name="T:Visiblox.Charts.DateTimeAxis">
      <summary>
            Represents an axis where the values are of <see cref="T:System.DateTime" /> type.
            </summary>
      <remarks>
        <para>This is the default axis type which the chart will automatically create if the data consists
            of <see cref="T:System.DateTime" /> values, but will often be explicitly created by the chart user
            in order to set the various axis properties.</para>
        <para>By default this axis formats labels according to the <see cref="P:Visiblox.Charts.DateTimeAxis.MajorTickIntervalType" />,
            which if not specified is calculated from the axis range.
            This means that when the chart is showing years of data, the labels will show the year,
            but if the visible data is in a range of around a day, hours will be shown on the labels.
            In addition, when the data range is small labels are periodically replaced by labels at a higher scale,
            so that for example when only hours are visible the midnight label may also display the date at that point.
            This behaviour can be customised by replacing the <see cref="P:Visiblox.Charts.DateTimeAxis.DateFormatter" />, or a single format for
            all scales can be set using the <see cref="P:Visiblox.Charts.AxisCommonBase`1.LabelFormatString" />
            (which takes precedence over the <see cref="P:Visiblox.Charts.DateTimeAxis.DateFormatter" /> if set).</para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.AxisBase`1" />
      <seealso cref="T:Visiblox.Charts.LinearAxis" />
      <seealso cref="T:Visiblox.Charts.CategoryAxis" />
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.MajorTickIntervalPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.#ctor">
      <summary>
             Default constructor to create a DateTimeAxis.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.CreateRange">
      <summary>
            Creates a <see cref="T:Visiblox.Charts.DateTimeRange" />.
            </summary>
      <returns>The newly constructed range.</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.GrowActualRange">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.GetMajorTickValues">
      <summary>
             Generates and returns the <see cref="T:System.DateTime" /> values at which a major tick occurs for the axis.
            </summary>
      <returns>The generated <see cref="T:System.DateTime" /> values.</returns>
      <seealso cref="M:Visiblox.Charts.DateTimeAxis.GetMinorTickValues" />
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.GetMinorTickValues">
      <summary>
             Generates and returns the <see cref="T:System.DateTime" /> values at which minor ticks occur for the axis.
            </summary>
      <returns>The generated <see cref="T:System.DateTime" /> values.</returns>
      <seealso cref="M:Visiblox.Charts.DateTimeAxis.GetMajorTickValues" />
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.GetDataValueAsAxisValue(System.DateTime)">
      <summary>
            Converts the passed DateTime <paramref name="dataValue" /> to a double value.
            </summary>
      <param name="dataValue">The data value to be converted.</param>
      <returns>The axis value as a double.</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.GetAxisValueAsDataValue(System.Double)">
      <summary>
            Transforms a display value on the axis to a value within the continuous value range.
            Since the continuous value range is a DateTime range, this means transforming the passed double to a DateTime.
            </summary>
      <param name="axisValue">The axis value to convert to a data value.</param>
      <returns>The <see cref="T:System.DateTime" /> corresponding to the specified axis value.</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.ComputeActualIntervalInternal">
      <summary>
             Overrides <see cref="M:Visiblox.Charts.AxisCommonBase`1.ComputeActualIntervalInternal" /> in order to calculate
             the tick interval to be shown when the interval changes.
             This is called every invalidate <strong>before</strong> ticks are generated.
            </summary>
      <returns>true if <see cref="P:Visiblox.Charts.AxisCommonBase`1.ActualMajorTickInterval" />, <see cref="P:Visiblox.Charts.AxisCommonBase`1.ActualMinorTickInterval" /> has changed</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.ComputeActualIntervalType">
      <summary>
            Calculates <see cref="P:Visiblox.Charts.DateTimeAxis.ActualMajorTickIntervalType" /> based on the current, visible range.
            </summary>
      <returns>true if <see cref="P:Visiblox.Charts.DateTimeAxis.ActualMajorTickIntervalType" />, <see cref="P:Visiblox.Charts.DateTimeAxis.ActualMinorTickIntervalType" /> has changed</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.GetFormattedDataValueInternal(System.DateTime,System.String)">
      <summary>
             Implements the formatting of axis labels for <see cref="T:System.DateTime" />s, by using <see cref="P:Visiblox.Charts.AxisCommonBase`1.LabelFormatString" /> if present,
             or otherwise the <see cref="P:Visiblox.Charts.DateTimeAxis.DateFormatter" />, which may implement a "smart" formatting algorithm based upon the visible data range.
            </summary>
      <param name="dataValue">The date time to format.</param>
      <param name="formatString">The format string to use.</param>
      <returns>The formatted string to be applied.</returns>
      <seealso cref="M:Visiblox.Charts.DateTimeAxisInterval.FormatValue(System.DateTime)" />
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.GetAdditionalLabelFormattedDataValueInternal(System.DateTime,System.String)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.GetNonAxisLabelFormattedDataValueInternal(System.DateTime,System.String)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.CreateRangeWithEffectiveLimits(Visiblox.Charts.IRange{System.DateTime})">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.GetDateTimeKindFromRange(Visiblox.Charts.IRangeWithEffectiveLimits{System.DateTime})">
      <summary>
            Finds out what the DateTimeKind is on the ActualRange supplied and applies that to the specified date time.
            </summary>
      <param name="actualRange">The actual range (passed in for performance reasons).</param>
      <returns>The DateTimeKind to use.</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.GetDataValueAsAxisDouble(System.IComparable)">
      <summary>
            Get the raw axis value on an arbitrary double scale
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxis.GetDataValueAsAxisFloat(System.IComparable)">
      <summary>
            Get the raw axis value as a float
            </summary>
      <remarks>
            Required by positioning systems that don't support 64-bit double values,
            such as DirectX which is limited to 32-bit float. May result in loss
            of accuracy
            </remarks>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxis.MajorTickIntervalTypeProperty">
      <summary>
            Identifies the MajorTickIntervalType Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxis.MinorTickIntervalTypeProperty">
      <summary>
            Identifies the MinorTickIntervalType Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DateTimeAxis.SupportsStreaming">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DateTimeAxis.ActualMajorTickIntervalType">
      <summary>
            Gets the actual interval type at which ticks are drawn on the axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DateTimeAxis.ActualMinorTickIntervalType">
      <summary>
            Gets the actual interval type at which minor ticks are drawn on the axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DateTimeAxis.DateFormatter">
      <summary>
            Determines the strategy used to format date/time labels, when a format string is not explicitly set.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DateTimeAxis.MajorTickIntervalType">
      <summary>
            Gets or sets the axis interval, used to mark the major ticks. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DateTimeAxis.MinorTickIntervalType">
      <summary>
            Gets or sets the axis minor interval, used to mark the minor ticks. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DateTimeAxisInterval">
      <summary>
             Represents DateTime intervals and provides utility functions related to these.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxisInterval.GetPreviousInterval(Visiblox.Charts.DateTimeAxisIntervalSpan)">
      <summary>
             Gets the next smallest interval, so if the passed interval is Minutes, this will return Seconds
            </summary>
      <param name="interval">The interval with which to find the previous interval</param>
      <returns>The previous interval to the one passed</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxisInterval.GetNextInterval(Visiblox.Charts.DateTimeAxisIntervalSpan)">
      <summary>
            Obtains the next interval in order of increasing length of time.
            </summary>
      <param name="interval">The interval to use to find the next interval</param>
      <returns>The next interval after (larger than) the parameter interval</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxisInterval.AlignToInterval(System.DateTime,System.DateTimeKind)">
      <summary>
        <para>
             Rounds a given date time down to the next interval
             </para>
        <para>
              E.g. If the interval is 15 minutes and 20/10/2009 14:10 is given then this will return 20/10/2009 14:00
             </para>
      </summary>
      <param name="time">The DateTime to align</param>
      <param name="kind">The DateTimeKind to use to create the new aligned date time</param>
      <returns>An aligned DateTime</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxisInterval.FormatValue(System.DateTime)">
      <summary>
             Formats a given DateTime according to the current interval - If the interval is yearly then there is no need to
             display the number of seconds for instance.
            </summary>
      <param name="time">The date time to format</param>
      <returns>The formatted date time as a string</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxisInterval.Increment(System.DateTime,System.Int32)">
      <summary>
             Increment gets the next DateTime by adding the interval on to the passed date time
            </summary>
      <param name="time">The DateTime to increment</param>
      <param name="interval">The number to increment the DateTime by</param>
      <returns>The date time that has had the interval added on</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxisInterval.Decrement(System.DateTime)">
      <summary>
             Decrement gets the next DateTime by decrementing the interval on the date time argument
            </summary>
      <param name="time">The DateTime to decrement</param>
      <returns>The date time that has had the interval added on</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxisInterval.Decrement(System.DateTime,System.Int32)">
      <summary>
             Decrement gets the next DateTime by decrementing the interval on the date time argument
            </summary>
      <param name="time">The DateTime to decrement</param>
      <param name="interval">The number to decrement the DateTime by</param>
      <returns>The date time that has had the interval added on</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxisInterval.Clone">
      <summary>
            Deep copies the object
            </summary>
      <returns>The cloned object</returns>
    </member>
    <member name="P:Visiblox.Charts.DateTimeAxisInterval.FormatString">
      <summary>
            Gets or sets the FormatString
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DateTimeAxisInterval.Span">
      <summary>
        <para>
            	Gets the interval span enumeration value this represents.
             </para>
      </summary>
    </member>
    <member name="P:Visiblox.Charts.DateTimeAxisInterval.Seconds">
      <summary>
             Gets the total number of seconds that this interval span represents. 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DateTimeAxisInterval.LabelsPosition">
      <summary>
             Gets whether the labels for this type of interval should be centred or not.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DateTimeAxisIntervalFactory">
      <summary>
            Factory class creating <see cref="T:Visiblox.Charts.DateTimeAxisInterval" /> objects
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxisIntervalFactory.Create(Visiblox.Charts.DateTimeAxisIntervalSpan)">
      <summary>
             Converts the interval enumeration value to its corresponding class
            </summary>
      <param name="interval">The interval the returning class should represent</param>
      <returns>The correct interval</returns>
    </member>
    <member name="T:Visiblox.Charts.DateTimeAxisIntervalSpan">
      <summary>
             An enumeration describing a date time interval. 
             Each of the values corresponds to the number of seconds in each span.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.Undefined">
      <summary>
            Represents an undefined time span period.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.Seconds">
      <summary>
             Represents a time span period of a second
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.FiveSeconds">
      <summary>
             Represents a time span period of 5 seconds
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.TenSeconds">
      <summary>
             Represents a time span period of 10 seconds
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.Minutes">
      <summary>
             Represents a time span period of a minute
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.FiveMinutes">
      <summary>
             Represents a time span period of 5 minutes
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.FifteenMinutes">
      <summary>
             Represents a time span period of 15 minutes
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.Hours">
      <summary>
             Represents a time span period of an hour
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.FourHours">
      <summary>
             Represents a time span period of 4 hours
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.EightHours">
      <summary>
             Represents a time span period of 8 hours
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.Days">
      <summary>
             Represents a time span period of a day
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.Weeks">
      <summary>
             Represents a time span period of a week
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.TwoWeeks">
      <summary>
             Represents a time span period of two weeks
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.Months">
      <summary>
             Represents a time span period of a month
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.Quarters">
      <summary>
             Represents a time span period of a quarter
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.Years">
      <summary>
             Represents a time span period of a year
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.FiveYears">
      <summary>
             Represents a time span period of five years
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.TenYears">
      <summary>
             Represents a time span period of a ten years
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.FiftyYears">
      <summary>
             Represents a time span period of a 50 years
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.HundredYears">
      <summary>
             Represents a time span period of a 100 years
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.FiveHundredYears">
      <summary>
             Represents a time span period of a 500 years
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.ThousandYears">
      <summary>
             Represents a time span period of a 1000 years
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DateTimeAxisIntervalSpan.FiveThousandYears">
      <summary>
             Represents a time span period of a 5000 years
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DateTimeAxisSimpleFormatter">
      <summary>
            A simple strategy for <see cref="P:Visiblox.Charts.DateTimeAxis.DateFormatter" /> which formats dates according to the current axis interval. Date format will still vary according to the interval of the axis
            e.g. on zooming into the chart.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxisSimpleFormatter.Format(System.DateTime,Visiblox.Charts.DateTimeAxisIntervalSpan,System.Boolean)">
      <summary>
            Returns the formatted string representation of the given date, given that the interval span is as in <paramref name="intervalSpan" />,
            according to the simple strategy of formatting appropriately according to the specified interval span.
            </summary>
      <param name="value">Value to be formatted</param>
      <param name="intervalSpan">A special time interval span that can be used to assist in the formatting of the given DateTime.</param>
      <param name="ignorePreviousValues">Not used by this formatter.</param>
      <returns>Formatted value</returns>
    </member>
    <member name="T:Visiblox.Charts.DateTimeAxisSmartFormatter">
      <summary>
            A "smart" strategy which periodically replaces values with ones formatted at a larger scale,
            e.g. replacing midnight with the date when numbering in hours. 
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxisSmartFormatter.#ctor(Visiblox.Charts.DateTimeAxis)">
      <summary>
            Constructor. An <paramref name="axis" /> must be specified for this formatter which must be the axis the formatter is being used on.
            </summary>
      <param name="axis">The axis this formatter is placed on</param>
    </member>
    <member name="M:Visiblox.Charts.DateTimeAxisSmartFormatter.Format(System.DateTime,Visiblox.Charts.DateTimeAxisIntervalSpan,System.Boolean)">
      <summary>
            Returns the formatted string representation of the given date, given that the interval span is as in <paramref name="intervalSpan" />,
            according to the "smart" strategy of periodically replacing values iwth ones formatted at a larger scale.
            </summary>
      <param name="value">Value to be formatted</param>
      <param name="intervalSpan">A special time interval span that can be used to assist in the formatting of the given DateTime.</param>
      <param name="ignorePreviousValues">determines whether previous values should be taken into account when selecting a format for this date</param>
      <returns>Formatted value</returns>
    </member>
    <member name="T:Visiblox.Charts.GridContainer`1">
      <summary>
            Responsible for the rendering of grid lines and grid stripes.  
            </summary>
      <typeparam name="TComparable">
      </typeparam>
    </member>
    <member name="M:Visiblox.Charts.GridContainer`1.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Constructs a new GridContainer with the specified visibility on grid lines and stripes.  
            </summary>
      <param name="showMajorGridlines">
      </param>
      <param name="showMinorGridlines">
      </param>
      <param name="showGridStripes">
      </param>
    </member>
    <member name="M:Visiblox.Charts.GridContainer`1.RefreshGrid">
      <summary>
            Run through a re-render sequence of creating grid lines and stripes (if shown).
            </summary>
    </member>
    <member name="M:Visiblox.Charts.GridContainer`1.ClearGrid">
      <summary>
            Clears the lines and stripes.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.GridContainer`1.MajorGridlineStyle">
      <summary>
            Gets or sets the style that is applied to the Major Grid lines drawn on the chart. The Style should have a TargetType of Line.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.GridContainer`1.MinorGridlineStyle">
      <summary>
            Gets or sets the style that is applied to the Minor Grid lines drawn on the chart. The Style should have a TargetType of Line.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.GridContainer`1.GridStripeStyle">
      <summary>
            Gets or sets the style applied to grid stripes, if shown. The Style should have a TargetType of Rectangle.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.GridContainer`1.AxisOrientation">
      <summary>
            Gets or sets the orientation of this axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.GridContainer`1.ReverseAxis">
      <summary>
            Gets or sets whether the axis is reversed.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.GridContainer`1.Axis">
      <summary>
            The axis that this GridContainer is creating grid lines/stripes for.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.GridContainer`1.ShowMajorGridlines">
      <summary>
            Gets or sets whether the major grid lines are shown on the graph for this Axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.GridContainer`1.ShowMinorGridlines">
      <summary>
            Gets or sets whether the minor grid lines are shown on the graph for this Axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.GridContainer`1.ShowGridStripes">
      <summary>
            Gets or sets whether grid stripes are shown on the chart. Grid stripes are alternating bands of colour (as if filling in between every second pair of grid lines).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.GridContainer`1.MajorLineValues">
      <summary>
            A list of data values at which grid lines or stripes should be rendered.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.GridContainer`1.MinorLineValues">
      <summary>
            A list of data values at which grid lines or stripes should be rendered.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ILogicalAxis">
      <summary>
            Represents a single logical axis which has no visual display.
            <para>
            The axis has multiple range properties:
            <list type="bullet"><item><see cref="P:Visiblox.Charts.IRangeProvider.Range" /> -  The client supplied range. This may be null.</item><item><see cref="P:Visiblox.Charts.IAxis.ActualRange" /> - The actual axis range. If Range is specified in most cases the ActualRange will equal
            the Range exactly, otherwise ActualRange is computed automatically.</item></list></para></summary>
    </member>
    <member name="M:Visiblox.Charts.ILogicalAxis.GetDataValueAsLogicalValue(System.IComparable)">
      <summary>
            Converts the given <paramref name="dataValue" /> which is a value represented in the data space into the equivalent value represented in the logical space
            </summary>
      <param name="dataValue">The data value for which to return the logical one.</param>
      <returns>The logical value corresponding to the given <paramref name="dataValue" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.ILogicalAxis.GetLogicalValueAsDataValue(System.Object)">
      <summary>
            Converts the given <paramref name="logicalValue" /> which is a value represented in the logical space into the equivalent value represented in the data space
            </summary>
      <param name="logicalValue">The logical value for which to return the data value.</param>
      <returns>The data value which corresponds to the given <paramref name="logicalValue" />.</returns>
    </member>
    <member name="P:Visiblox.Charts.ILogicalAxis.Zoom">
      <summary>
            Gets or sets the zoom applied to this axis. This property is used by components of the
            <see cref="T:Visiblox.Charts.Chart" /> to determine their position and size when plotting themselves.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ILogicalAxis.ActualRange">
      <summary>
            Gets the actual derived range of this axis, without zoom applied. This object is volatile as it may be recomputed as a result of changes in data, range or zoom.
            </summary>
      <remarks>This range is either the user-specified <see cref="P:Visiblox.Charts.IRangeProvider.Range" /> if set, or otherwise calculated based on the data.</remarks>
      <remarks>
        <b>Do not change the properties on this object as it may be overwritten by the chart. 
            Instead use IAxis.Range to set a specific range.</b>
      </remarks>
      <seealso cref="P:Visiblox.Charts.IRangeProvider.Range" />
    </member>
    <member name="P:Visiblox.Charts.ILogicalAxis.ScalingDimension">
      <summary>
            Get or set the dimension used to determine the number of readable logical values 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ILogicalAxis.AutoScaleToVisibleData">
      <summary>
            Gets or sets whether the axis range should be computed to include only data currently visible on the chart on the basis of another axis' range.
            </summary>
      <remarks>
            If enabled, the axis will be rendered each time the visible data changes. This is particularly useful when setting the range of one axis manually
            resulting in data points no longer on the chart's visible area.
            </remarks>
      <remarks>
            Note that the use of this property is only required when wanting to restrict the auto-calculated range of one axis based on the data currently included by the range
            on another.  Take the example where the data series contains the first 10 integer points of the function y=x from 0 to 9, but the x-axis range was restricted
            manually to the range 0-3.  If <see cref="P:Visiblox.Charts.ILogicalAxis.AutoScaleToVisibleData" /> is set to false on the y-axis its range will be calculated as 0-9, taking into
            consideration all points in the data series.  If <see cref="P:Visiblox.Charts.ILogicalAxis.AutoScaleToVisibleData" /> is set to true on the y-axis its range will be calculated as 
            0-3, taking into consideration only those points shown based on the x-axis' range.
            </remarks>
      <remarks>
            This property is not required to make the axis automatically calculate a range based on the data contained in the data series, that will automatically
            happen by default unless an explicit <see cref="P:Visiblox.Charts.IRangeProvider.Range" /> is set by the user.
            </remarks>
    </member>
    <member name="T:Visiblox.Charts.ILogicalAxis`1">
      <summary>
            Typed version of <see cref="T:Visiblox.Charts.ILogicalAxis" /></summary>
      <typeparam name="T">The type of data stored in logical values</typeparam>
    </member>
    <member name="M:Visiblox.Charts.ILogicalAxis`1.GetDataValueAsLogicalValue(System.IComparable)">
      <summary>
            Converts the given <paramref name="dataValue" /> which is a value represented in the data space into the equivalent value represented in the logical space
            </summary>
      <param name="dataValue">The data value for which to return the logical one.</param>
      <returns>The logical value corresponding to the given <paramref name="dataValue" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.ILogicalAxis`1.GetLogicalValueAsDataValue(`0)">
      <summary>
            Converts the given <paramref name="logicalValue" /> which is a value represented in the logical space into the equivalent value represented in the data space
            </summary>
      <param name="logicalValue">The logical value for which to return the data value.</param>
      <returns>The data value which corresponds to the given <paramref name="logicalValue" />.</returns>
    </member>
    <member name="T:Visiblox.Charts.LinearAxis">
      <summary>
             Represents a linear axis which is used to display numeric values.
            </summary>
      <remarks>
        <para>This class represents an axis whose value type is numeric, represented by <see cref="T:System.Double" />s, with a linear scale.
            </para>
        <para>This is the default axis type which the chart will create automatically where the data is numeric, 
            but will often be explicitly created by the chart user in order to set the various axis properties.</para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.AxisBase`1" />
      <seealso cref="T:Visiblox.Charts.DateTimeAxis" />
      <seealso cref="T:Visiblox.Charts.CategoryAxis" />
    </member>
    <member name="T:Visiblox.Charts.NumericAxisBase">
      <summary>
            Represents a base class for axes with a numeric value type.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.NumericAxisBase.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.NumericAxisBase.CreateRange">
      <summary>
            Creates a <see cref="T:Visiblox.Charts.DoubleRange" />.
            </summary>
      <returns>The newly constructed range.</returns>
    </member>
    <member name="M:Visiblox.Charts.NumericAxisBase.GetDataValueAsAxisValue(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.NumericAxisBase.GetAxisValueAsDataValue(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.NumericAxisBase.IsDataValueRenderable(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.NumericAxisBase.CreateRangeWithEffectiveLimits(Visiblox.Charts.IRange{System.Double})">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.NumericAxisBase.GetDataValueAsAxisDouble(System.IComparable)">
      <summary>
            Get the raw axis value on an arbitrary double scale
            </summary>
    </member>
    <member name="M:Visiblox.Charts.NumericAxisBase.GetDataValueAsAxisFloat(System.IComparable)">
      <summary>
            Get the raw axis value as a float
            </summary>
      <remarks>
            Required by positioning systems that don't support 64-bit double values,
            such as DirectX which is limited to 32-bit float. May result in loss
            of accuracy
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.NumericAxisBase.SupportsStreaming">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LinearAxis.GrowActualRange">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LinearAxis.GetMajorTickValues">
      <summary>
             Returns list of major tick values for this axis 
             by calculating the tick spacing and applying it to the effective range.
            </summary>
      <returns>A list of values where major ticks are.</returns>
    </member>
    <member name="M:Visiblox.Charts.LinearAxis.GetMinorTickValues">
      <summary>
             Returns list of values at which minor ticks occur 
             (by default twice as often as major ticks).
            </summary>
      <returns>A list of values where minor ticks are.</returns>
    </member>
    <member name="M:Visiblox.Charts.LinearAxis.GetFormattedDataValueInternal(System.Double,System.String)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LinearAxis.GetAdditionalLabelFormattedDataValueInternal(System.Double,System.String)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LinearAxis.ComputeActualIntervalInternal">
      <summary>
            Calculates <see cref="P:Visiblox.Charts.AxisCommonBase`1.ActualMajorTickInterval" /> to produce a suitably
            rounded interval.
            </summary>
      <remarks>The most appropriate interval is chosen from the sequence ..., 1, 2.5, 5, 10, 25, ...</remarks>
      <returns>true if <see cref="P:Visiblox.Charts.AxisCommonBase`1.ActualMajorTickInterval" />, <see cref="P:Visiblox.Charts.AxisCommonBase`1.ActualMinorTickInterval" /> has changed</returns>
    </member>
    <member name="T:Visiblox.Charts.LogarithmicAxis">
      <summary>
            Represents a logarithmic axis which is used to display numeric values. Note: A value less than or equal to 0 cannot be displayed on a logarithmic scale.
            </summary>
      <remarks>
        <para>This class represents an axis whose value type is numeric with a logarithmic scale.
            </para>
        <para>Note: A value less than or equal to 0 cannot be displayed on a logarithmic scale. IsAutoMarginEnabled must also be false.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.LinearAxis" />
      <seealso cref="T:Visiblox.Charts.DateTimeAxis" />
      <seealso cref="T:Visiblox.Charts.CategoryAxis" />
    </member>
    <member name="M:Visiblox.Charts.LogarithmicAxis.GetAxisValueAsDataValue(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogarithmicAxis.GetDataValueAsAxisValue(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogarithmicAxis.OnActualRangePropertyChanged">
      <summary>
            When the actual range is set, set the MinimumAxisValue as well.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LogarithmicAxis.GetMajorTickValues">
      <summary>
            Calculate major ticks with the current logarithmic base.
            E.g. log base 2 returns: 2, 4, 8, 16 etc.
            E.g. log base 10 returns: 1, 10, 100, 1000 etc.
            </summary>
      <returns>The values at which the ticks are located.</returns>
    </member>
    <member name="M:Visiblox.Charts.LogarithmicAxis.GetMinorTickValues">
      <summary>
            Calculate minor ticks with the current logarithmic base.  These are 
            spaced evenly between major ticks.
            </summary>
      <returns>The list of minor ticks.</returns>
    </member>
    <member name="M:Visiblox.Charts.LogarithmicAxis.IsDataValueRenderable(System.IComparable)">
      <summary>
            Returns whether <paramref name="dataValue" /> can be rendered on the axis.
            A point can't be rendered on a log axis if it isn't positive.
            </summary>
      <param name="dataValue">The data value to test.</param>
      <returns>True if it can be rendered and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.LogarithmicAxis.SetActualRange(Visiblox.Charts.IRange)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogarithmicAxis.GetAdditionalLabelFormattedDataValueInternal(System.Double,System.String)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogarithmicAxis.GetNonAxisLabelFormattedDataValueInternal(System.Double,System.String)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.LogarithmicAxis.LogarithmicBaseProperty">
      <summary>
            Identifies the LogarithmicBase Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LogarithmicAxis.ActualRenderedRangeValid">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.LogarithmicAxis.LogarithmicBase">
      <summary>
            Gets or sets the base used to calculate the logarithmic scale. Default is 10. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AxisLabelCollisionDetectionMode">
      <summary>
            A list of possible collision detection schemes that an Axis can use when checking for label collisions.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabelCollisionDetectionMode.None">
      <summary>
            No collision detection will take place; all labels will be rendered in a single line.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabelCollisionDetectionMode.Hide">
      <summary>
            Hide colliding labels. This will determine the optimum number of labels that should be hidden
            in order to make the remaining labels clearly visible.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabelCollisionDetectionMode.Offset">
      <summary>
            When labels collide, a second row is created below the first and every other label is placed 
            on this row. If collisions still take place after offsetting, no more action is taken.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabelCollisionDetectionMode.Rotate">
      <summary>
            Labels are rotated through 90 degrees to avoid collision. If there are still collisions after
            rotation, no more action is taken.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabelCollisionDetectionMode.OffsetOrRotate">
      <summary>
            First tries to use the Offset scheme to avoid collision and if that fails, attempts the Rotate
            scheme.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabelCollisionDetectionMode.RotateAndHide">
      <summary>
            Hides any colliding labels after rotating through 90 degrees. This will determine the optimum
            number of labels that should be hidden in order to make the remaining labels clearly visible.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisLabelCollisionDetectionMode.Auto">
      <summary>
            Tries to use scheme OffsetOrRotate followed by Hide followed by RotateAndHide to avoid
            collisions.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DefaultRenderManager">
      <summary>
            A default implementation of the IRenderManager, used by the AxisZoomCanvas. This implementation has some
            logic for detecting collisions and altering the label layout based on those collisions. It is also
            responsible for offsetting the label position based on the angle they are set to.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IRenderManager">
      <summary>
            An interface that can be used to apply specific logic to how an Axis renders its tick and tick 
            label elements.
            </summary>
      <remarks>
            The default AxisZoomCanvas expects all render coordinates to be given with respect to the 
            ZoomCanvas that the ticks and labels are being rendered onto. Any offsets applied to
            ticks and labels should be given relative to the initial render position of the FrameworkElement.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.IRenderManager.GetTickPoint(System.Double,System.Double)">
      <summary>
            Determine the Point that a tick mark at the given <paramref name="position" /> should be
            placed. Use the <paramref name="size" /> to correctly specify the size of the Point.
            </summary>
      <param name="size">The size of the tick mark.</param>
      <param name="position">The position of the tick mark.</param>
      <returns>A Point object with the correct coordinates for the tick.</returns>
    </member>
    <member name="M:Visiblox.Charts.IRenderManager.GetLabelPoint(Visiblox.Charts.AxisLabel)">
      <summary>
            Determine the Point that the given <paramref name="label" /> should be placed.
            The label contains its initial render position so this method should calculate
            where the label should be placed based on that value along with any offsets 
            that may be required to correctly align the label as desired.
            </summary>
      <param name="label">The label being positioned.</param>
      <returns>A Point object with the correct coordinates for the label.</returns>
    </member>
    <member name="M:Visiblox.Charts.IRenderManager.MeasurePanelSize">
      <summary>
            Measure the panel.
            </summary>
      <returns>The Size the panel should be.</returns>
    </member>
    <member name="M:Visiblox.Charts.IRenderManager.CanDisplayElementWithoutZoom(System.Double,System.Double)">
      <summary>
            Check if an element should be visible based on its render position. Does not
            take any zoom into account.
            </summary>
      <param name="renderPosition">The render position of the element.</param>
      <param name="elementSize">The size of the element being tested.</param>
      <returns>True if the element should be visible; false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.IRenderManager.CanDisplayElementWithZoom(System.Double,System.Double,Visiblox.Charts.Zoom)">
      <summary>
            Check if an element should be visible based on its render position. Does take
            a <paramref name="zoom" /> into account.
            </summary>
      <param name="renderPosition">The render position of the element.</param>
      <param name="elementSize">The size of the element being tested.</param>
      <param name="zoom">A Zoom object to be used in the calculation.</param>
      <returns>True if the element should be visible; false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.IRenderManager.DisplayLastPositionedLabel">
      <summary>
            Check if the most recently positioned label should still be made visible.
            </summary>
      <returns>True if the label can be visible; false otherwise.</returns>
    </member>
    <member name="P:Visiblox.Charts.IRenderManager.ParallelLength">
      <summary>
            The size of panel being rendered onto with respect to the Orientation of the axis.
            The parallel length of a vertical axis is its height; the parallel length of a horizontal
            axis is its width.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRenderManager.PerpendicularLength">
      <summary>
            The size of panel being rendered onto with respect to the Orientation of the axis.
            The perpendicular length of a vertical axis is its width; the perpendicular length of a 
            horizontal axis is its height.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DefaultRenderManager.GetTickPoint(System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DefaultRenderManager.GetLabelPoint(Visiblox.Charts.AxisLabel)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DefaultRenderManager.MeasurePanelSize">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DefaultRenderManager.CanDisplayElementWithoutZoom(System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DefaultRenderManager.CanDisplayElementWithZoom(System.Double,System.Double,Visiblox.Charts.Zoom)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DefaultRenderManager.DisplayLastPositionedLabel">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DefaultRenderManager.AxisOrientation">
      <summary>
            Orientation of the Axis onto which the elements are being rendered.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DefaultRenderManager.AxisLocation">
      <summary>
            Location of the Axis onto which the elements are being rendered (primary/secondary).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DefaultRenderManager.LabelsPosition">
      <summary>
            Position of the labels being rendered with respect to the Axis (inside/outside)
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DefaultRenderManager.LabelAlignment">
      <summary>
            Alignment of the labels being rendered with respect to the tick marks (on ticks/between ticks)
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DefaultRenderManager.PanelLabels">
      <summary>
            The collection of labels being rendered onto the container.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DefaultRenderManager.LabelOverflowAllowed">
      <summary>
            Indicator that labels which overflow the edge of the axis should remain visible.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DefaultRenderManager.LabelCollisionDetectionMode">
      <summary>
            The collision detection mode specified on the Axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DefaultRenderManager.MajorTickSize">
      <summary>
            The size of major ticks. This impacts label offsets.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DefaultRenderManager.ParallelLength">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DefaultRenderManager.PerpendicularLength">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.SortOrder">
      <summary>
            Specifies how labels are sorted on a <see cref="T:Visiblox.Charts.CategoryAxis" />.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.SortOrder.Unspecified">
      <summary>
            The default. No sort order is specified.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.SortOrder.Ascending">
      <summary>
            Labels are sorted in ascending order.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.SortOrder.Descending">
      <summary>
            Labels are sorted in descending order.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ValueConversionChangedHandler">
      <summary>
            Handler for a <see cref="E:Visiblox.Charts.IAxis.ValueConversionChanged" /> event.
            </summary>
      <param name="sender">The Axis whose axis value to/from display position conversion has changed.</param>
      <param name="e">Event argument.</param>
    </member>
    <member name="T:Visiblox.Charts.AxisSubset">
      <summary>
            The subsets of all chart axes that should be acted upon if an <see cref="T:Visiblox.Charts.IBehaviour" /> receives an event from an axis.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisSubset.OnlySender">
      <summary>
            Only act on the axis that raised the event.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisSubset.AllParallelAxesInSameLocation">
      <summary>
            Act on the axis that raised the event, and any other axes in the same <see cref="P:Visiblox.Charts.IAxisCommon.Orientation" /> and <see cref="P:Visiblox.Charts.IAxisCommon.Location" />.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisSubset.AllParallelAxes">
      <summary>
            Act on the axis that raised the event, and any other axes in the same <see cref="P:Visiblox.Charts.IAxisCommon.Orientation" />.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AxisSubset.AllAxes">
      <summary>
            Act on all axes.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BehaviourBase">
      <see cref="T:Visiblox.Charts.CrosshairBehaviour" />
      <see cref="T:Visiblox.Charts.TrackballBehaviour" />
      <see cref="T:Visiblox.Charts.RulerBehaviour" />
    </member>
    <member name="T:Visiblox.Charts.IBehaviour">
      <summary>
            Defines a mechanism for adding some form  of interaction to a <see cref="T:Visiblox.Charts.Chart" />.
            </summary>
      <remarks>
        <para>
            To enable a behaviour on a particular chart, the chart's <see cref="P:Visiblox.Charts.Chart.Behaviour" />
            property must be set to an instance of that IBehaviour.
            In order to add multiple behaviours to a chart, see <see cref="T:Visiblox.Charts.BehaviourManager" />. In order to implement
            a new behaviour, consider extending <see cref="T:Visiblox.Charts.BehaviourBase" />.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.BehaviourManager" />
      <seealso cref="T:Visiblox.Charts.BehaviourBase" />
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.Init(Visiblox.Charts.Chart,System.Windows.Controls.Grid,System.Windows.Controls.Canvas)">
      <summary>
            Allows a behaviour to obtain a reference to the <see cref="T:Visiblox.Charts.Chart" />
            and the <paramref name="layoutRoot" /> and <paramref name="behaviourCanvas" /> of the chart.
            Invoked by the <see cref="T:Visiblox.Charts.Chart" /> when a behaviour is initially added.
            Typically this would be used to add some UI elements to the chart's visual tree required by the behaviour.
            </summary>
      <param name="layoutRoot">The root grid of the chart's control template.</param>
      <param name="behaviourCanvas">A panel the size of the chart's plot area to contain behaviour elements.</param>
      <param name="chart">The chart which will own the behaviour.</param>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.DeInit">
      <summary>
            Removes any elements from the chart or series that the behaviour has added.
            Invoked by <see cref="T:Visiblox.Charts.Chart" />  when a behaviour is not used any more.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.PointerDoubleTapped(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <summary>
            Invoked by the chart when the pointer is double tapped within the plot area.
            <param name="sender">The source of this event context.</param><param name="context">The pointer event context.</param></summary>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.PointerEntered(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <summary>
            Invoked by the chart when the pointer enters the plot area.
            <param name="sender">The source of this event context.</param><param name="context">The pointer event context.</param></summary>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.PointerExited(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <summary>
            Invoked by the chart when the pointer is pressed within the plot area.
            <param name="sender">The source of this event context.</param><param name="context">The pointer event context.</param></summary>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.PointerMoved(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <summary>
            Invoked by the chart when the pointer is moved within the plot area.
            </summary>
      <param name="sender">The source of this event context.</param>
      <param name="context">The pointer event context.</param>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.PointerPressed(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <summary>
            Invoked by the chart when the pointer is pressed within the plot area.
            </summary>
      <param name="sender">The source of this event context.</param>
      <param name="context">The pointer event context.</param>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.PointerReleased(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <summary>
            Invoked by the chart when the pointer is released within the plot area.
            </summary>
      <param name="sender">The source of this event context.</param>
      <param name="context">The pointer event context.</param>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.PointerWheelChanged(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <summary>
            Invoked by the chart when the pointer wheel is changed within the plot area.
            </summary>
      <param name="sender">The source of this event context.</param>
      <param name="context">The pointer event context.</param>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.PointerCaptureLost(Visiblox.Charts.IBehaviourEventSource)">
      <summary>
            Invoked by the chart when the plot area loses a pointer capture.
            </summary>
      <param name="sender">The source of this event.</param>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.KeyDown(Visiblox.Charts.KeyEventContext)">
      <summary>
            Invoked by the chart when a key is pressed and the plot area is focussed.
            </summary>
      <param name="context">The key event context.</param>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.KeyUp(Visiblox.Charts.KeyEventContext)">
      <summary>
            Invoked by the chart when a key is released and the plot area is focussed.
            </summary>
      <param name="context">The key event context.</param>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.GestureStarted(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <summary>
            Invoked by the chart when a gesture is started.
            </summary>
      <param name="sender">The source of this event context.</param>
      <param name="context">The gesture event context.</param>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.GestureStarting(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <summary>
            Invoked by the chart when a gesture is starting.
            </summary>
      <param name="sender">The source of this event context.</param>
      <param name="context">The gesture event context.</param>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.GestureInertiaStarting(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <summary>
            Invoked by the chart when the inertial part of the gesture is starting.
            </summary>
      <param name="sender">The source of this event context.</param>
      <param name="context">The gesture event context.</param>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.GestureInProgress(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <summary>
            Invoked by the chart when a gesture is in progress and changes.
            </summary>
      <param name="sender">The source of this event context.</param>
      <param name="context">The gesture event context.</param>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.GestureEnded(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <summary>
            Invoked by the chart when a gesture is completed.
            </summary>
      <param name="sender">The source of this event context.</param>
      <param name="context">The gesture event context.</param>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.BehaviourCanvasSizeChanged(Visiblox.Charts.IBehaviourEventSource,System.Windows.SizeChangedEventArgs)">
      <summary>
            Invoked by the chart when the size of the behaviour container changes.
            </summary>
      <param name="sender">The source of this event context.</param>
      <param name="e">The event args.</param>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.AcceptEvent(Visiblox.Charts.IEventContext)">
      <summary>
            Determines if a particular event should be accepted by a behaviour based
            on the behaviour activator defined.
            </summary>
      <param name="context">The behaviour context applicable to the event.</param>
      <returns>True if the event should be accepted by the behaviour, false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.IBehaviour.CancelOperation">
      <summary>
            Cancels a behaviour operation if the accept event for a method
            returns false
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IBehaviour.IsEnabled">
      <summary>
            Gets or sets the enabled state of this behaviour, raising a property changed
            event when the state changes.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IBehaviour.Name">
      <summary>
            Gets the name of this behaviour.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IBehaviour.AcceptedSources">
      <summary>
            This condition must be satisfied before the <see cref="T:Visiblox.Charts.BehaviourEventRouter" /> will forward events to this <see cref="T:Visiblox.Charts.IBehaviour" />.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourBase.AcceptedSourcesProperty">
      <summary>
            Identifies the AcceptedSources Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.#ctor(System.String)">
      <summary>
            Instantiates the behaviour with the given name.
            </summary>
      <param name="name">The name of the behaviour.</param>
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.ToString">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.Init(Visiblox.Charts.Chart,System.Windows.Controls.Grid,System.Windows.Controls.Canvas)">
      <summary>
            Performs initialisation on the behaviour, setting the <see cref="P:Visiblox.Charts.BehaviourBase.Chart" /> and <see cref="P:Visiblox.Charts.BehaviourBase.LayoutRoot" /> properties. 
            Subclasses wanting to perform their own initialisation should override <see cref="M:Visiblox.Charts.BehaviourBase.Init" />.
            </summary>
      <param name="chart">Chart to use.</param>
      <param name="layoutRoot">Layout root to set.</param>
      <param name="behaviourCanvas">Plot area to set.</param>
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.Init">
      <summary>
            Allows a subclass of <see cref="T:Visiblox.Charts.BehaviourBase" /> to perform its own initialisation. At the point this method is called,
            the <see cref="P:Visiblox.Charts.BehaviourBase.Chart" />, <see cref="P:Visiblox.Charts.BehaviourBase.LayoutRoot" /> and <see cref="P:Visiblox.Charts.BehaviourBase.BehaviourCanvas" /> have been initialised.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.DeInit">
      <inheritdoc />
      <remarks>When this method is implemented in a subclass, it should remove all UI elements it has added to the chart,
            remove any remaining event handlers etc.</remarks>
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.OnIsEnabledPropertyChanged">
      <summary>
            Called when the <see cref="P:Visiblox.Charts.BehaviourBase.IsEnabled" /> property changes.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.OnAcceptedSourcesPropertyChangedInternal">
      <summary>
            Called when the <see cref="P:Visiblox.Charts.BehaviourBase.AcceptedSources" /> property changes.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.PointerDoubleTapped(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.KeyUp(Visiblox.Charts.KeyEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.KeyDown(Visiblox.Charts.KeyEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.PointerEntered(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.PointerExited(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.PointerMoved(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.PointerPressed(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.PointerReleased(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.PointerWheelChanged(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.PointerCaptureLost(Visiblox.Charts.IBehaviourEventSource)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.GestureStarted(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.GestureInProgress(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.GestureEnded(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.GestureStarting(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.GestureInertiaStarting(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.BehaviourCanvasSizeChanged(Visiblox.Charts.IBehaviourEventSource,System.Windows.SizeChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.AcceptEvent(Visiblox.Charts.IEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.CancelOperation">
      <summary>
            Cancels a behaviour operation if the accept event for a method
            returns false
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourBase.BehaviourActivatorProperty">
      <summary>
            Identifies the BehaviourActivator Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourBase.IsEnabledProperty">
      <summary>
            Identifies the IsEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourBase.TagProperty">
      <summary>
            Identifies the Tag Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BehaviourBase.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.BehaviourBase.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.BehaviourBase.AcceptedSources">
      <summary>
            Gets or sets the accepted sources. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BehaviourBase.Name">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BehaviourBase.Chart">
      <summary>
            Exposes the <see cref="P:Visiblox.Charts.BehaviourBase.Chart" /> instance to BehaviourBase sub-classes.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BehaviourBase.LayoutRoot">
      <summary>
            Exposes the <see cref="T:System.Windows.Controls.Grid" /> serving as the chart's layout root.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BehaviourBase.BehaviourCanvas">
      <summary>
            Exposes the <see cref="T:System.Windows.Controls.Canvas" /> covering the chart's plot area for the behaviour to draw itself on.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BehaviourBase.BehaviourActivator">
      <summary>
            Gets or sets a behaviour activator for this behaviour. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BehaviourBase.IsEnabled">
      <summary>
            Gets or sets the enabled state of this behaviour, raising a PropertyChanged event what the state changes. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BehaviourBase.Tag">
      <summary>
            Gets or sets an arbitrary object value that can be used to store custom information about this element. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.BehaviourBase.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BehaviourEventSourceMetadata">
      <summary>
            This class exists solely to define an attached property that on <see cref="T:System.Windows.UIElement" />s that will indicate 
            which <see cref="T:Visiblox.Charts.IBehaviourEventSource" /> its events can be considered to be coming from.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourEventSourceMetadata.EventSourceProperty">
      <summary>
            The value of this property is the <see cref="T:Visiblox.Charts.IBehaviourEventSource" /> that events from the <see cref="T:System.Windows.UIElement" /> should be treated as coming from.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BehaviourEventSourceMetadata.SetEventSource(System.Windows.UIElement,Visiblox.Charts.IBehaviourEventSource)">
      <summary>
            Set the EventSource property on a <see cref="T:System.Windows.UIElement" />.  
            </summary>
      <param name="element">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Visiblox.Charts.BehaviourEventSourceMetadata.GetEventSource(System.Windows.UIElement)">
      <summary>
            Get the current value of the EventSource property.  
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Visiblox.Charts.BehaviourEventThrottler`1">
      <summary>
            Generic event throttling based on the approach in 
            http://www.scottlogic.co.uk/blog/colin/2010/06/throttling-silverlight-mouse-events-to-keep-the-ui-responsive/
            </summary>
      <remarks>A payload of type <typeparamref name="T" /> is supplied to <see cref="M:Visiblox.Charts.BehaviourEventThrottler`1.ReceiveAction(`0)" /> every time an interaction event occurs;
            a throttled version of this is raised as <see cref="E:Visiblox.Charts.BehaviourEventThrottler`1.Event" />.</remarks>
      <typeparam name="T">Type of event payload data</typeparam>
    </member>
    <member name="M:Visiblox.Charts.BehaviourEventThrottler`1.#ctor">
      <summary>
            Construct new event throttler
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BehaviourEventThrottler`1.ReceiveAction(`0)">
      <summary>
            Performs an action with the given <paramref name="data" />, conditional on whether the chart
            has rendered since the last pan.
            </summary>
      <remarks>This method is initially called due to a mouse move event. If the CompositionTarget.Rendering event has 
            not yet fired since last update, this method will be called again via a timer in case the mouse stops moving
            and the position still needs updated. When the mouse button is released, this will be called in a couple of stages
            in order to ensure the queued events are rendered before raising the compelted event.</remarks>
      <param name="data">Event payload data</param>
    </member>
    <member name="M:Visiblox.Charts.BehaviourEventThrottler`1.UpdatePendingActionData(`0)">
      <summary>
            Update the pending action data without triggering an interaction
            </summary>
      <param name="data">Interaction data</param>
    </member>
    <member name="M:Visiblox.Charts.BehaviourEventThrottler`1.CompleteInteraction(`0)">
      <summary>
            Signal that the interaction is complete, while providing the final datum <paramref name="data" /></summary>
      <param name="data">Final interaction data</param>
    </member>
    <member name="M:Visiblox.Charts.BehaviourEventThrottler`1.CompleteInteraction">
      <summary>
            Signal that the interaction is complete, without providing a final value.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BehaviourEventThrottler`1.Stop">
      <summary>
            Stop processing events.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.BehaviourEventThrottler`1.InteractionEnded">
      <summary>
            Event raised when the interaction has ended and all queued events have been fired and rendered
            </summary>
    </member>
    <member name="E:Visiblox.Charts.BehaviourEventThrottler`1.Event">
      <summary>
            Event raised corresponding to the underlying behaviour event. May be fired immediately or may be 
            delayed when throttling is in force until CompositionTarget.Rendering occurs.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BehaviourEventThrottler`1.CombineData">
      <summary>
            Function to combine two successive interaction data. If unset the old data is simply discarded.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ThrottledEventArgs`1">
      <summary>
            Event arguments for a <see cref="T:Visiblox.Charts.BehaviourEventThrottler`1" /></summary>
      <typeparam name="T">Type of payload data</typeparam>
    </member>
    <member name="M:Visiblox.Charts.ThrottledEventArgs`1.#ctor(`0)">
      <summary>
            Constructor
            </summary>
      <param name="data">Payload data</param>
    </member>
    <member name="P:Visiblox.Charts.ThrottledEventArgs`1.Data">
      <summary>
            Payload data
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BehaviourManager">
      <summary>
            A container for a number of <see cref="T:Visiblox.Charts.IBehaviour" /> instances, allowing multiple behaviours 
            to be added to a chart.
            </summary>
      <remarks>
        <para>
            Depending on the setting of <see cref="P:Visiblox.Charts.BehaviourManager.AllowMultipleEnabled" />, the BehaviourManager either allows 
            one behaviour to be enabled on the chart at once, or any number.
            </para>
        <para>
            Behaviours are added to the <see cref="P:Visiblox.Charts.BehaviourManager.Behaviours" /> collection, and individual 
            behaviours may be enabled (or disabled) via the <see cref="P:Visiblox.Charts.IBehaviour.IsEnabled" /> property.
            The BehaviourManager passes chart interaction events through to each enabled behaviour.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.IBehaviour" />
      <seealso cref="T:Visiblox.Charts.BehaviourBase" />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.Init">
      <summary>
            Initialises the contained behaviours.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.ForEachEnabledAcceptingBehaviourForwardThisContext(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext,System.Action{Visiblox.Charts.IBehaviour,Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext})">
      <summary>
            If <paramref name="sender" /> is accepted as a source by a managed behaviour,
            and it <see cref="P:Visiblox.Charts.IBehaviour.IsEnabled" />,
            then <paramref name="action" /> is performed on that <see cref="T:Visiblox.Charts.IBehaviour" />.  
            </summary>
      <param name="sender">
      </param>
      <param name="context">
      </param>
      <param name="action">
      </param>
    </member>
    <member name="F:Visiblox.Charts.BehaviourManager.KeyDownAction">
      <summary>
            The action performed on each <see cref="T:Visiblox.Charts.IBehaviour" /> by the <see cref="M:Visiblox.Charts.BehaviourManager.ForEachEnabledAcceptingBehaviourForwardThisContext(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext,System.Action{Visiblox.Charts.IBehaviour,Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext})" /> method when <see cref="M:Visiblox.Charts.BehaviourManager.KeyDown(Visiblox.Charts.KeyEventContext)" /> is called.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourManager.KeyUpAction">
      <summary>
            The action performed on each <see cref="T:Visiblox.Charts.IBehaviour" /> by the <see cref="M:Visiblox.Charts.BehaviourManager.ForEachEnabledAcceptingBehaviourForwardThisContext(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext,System.Action{Visiblox.Charts.IBehaviour,Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext})" /> method when <see cref="M:Visiblox.Charts.BehaviourManager.KeyUp(Visiblox.Charts.KeyEventContext)" /> is called.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourManager.DoubleTappedAction">
      <summary>
            The action performed on each <see cref="T:Visiblox.Charts.IBehaviour" /> by the <see cref="M:Visiblox.Charts.BehaviourManager.ForEachEnabledAcceptingBehaviourForwardThisContext(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext,System.Action{Visiblox.Charts.IBehaviour,Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext})" /> method when <see cref="M:Visiblox.Charts.BehaviourManager.PointerDoubleTapped(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)" /> is called.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourManager.PointerEnteredAction">
      <summary>
            The action performed on each <see cref="T:Visiblox.Charts.IBehaviour" /> by the <see cref="M:Visiblox.Charts.BehaviourManager.ForEachEnabledAcceptingBehaviourForwardThisContext(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext,System.Action{Visiblox.Charts.IBehaviour,Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext})" /> method when <see cref="M:Visiblox.Charts.BehaviourManager.PointerEntered(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)" /> is called.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourManager.PointerReleasedAction">
      <summary>
            The action performed on each <see cref="T:Visiblox.Charts.IBehaviour" /> by the <see cref="M:Visiblox.Charts.BehaviourManager.ForEachEnabledAcceptingBehaviourForwardThisContext(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext,System.Action{Visiblox.Charts.IBehaviour,Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext})" /> method when <see cref="M:Visiblox.Charts.BehaviourManager.PointerReleased(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)" /> is called.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourManager.PointerExitedAction">
      <summary>
            The action performed on each <see cref="T:Visiblox.Charts.IBehaviour" /> by the <see cref="M:Visiblox.Charts.BehaviourManager.ForEachEnabledAcceptingBehaviourForwardThisContext(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext,System.Action{Visiblox.Charts.IBehaviour,Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext})" /> method when <see cref="M:Visiblox.Charts.BehaviourManager.PointerExited(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)" /> is called.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourManager.PointerMovedAction">
      <summary>
            The action performed on each <see cref="T:Visiblox.Charts.IBehaviour" /> by the <see cref="M:Visiblox.Charts.BehaviourManager.ForEachEnabledAcceptingBehaviourForwardThisContext(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext,System.Action{Visiblox.Charts.IBehaviour,Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext})" /> method when <see cref="M:Visiblox.Charts.BehaviourManager.PointerMoved(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)" /> is called.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourManager.PointerPressedAction">
      <summary>
            The action performed on each <see cref="T:Visiblox.Charts.IBehaviour" /> by the <see cref="M:Visiblox.Charts.BehaviourManager.ForEachEnabledAcceptingBehaviourForwardThisContext(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext,System.Action{Visiblox.Charts.IBehaviour,Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext})" /> method when <see cref="M:Visiblox.Charts.BehaviourManager.PointerPressed(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)" /> is called.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourManager.PointerWheelChangedAction">
      <summary>
            The action performed on each <see cref="T:Visiblox.Charts.IBehaviour" /> by the <see cref="M:Visiblox.Charts.BehaviourManager.ForEachEnabledAcceptingBehaviourForwardThisContext(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext,System.Action{Visiblox.Charts.IBehaviour,Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext})" /> method when <see cref="M:Visiblox.Charts.BehaviourManager.PointerWheelChanged(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)" /> is called.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourManager.GestureEndedAction">
      <summary>
            The action performed on each <see cref="T:Visiblox.Charts.IBehaviour" /> by the <see cref="M:Visiblox.Charts.BehaviourManager.ForEachEnabledAcceptingBehaviourForwardThisContext(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext,System.Action{Visiblox.Charts.IBehaviour,Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext})" /> method when <see cref="M:Visiblox.Charts.BehaviourManager.GestureEnded(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)" /> is called.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourManager.GestureInProgressAction">
      <summary>
            The action performed on each <see cref="T:Visiblox.Charts.IBehaviour" /> by the <see cref="M:Visiblox.Charts.BehaviourManager.ForEachEnabledAcceptingBehaviourForwardThisContext(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext,System.Action{Visiblox.Charts.IBehaviour,Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext})" /> method when <see cref="M:Visiblox.Charts.BehaviourManager.GestureInProgress(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)" /> is called.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourManager.GestureStartedAction">
      <summary>
            The action performed on each <see cref="T:Visiblox.Charts.IBehaviour" /> by the <see cref="M:Visiblox.Charts.BehaviourManager.ForEachEnabledAcceptingBehaviourForwardThisContext(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext,System.Action{Visiblox.Charts.IBehaviour,Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.IEventContext})" /> method when <see cref="M:Visiblox.Charts.BehaviourManager.GestureStarted(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)" /> is called.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.PointerDoubleTapped(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.KeyUp(Visiblox.Charts.KeyEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.KeyDown(Visiblox.Charts.KeyEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.ApplyHotkey(System.Windows.Input.Key)">
      <summary>
            Applies a specific key as a hotkey, this is intended to be called from the KeyDown event
            but is exposed so consumers can call it directly if required as a result of other
            input
            </summary>
      <param name="key">The key to apply</param>
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.PointerEntered(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.PointerExited(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.PointerMoved(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.PointerPressed(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.PointerReleased(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.PointerWheelChanged(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.PointerCaptureLost(Visiblox.Charts.IBehaviourEventSource)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.GestureStarted(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.GestureInProgress(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.GestureEnded(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.BehaviourCanvasSizeChanged(Visiblox.Charts.IBehaviourEventSource,System.Windows.SizeChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.AcceptEvent(Visiblox.Charts.IEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.OnIsEnabledPropertyChanged">
      <summary>
            Override to ensure that when <see cref="P:Visiblox.Charts.BehaviourBase.IsEnabled" /> is set to false on a <see cref="T:Visiblox.Charts.BehaviourManager" />, 
            each behaviour contained in it is disabled. Note that when <see cref="P:Visiblox.Charts.BehaviourBase.IsEnabled" /> is set to true, no behaviour
            is re-enabled again.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourManager.HotkeyProperty">
      <summary>
            A Key that can be associated with <see cref="T:Visiblox.Charts.IBehaviour" />s within a <see cref="T:Visiblox.Charts.BehaviourManager" />.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.SetHotkey(System.Windows.DependencyObject,System.Windows.Input.Key)">
      <summary>
            Sets the Key that will activate the given <see cref="T:System.Windows.DependencyObject" />, which will be an <see cref="T:Visiblox.Charts.IBehaviour" /></summary>
      <param name="obj">
      </param>
      <param name="hotkey">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.BehaviourManager.GetHotkey(System.Windows.DependencyObject)">
      <summary>
            Returns the Key that will activate the given <see cref="T:System.Windows.DependencyObject" />, which will be an <see cref="T:Visiblox.Charts.IBehaviour" /></summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Visiblox.Charts.BehaviourManager.AllowMultipleEnabledProperty">
      <summary>
            Identifies the AllowMultipleEnabled Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BehaviourManager.Behaviours">
      <summary>
            Gets the collection of <see cref="T:Visiblox.Charts.IBehaviour" /> instances that this class manages.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BehaviourManager.AllowMultipleEnabled">
      <summary>
            Gets or sets whether multiple behaviours may be enabled at once. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BehaviourWithAxesBase">
      <see cref="T:Visiblox.Charts.ZoomBehaviour" />
    </member>
    <member name="T:Visiblox.Charts.Primitives.IAxisAware">
      <summary>
            Defines a component that has a notion of X and Y axes.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.IAxisAware.XAxis">
      <summary>
            Gets or sets the X axis belonging to the component.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.IAxisAware.YAxis">
      <summary>
            Gets or sets the Y axis belonging to the component.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BehaviourWithAxesBase.#ctor(System.String)">
      <summary>
            Constructor with a behaviour name chained to the base class.
            </summary>
      <param name="name">The name to associate with the behaviour.</param>
    </member>
    <member name="M:Visiblox.Charts.BehaviourWithAxesBase.Init">
      <summary>
            Initialises the Axes to their defaults if they have not been manually set. 
            When overriding, call back to base.Init(). 
            </summary>
      <remarks>
            At the point this method is called, the <see cref="P:Visiblox.Charts.BehaviourBase.Chart" />, <see cref="P:Visiblox.Charts.BehaviourBase.LayoutRoot" /> 
            and <see cref="P:Visiblox.Charts.BehaviourBase.BehaviourCanvas" /> have been initialised.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.BehaviourWithAxesBase.DeInit">
      <summary>
            De-registers axis events. When overriding, call back to base.DeInit(). 
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BehaviourWithAxesBase.AxisEventRaised(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventRelayEventArgs)">
      <summary>
            Invoked when an event is raised by one of the axes.
            </summary>
      <param name="axis">The axis which raised the event.</param>
      <param name="e">The event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.BehaviourWithAxesBase.XAxisChanged(Visiblox.Charts.IAxis,Visiblox.Charts.IAxis)">
      <summary>
            Called when the XAxis is changed.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BehaviourWithAxesBase.YAxisChanged(Visiblox.Charts.IAxis,Visiblox.Charts.IAxis)">
      <summary>
            Called when the YAxis is changed.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourWithAxesBase.XAxisProperty">
      <summary>
            Identifies the XAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BehaviourWithAxesBase.YAxisProperty">
      <summary>
            Identifies the YAxis Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BehaviourWithAxesBase.XAxis">
      <summary>
            Gets or sets the X axis for this behaviour. This will default to the first non-null horizontal axis located on the chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BehaviourWithAxesBase.YAxis">
      <summary>
            Gets or sets the Y axis for this behaviour. This will default to the first non-null vertical axis located on the chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Crosshair">
      <summary>
            A control which is used to render a crosshair.
            </summary>
      <remarks>
        <see cref="T:Visiblox.Charts.CrosshairBehaviour" /> uses Crosshair to to draw a crosshair on the chart
            and update it on every mouse move.
            </remarks>
      <seealso cref="T:Visiblox.Charts.CrosshairBehaviour" />
    </member>
    <member name="M:Visiblox.Charts.Crosshair.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Crosshair.OnApplyTemplate">
      <summary>
             Sets up the graphical components of the control.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Crosshair.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.Crosshair.XProperty">
      <summary>
            Identifies the X Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Crosshair.YProperty">
      <summary>
            Identifies the Y Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Crosshair.XValueProperty">
      <summary>
            Identifies the XValue Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Crosshair.YValueProperty">
      <summary>
            Identifies the YValue Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Crosshair.FormattedXValueProperty">
      <summary>
            Identifies the FormattedXValue Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Crosshair.FormattedYValueProperty">
      <summary>
            Identifies the FormattedYValue Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Crosshair.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.Crosshair.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.Crosshair.X">
      <summary>
            Gets or sets the X value position of the mouse. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Crosshair.Y">
      <summary>
            Gets or sets the Y value position of the mouse. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Crosshair.XValue">
      <summary>
            Gets or sets the X value against which the crosshair is plotted on the X axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Crosshair.YValue">
      <summary>
            Gets or sets the Y value against which the crosshair is plotted on the Y axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Crosshair.FormattedXValue">
      <summary>
            Gets or sets the formatted X value of the crosshair. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Crosshair.FormattedYValue">
      <summary>
            Gets or sets the formatted Y value of the crosshair. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.Crosshair.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.CrosshairBehaviour">
      <summary>
            A behaviour that displays a crosshair on the chart plot area.
            </summary>
      <remarks>
        <para>CrosshairBehaviour displays a crosshair on the chart plot area, giving a readout of the data values under the mouse position. The crosshair consists of 
            vertical and horizontal lines running across the chart through the cursor position, and a label positioned by the cursor indicating the X and Y axis data values
            under the crosshair.</para>
        <para>
            The crosshair can be styled by setting <see cref="P:Visiblox.Charts.CrosshairBehaviour.CrosshairStyle" />.
            </para>
        <para>
            X and Y labels can be turned on or off by setting the <see cref="P:Visiblox.Charts.CrosshairBehaviour.ShowAxisLabels" /> property. They can be set to hide underlying axis labels
                by setting <see cref="P:Visiblox.Charts.CrosshairBehaviour.HideCollidingAxisLabels" /> to true.
            </para>
        <para>
            Labels on both the X and Y axis can be formatted using the <see cref="P:Visiblox.Charts.CrosshairBehaviour.XAxisLabelTemplate" />, <see cref="P:Visiblox.Charts.CrosshairBehaviour.XAxisLabelBorderStyle" />, <see cref="P:Visiblox.Charts.CrosshairBehaviour.XAxisLabelTextStyle" />,
                <see cref="P:Visiblox.Charts.CrosshairBehaviour.XAxisLabelFormatString" />, <see cref="P:Visiblox.Charts.CrosshairBehaviour.XAxisLabelHorizontalAlignment" />, <see cref="P:Visiblox.Charts.CrosshairBehaviour.XAxisLabelVerticalAlignment" /> properties for the X axis
                and respectively the <see cref="P:Visiblox.Charts.CrosshairBehaviour.YAxisLabelTemplate" />, <see cref="P:Visiblox.Charts.CrosshairBehaviour.YAxisLabelBorderStyle" />, <see cref="P:Visiblox.Charts.CrosshairBehaviour.YAxisLabelTextStyle" />,
                <see cref="P:Visiblox.Charts.CrosshairBehaviour.YAxisLabelFormatString" />, <see cref="P:Visiblox.Charts.CrosshairBehaviour.YAxisLabelHorizontalAlignment" />, <see cref="P:Visiblox.Charts.CrosshairBehaviour.YAxisLabelVerticalAlignment" /> properties for the Y axis.
            </para>
      </remarks>
      <example>The following XAML defines an example crosshair template and style, resulting in a red crosshair with thicker dashed lines:
            <code source="Help\Charts\IncludedCode\CrosshairTemplateExample.xml" lang="XAML" /></example>
      <see cref="T:Visiblox.Charts.Crosshair" />
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.PointerEntered(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.PointerExited(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.PointerCaptureLost(Visiblox.Charts.IBehaviourEventSource)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.PointerPressed(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.PointerReleased(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.PointerMoved(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.KeyUp(Visiblox.Charts.KeyEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.KeyDown(Visiblox.Charts.KeyEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.Init">
      <summary>
            Performs behaviour initialisation.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.AxisEventRaised(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventRelayEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.OnIsEnabledPropertyChanged">
      <summary>
            Hides the crosshair when the behaviour is not enabled.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.XAxisChanged(Visiblox.Charts.IAxis,Visiblox.Charts.IAxis)">
      <summary>
            Remove the axis label in <see cref="P:Visiblox.Charts.IAxis.AdditionalLabels" /> from the oldAxis and 
            add it to the new Axis' <see cref="P:Visiblox.Charts.IAxis.AdditionalLabels" />.
            </summary>
      <param name="oldAxis">The old value of the XAxis property.</param>
      <param name="newAxis">The new value of the XAxis property.</param>
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.YAxisChanged(Visiblox.Charts.IAxis,Visiblox.Charts.IAxis)">
      <summary>
            Remove the axis label in <see cref="P:Visiblox.Charts.IAxis.AdditionalLabels" /> from the oldAxis and 
            add it to the new Axis' <see cref="P:Visiblox.Charts.IAxis.AdditionalLabels" />.
            </summary>
      <param name="oldAxis">The old value of the YAxis property.</param>
      <param name="newAxis">The new value of the YAxis property.</param>
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.CancelOperation">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CrosshairBehaviour.InvalidateInternal">
      <summary>
            Invalidates the layout of the crosshair.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.CrosshairStyleProperty">
      <summary>
            Identifies the CrosshairStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.CrosshairTemplateProperty">
      <summary>
            Identifies the CrosshairTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.ShowAxisLabelsProperty">
      <summary>
            Identifies the ShowAxisLabels Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.HideCollidingAxisLabelsProperty">
      <summary>
            Identifies the HideCollidingAxisLabels Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.XAxisLabelTemplateProperty">
      <summary>
            Identifies the XAxisLabelTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.XAxisLabelBorderStyleProperty">
      <summary>
            Identifies the XAxisLabelBorderStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.XAxisLabelTextStyleProperty">
      <summary>
            Identifies the XAxisLabelTextStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.XAxisLabelFormatStringProperty">
      <summary>
            Identifies the XAxisLabelFormatString Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.XAxisLabelHorizontalAlignmentProperty">
      <summary>
            Identifies the XAxisLabelHorizontalAlignment Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.XAxisLabelVerticalAlignmentProperty">
      <summary>
            Identifies the XAxisLabelVerticalAlignment Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.YAxisLabelTemplateProperty">
      <summary>
            Identifies the YAxisLabelTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.YAxisLabelBorderStyleProperty">
      <summary>
            Identifies the YAxisLabelBorderStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.YAxisLabelTextStyleProperty">
      <summary>
            Identifies the YAxisLabelTextStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.YAxisLabelFormatStringProperty">
      <summary>
            Identifies the YAxisLabelFormatString Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.YAxisLabelHorizontalAlignmentProperty">
      <summary>
            Identifies the YAxisLabelHorizontalAlignment Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CrosshairBehaviour.YAxisLabelVerticalAlignmentProperty">
      <summary>
            Identifies the YAxisLabelVerticalAlignment Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.CrosshairStyle">
      <summary>
            Gets or sets the style of the crosshair. The Style should have a TargetType of Crosshair. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.CrosshairTemplate">
      <summary>
            Gets or sets the control template used for the crosshair. The ControlTemplate should have a TargetType of Crosshair. See <see cref="T:Visiblox.Charts.CrosshairBehaviour" /> for an example. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.ShowAxisLabels">
      <summary>
            Gets or sets whether labels should be shown on the X and Y axis of the crosshair. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.HideCollidingAxisLabels">
      <summary>
            Gets or sets whether axis labels that would collide with the crosshair labels should be hidden. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.XAxisLabelTemplate">
      <summary>Gets or sets the control template of the label on the X axis. The TargetType of this style should be <see cref="T:Visiblox.Charts.AdditionalLabel" />.</summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.XAxisLabelBorderStyle">
      <summary>
            Gets or sets the style of the border used around the label on the X axis. The TargetType of this style should be Border. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.XAxisLabelTextStyle">
      <summary>
            Gets or sets the style of the text used around the label on the X axis. The TargetType of this style should be TextBlock. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.XAxisLabelFormatString">
      <summary>
            Gets or sets the format string to be used on the label on the X axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.XAxisLabelHorizontalAlignment">
      <summary>
            Gets or sets the horizontal alignment of the label on the X axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.XAxisLabelVerticalAlignment">
      <summary>
            Gets or sets the vertical alignment of the label on the X axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.YAxisLabelTemplate">
      <summary>Gets or sets the control template of the label on the Y axis. The TargetType of this style should be <see cref="T:Visiblox.Charts.AdditionalLabel" />.</summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.YAxisLabelBorderStyle">
      <summary>
            Gets or sets the style of the border used around the label on the Y axis. The TargetType of this style should be Border. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.YAxisLabelTextStyle">
      <summary>
            Gets or sets the style of the text used around the label on the Y axis. The TargetType of this style should be TextBlock. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.YAxisLabelFormatString">
      <summary>
            Gets or sets the format string to be used on the label on the Y axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.YAxisLabelHorizontalAlignment">
      <summary>
            Gets or sets the horizontal alignment of the label on the Y axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.YAxisLabelVerticalAlignment">
      <summary>
            Gets or sets the vertical alignment of the label on the Y axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.CrosshairBehaviour.CrosshairDataContext">
      <summary>
            A class that is simply used as a wrapper of properties 
            for binding elements within the <see cref="T:Visiblox.Charts.Crosshair" /> template.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.CrosshairDataContext.X">
      <summary>
            X mouse position.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.CrosshairDataContext.Y">
      <summary>
            Y mouse position.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.CrosshairDataContext.XValue">
      <summary>
            The value along the X axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CrosshairBehaviour.CrosshairDataContext.YValue">
      <summary>
            The value along the Y axis.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AcceptAllEventSource">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AcceptAllEventSource.Accept(Visiblox.Charts.IBehaviourEventSource)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.AnyEventSource">
      <inheritdoc />
      <remarks>
            A given source is acceptable if it satisfies any of the conditions in <see cref="P:Visiblox.Charts.AnyEventSource.AcceptableSources" /></remarks>
    </member>
    <member name="M:Visiblox.Charts.AnyEventSource.Accept(Visiblox.Charts.IBehaviourEventSource)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AnyEventSource.AcceptableSources">
      <summary>
            The set of <see cref="T:Visiblox.Charts.IEventSourceCondition" />s that can be satisfied for this <see cref="T:Visiblox.Charts.IEventSourceCondition" /> to be satisfied.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AxisEventSource">
      <inheritdoc />
      <remarks>
            Only events from <see cref="T:Visiblox.Charts.IBehaviourEventSource" />s which are axes are accepted. 
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.AxisEventSource.Accept(Visiblox.Charts.IBehaviourEventSource)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.SpecificInstanceEventSource">
      <inheritdoc />
      <remarks>
            Only events from <see cref="P:Visiblox.Charts.SpecificInstanceEventSource.AcceptedInstance" /> are accepted. 
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.SpecificInstanceEventSource.#ctor(Visiblox.Charts.IBehaviourEventSource)">
      <summary>
            Constructor.  
            </summary>
      <param name="source">Initialises the source that events can come from.  </param>
    </member>
    <member name="M:Visiblox.Charts.SpecificInstanceEventSource.Accept(Visiblox.Charts.IBehaviourEventSource)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SpecificInstanceEventSource.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.SpecificInstanceEventSource.AcceptedInstance">
      <summary>
            The only object that is accepted as a source for events.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.SpecificTypeEventSource">
      <inheritdoc />
      <remarks>
            Only events from <see cref="T:Visiblox.Charts.IBehaviourEventSource" />s with <see cref="T:Visiblox.Charts.SourceType" /> equal to <see cref="P:Visiblox.Charts.SpecificTypeEventSource.AcceptedType" /> are accepted. 
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.SpecificTypeEventSource.#ctor(Visiblox.Charts.SourceType)">
      <summary>
            Constructor.  
            </summary>
      <param name="type">Initialises the type that events must be if they are to be accepted.  </param>
    </member>
    <member name="M:Visiblox.Charts.SpecificTypeEventSource.Accept(Visiblox.Charts.IBehaviourEventSource)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SpecificTypeEventSource.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.SpecificTypeEventSource.AcceptedType">
      <summary>
            The only category of source that is accepted as a source for events.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.SourceType">
      <summary>
            The possible type source for behaviour events.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.SourceType.PlotArea">
      <summary>
            The central plot area.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.SourceType.PrimaryVerticalAxis">
      <summary>
            Any axis within the primary vertical axis container.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.SourceType.PrimaryHorizontalAxis">
      <summary>
            Any axis within the primary horizontal axis container.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.SourceType.SecondaryVerticalAxis">
      <summary>
            Any axis within the secondary vertical axis container.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.SourceType.SecondaryHorizontalAxis">
      <summary>
            Any axis within the secondary horizontal axis container.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IEventContext">
      <summary>
            This is a marker interface for contexts that are passed into <see cref="T:Visiblox.Charts.IBehaviour" />s
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IEventContext.AsPointerEventContext">
      <summary>
            Static type safe converter for turning this context into a pointer context if possible.
            </summary>
      <returns>This event context as a pointer event context or null if not possible</returns>
    </member>
    <member name="M:Visiblox.Charts.IEventContext.AsKeyEventContext">
      <summary>
            Static type safe converter for turning this context into a key context if possible.
            </summary>
      <returns>This event context as a key event context or null if not possible</returns>
    </member>
    <member name="M:Visiblox.Charts.IEventContext.AsGestureEventContext">
      <summary>
            Static type safe converter for turning this context into a gesture context if possible.
            </summary>
      <returns>This event context as a gesture event context or null if not possible</returns>
    </member>
    <member name="T:Visiblox.Charts.KeyEventContext">
      <summary>
            A class for representing a Key event.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.KeyEventContext.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
      <summary>
            Constructor.
            </summary>
      <param name="key">The key that was the source of the event.</param>
      <param name="modifierKeys">Any modifier keys that were active when the event was received.</param>
    </member>
    <member name="M:Visiblox.Charts.KeyEventContext.AsPointerEventContext">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.KeyEventContext.AsKeyEventContext">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.KeyEventContext.AsGestureEventContext">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.KeyEventContext.Key">
      <summary>
            The key that was the source of the event.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.KeyEventContext.ModifierKeys">
      <summary>
            Any modifier keys that were active when the event was received.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.PanBehaviour">
      <summary>
            A behaviour that pans the chart when it is dragged, or when cursor keys are pressed.
            </summary>
      <remarks>
        <para>
            Panning is accomplished by updating the <see cref="P:Visiblox.Charts.Zoom.Offset" /> of a <see cref="P:Visiblox.Charts.IAxis.Zoom" /> while the chart is being dragged. This
            also takes into account the <see cref="P:Visiblox.Charts.Zoom.Scale" /> to ensure the panning is correct while zoomed in.
            </para>
        <para>
            It is possible to pan in both directions or to disable panning on X and/or Y through <see cref="P:Visiblox.Charts.PanBehaviour.XPanEnabled" /> and <see cref="P:Visiblox.Charts.PanBehaviour.YPanEnabled" />.
            </para>
        <para>
            Two cursors can also be set to offer a visual indication: <see cref="P:Visiblox.Charts.PanBehaviour.PanAvailableCursor" /> when panning is available and <see cref="P:Visiblox.Charts.PanBehaviour.PanCursor" /> when
            panning is in progress.
            </para>
        <para>
            Note that the offsets are applied to all axes on the chart so that the axes remain in sync with one another.
            </para>
      </remarks>
    </member>
    <member name="M:Visiblox.Charts.PanBehaviour.#ctor">
      <summary>
            Constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PanBehaviour.Init">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.PanBehaviour.AllowPan(Visiblox.Charts.IAxis,System.Double)">
      <summary>
            Determine whether to allow the pan which has just taken place to proceed.
            </summary>
      <param name="axis">The axis being panned</param>
      <param name="oldOffset">When called the axis' offset will reflect the "new" offset as if this method returns true to ease effective range
            calculations.  This parameter reflects the previous offset so that drag direction can be determined where necessary.</param>
      <returns>True if the pan is to be permitted and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.PanBehaviour.AxesToPan">
      <summary>
            Returns the axes that should be panned, based on what the most recent <see cref="T:Visiblox.Charts.IBehaviourEventSource" /> was
            and the value of <see cref="P:Visiblox.Charts.PanBehaviour.RelativeAxesToPan" />.  
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.PanBehaviour.PointerEntered(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <summary>
            On pointer entered, apply the PanCursor to the chart.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PanBehaviour.PointerExited(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <summary>
            On pointer leave, set the chart cursor to null.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PanBehaviour.PointerMoved(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
      <summary>
            When the pointer is moved, pans the chart in the appropriate direction by updating the Zoom.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PanBehaviour.PointerPressed(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.PanBehaviour.PointerReleased(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
      <summary>
            When the pointer is released, the pan is completed.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PanBehaviour.PointerCaptureLost(Visiblox.Charts.IBehaviourEventSource)">
      <inheritdoc />
      <summary>
            When pointer capture is lost, the pan is completed.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PanBehaviour.KeyUp(Visiblox.Charts.KeyEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.PanBehaviour.KeyDown(Visiblox.Charts.KeyEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.PanBehaviour.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.PanBehaviour.CancelOperation">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.PanBehaviour.AllowPanBeyondDataProperty">
      <summary>
            Identifies the AllowPanBeyondData Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PanBehaviour.XPanEnabledProperty">
      <summary>
            Identifies the XPanEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PanBehaviour.YPanEnabledProperty">
      <summary>
            Identifies the YPanEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PanBehaviour.DisableAxisRenderingProperty">
      <summary>
            Identifies the DisableAxisRendering Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PanBehaviour.SetAxisRangeOnPanEndedProperty">
      <summary>
            Identifies the SetAxisRangeOnPanEnded Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PanBehaviour.LargeStepModifierKeyProperty">
      <summary>
            Identifies the LargeStepModifierKey Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PanBehaviour.LargeStepSizeProperty">
      <summary>
            Identifies the LargeStepSize Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PanBehaviour.SmallStepSizeProperty">
      <summary>
            Identifies the SmallStepSize Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PanBehaviour.RelativeAxesToPanProperty">
      <summary>
            Identifies the RelativeAxesToPan Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PanBehaviour.UpKeyProperty">
      <summary>
            Identifies the UpKey Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PanBehaviour.DownKeyProperty">
      <summary>
            Identifies the DownKey Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PanBehaviour.LeftKeyProperty">
      <summary>
            Identifies the LeftKey Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PanBehaviour.RightKeyProperty">
      <summary>
            Identifies the RightKey Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PanBehaviour.PanCursorProperty">
      <summary>
            Identifies the PanCursor Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PanBehaviour.PanAvailableCursorProperty">
      <summary>
            Identifies the PanAvailableCursor Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.PanBehaviour.PanEnded">
      <summary>
            Event indicating a pan has ended.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.PanBehaviour.PanStarted">
      <summary>
            Event indicating a pan has started.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PanBehaviour.AllowPanBeyondData">
      <summary>
            Gets or sets whether panning beyond the data is allowed. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PanBehaviour.XPanEnabled">
      <summary>
            Gets or sets whether panning in the X direction is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PanBehaviour.YPanEnabled">
      <summary>
            Gets or sets whether panning in the Y direction is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PanBehaviour.DisableAxisRendering">
      <summary>
            Gets or sets whether to disable the rendering of axes for the duration of a pan to improve performance. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PanBehaviour.SetAxisRangeOnPanEnded">
      <summary>
            Gets or sets whether set the axis ranges should be automatically set to the visible range at the end of a pan operation. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PanBehaviour.LargeStepModifierKey">
      <summary>
            Gets or sets the modifier keys activator that, if accepted, causes large steps to be taken.  Defaults to shift.  . This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PanBehaviour.LargeStepSize">
      <summary>
            Gets or sets the size in render co-ordinates of the step taken when cursor keys are pressed with the shift key. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PanBehaviour.SmallStepSize">
      <summary>
            Gets or sets the size in render co-ordinates of the step taken when cursor keys are pressed. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PanBehaviour.RelativeAxesToPan">
      <summary>
            Gets or sets the axes that will be acted upon when an event comes from an axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PanBehaviour.UpKey">
      <summary>
            Gets or sets the key pressed to pan up.  Defaults to the up arrow. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PanBehaviour.DownKey">
      <summary>
            Gets or sets the key pressed to pan down.  Defaults to the down arrow. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PanBehaviour.LeftKey">
      <summary>
            Gets or sets the key pressed to pan left.  Defaults to the left arrow. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PanBehaviour.RightKey">
      <summary>
            Gets or sets the key pressed to pan right.  Defaults to the right arrow. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PanBehaviour.PanCursor">
      <summary>
            Gets or sets the cursor used to indicate panning in progress; by default this is Cursors.Hand. To inherit the chart's cursor set this to null. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PanBehaviour.PanAvailableCursor">
      <summary>
            Gets or sets the cursor used to indicate panning is available; by default this is Cursors.Hand. To inherit the chart's cursor set this to null. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.PanHelper">
      <summary>
            Contains helper methods for calculating offset needed when panning.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PanHelper.GetXZoomOffset(System.Windows.Point,System.Windows.Point,Visiblox.Charts.IAxis,System.Windows.Controls.Canvas)">
      <summary>
            Calculates the new offset to be applied to <paramref name="xAxis" />'s Zoom in order to be panned to
            <paramref name="currentPoint" />.
            </summary>
      <param name="lastPannedPoint">The last point that's been panned to (the point that the current <paramref name="xAxis" />.Zoom.Offset represents).</param>
      <param name="currentPoint">The point to be panned to.</param>
      <param name="xAxis">The axis against which panning is done.</param>
      <param name="behaviourCanvas">The canvas from which input is being taken.</param>
      <returns>The zoom offset to be applied to the <paramref name="xAxis" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.PanHelper.GetYZoomOffset(System.Windows.Point,System.Windows.Point,Visiblox.Charts.IAxis,System.Windows.Controls.Canvas)">
      <summary>
            Calculates the new offset to be applied to <paramref name="yAxis" />'s Zoom in order to be panned to
            <paramref name="currentPoint" />.
            </summary>
      <param name="lastPannedPoint">The last point that's been panned to (the point that the current <paramref name="yAxis" />.Zoom.Offset represents).</param>
      <param name="currentPoint">The point to be panned to.</param>
      <param name="yAxis">The axis against which panning is done.</param>
      <param name="behaviourCanvas">The canvas from which input is being taken.</param>
      <returns>The zoom offset to be applied to the <paramref name="yAxis" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.PanHelper.WasPanValid(Visiblox.Charts.Chart,Visiblox.Charts.IAxis,System.Double,System.Boolean)">
      <summary>
            Determines if the most recent pan was valid
            </summary>
      <param name="chart">The chart containing <paramref name="axis" />.</param>
      <param name="axis">The axis against which panning is done.</param>
      <param name="oldOffset">The zoom offset of <paramref name="axis" /> before the pan.</param>
      <param name="isXAxis">Indicates whether or not the axis is an X axis.</param>
      <returns>True if and only if the pan was valid, false otherwise.</returns>
    </member>
    <member name="T:Visiblox.Charts.PointerButton">
      <summary>
            An enumeration of possible pointer buttons
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PointerButton.None">
      <summary>
            No mouse button is currently being pressed.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PointerButton.Default">
      <summary>
            The default mouse button is being pressed, typically the left button.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PointerButton.Right">
      <summary>
            The right button is being pressed.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PointerButton.Middle">
      <summary>
            The middle button is being pressed (not scrolled).  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PointerButton.XButton1">
      <summary>
            XButton1 is being pressed.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PointerButton.XButton2">
      <summary>
            XButton2 is being pressed.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.PointerEventContext">
      <summary>
            A class for representing a pointer event.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PointerEventContext.#ctor">
      <summary>
            Default Constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PointerEventContext.#ctor(System.Windows.Point,System.Windows.Input.ModifierKeys,Visiblox.Charts.PointerButton,System.Int32)">
      <summary>
            Constructor.
            </summary>
      <param name="point">The point where the event occurred.</param>
      <param name="modifierKeys">The modifier keys in use when the event was received.</param>
      <param name="pointerButton">The pointer button that was used to raise the event</param>
      <param name="pointerWheelDelta">The delta on any pointer wheel movement</param>
    </member>
    <member name="M:Visiblox.Charts.PointerEventContext.AsPointerEventContext">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.PointerEventContext.AsKeyEventContext">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.PointerEventContext.AsGestureEventContext">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.PointerEventContext.Point">
      <summary>
            The point, in render co-ordinates, where the event occurred.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PointerEventContext.ModifierKeys">
      <summary>
            Any keyboard modifiers that were in use when the event was received.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PointerEventContext.PointerButton">
      <summary>
            The pointer button, if applicable, that was used.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PointerEventContext.PointerWheelDelta">
      <summary>
            The amount by which the pointer wheel has been moved.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ProxyBehaviour">
      <summary>
            This behaviour proxies events to other behaviours.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ProxyBehaviour.ProxyTargetsProperty">
      <summary>
            Identifies the ProxyTargets Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.#ctor">
      <summary>
            Constructs a new ProxyBehaviour.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.Init">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.PointerDoubleTapped(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.PointerEntered(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.PointerExited(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.PointerMoved(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.PointerPressed(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.PointerReleased(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.PointerWheelChanged(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.PointerCaptureLost(Visiblox.Charts.IBehaviourEventSource)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.KeyDown(Visiblox.Charts.KeyEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.KeyUp(Visiblox.Charts.KeyEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.GestureStarted(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.GestureStarting(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.GestureInertiaStarting(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.GestureInProgress(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.GestureEnded(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.GestureEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ProxyBehaviour.BehaviourCanvasSizeChanged(Visiblox.Charts.IBehaviourEventSource,System.Windows.SizeChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ProxyBehaviour.ProxyTargets">
      <summary>
            Gets or sets the collection of <see cref="T:Visiblox.Charts.IBehaviour" />s that events will be forwarded to. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RulerBehaviour">
      <summary>
            A behaviour that allows the user to measure parts of a plot area by dragging a 'ruler'
            </summary>
      <remarks>
        <para>The ruler is placed using single clicks.
            This allows the zoom and ruler behaviour to be used in conjunction. The first click 
            begins drawing the ruler. After that, the ruler will follow the mouse. The second click 'locks' 
            the ruler in its current position and a third clears the ruler. Once the ruler has been locked, 
            the sides can still be dragged into new positions if <see cref="P:Visiblox.Charts.RulerBehaviour.AllowResize" /> is set to true.</para>
        <para>Snapping may be enabled by setting <see cref="P:Visiblox.Charts.RulerBehaviour.SnapToPoints" /> to true.
            If you are measuring the xaxis, it will snap to points on the xaxis and similarly, if
            you are measuring the y axis, it will snap to points on the y axis. When measuring both 
            axes, it will snap to the x axis, however enabling <see cref="P:Visiblox.Charts.RulerBehaviour.AllowResize" /> allows you
            to drag and snap to the y axis.</para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.RulerRectangle" />
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.OnMeasuringStarted(System.Object,System.EventArgs)">
      <summary>
            Raises the <see cref="E:Visiblox.Charts.RulerBehaviour.MeasuringStarted" /> event with the given <see cref="T:System.EventArgs" /> and <paramref name="sender" />, if defined.  
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.OnMeasuringEnded(System.Object,System.EventArgs)">
      <summary>
            Raises the <see cref="E:Visiblox.Charts.RulerBehaviour.MeasuringEnded" /> event with the given <see cref="T:System.EventArgs" /> and <paramref name="sender" />, if defined.  
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.Init">
      <summary>
            Initialises the measure behaviour.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.PointerPressed(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.PointerReleased(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.CancelOperation">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.PointerMoved(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.PointerMovedInternal(System.Windows.Point)">
      <summary>
            Called by <see cref="M:Visiblox.Charts.RulerBehaviour.PointerMoved(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)" /> if the given <see cref="T:Visiblox.Charts.PointerEventContext" /> is accepted.  
            </summary>
      <param name="point">
      </param>
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.StartMeasuring(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <summary>
            Begin drawing the ruler
            </summary>
      <param name="context">The pointer event context.</param>
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.BehaviourCanvasSizeChanged(Visiblox.Charts.IBehaviourEventSource,System.Windows.SizeChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.AxisEventRaised(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventRelayEventArgs)">
      <summary>
            Invoked when an event is raised by one of the axes.
            </summary>
      <param name="axis">The axis which raised the event.</param>
      <param name="e">The event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.OnIsEnabledPropertyChanged">
      <summary>
            Resets the ruler when the behaviour is not enabled.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.GetPointsWithinRange">
      <summary>
            Returns all of the points within the ruler's range in all series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RulerBehaviour.GetPointsWithinRange(Visiblox.Charts.IChartSeries)">
      <summary>
            Returns all of the points within the ruler's range, within a specified series.
            </summary>
      <param name="series">The series to search in</param>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.XAxisRangeLabelFormatStringProperty">
      <summary>
            Identifies the XAxisRangeLabelFormatString Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.YAxisRangeLabelFormatStringProperty">
      <summary>
            Identifies the YAxisRangeLabelFormatString Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.XAxisSizeLabelFormatStringProperty">
      <summary>
            Identifies the XAxisSizeLabelFormatString Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.YAxisSizeLabelFormatStringProperty">
      <summary>
            Identifies the YAxisSizeLabelFormatString Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.SnapToPointsProperty">
      <summary>
            Identifies the SnapToPoints Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.ScaleWithZoomProperty">
      <summary>
            Identifies the ScaleWithZoom Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.AllowResizeProperty">
      <summary>
            Identifies the AllowResize Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.RulerRectangleStyleProperty">
      <summary>
            Identifies the RulerRectangleStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.MeasureOnXAxisEnabledProperty">
      <summary>
            Identifies the MeasureOnXAxisEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.MeasureOnYAxisEnabledProperty">
      <summary>
            Identifies the MeasureOnYAxisEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.ShowRangeLabelsProperty">
      <summary>
            Identifies the ShowRangeLabels Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.ShowXRangeLabelsProperty">
      <summary>
            Identifies the ShowXRangeLabels Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.ShowYRangeLabelsProperty">
      <summary>
            Identifies the ShowYRangeLabels Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.ShowSizeLabelsProperty">
      <summary>
            Identifies the ShowSizeLabels Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.ShowXSizeLabelProperty">
      <summary>
            Identifies the ShowXSizeLabel Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.ShowYSizeLabelProperty">
      <summary>
            Identifies the ShowYSizeLabel Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.HideXLabelsProperty">
      <summary>
            Identifies the HideXLabels Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerBehaviour.HideYLabelsProperty">
      <summary>
            Identifies the HideYLabels Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.RulerBehaviour.MeasuringStarted">
      <summary>
            Event fired when measuring begins.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.RulerBehaviour.MeasuringEnded">
      <summary>
            Event fired when measuring ends.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.MinX">
      <summary>
            Minimum x value
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.MaxX">
      <summary>
            Maximum x value
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.MinY">
      <summary>
            Minimum Y value
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.MaxY">
      <summary>
            Maximum Y value
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.XAxisRangeLabelFormatString">
      <summary>
            Gets or sets the format string to use for x axis range labels. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.YAxisRangeLabelFormatString">
      <summary>
            Gets or sets the format string to use for y axis range labels. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.XAxisSizeLabelFormatString">
      <summary>
            Gets or sets the format string to use for x axis size labels. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.YAxisSizeLabelFormatString">
      <summary>
            Gets or sets the format string to use for y axis size labels. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.SnapToPoints">
      <summary>
            Gets or sets whether to snap to points of a series or not. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.ScaleWithZoom">
      <summary>
            Gets or sets whether to scale the ruler with the data as it is zoomed. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.AllowResize">
      <summary>
            Gets or sets whether the ruler can be dragged once it is placed. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.RulerRectangleStyle">
      <summary>
            Gets or sets the style for the ruler. This Style should have a TargetType of RulerRectangle. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.MeasureOnXAxisEnabled">
      <summary>
            Gets or sets whether measuring on the X axis is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.MeasureOnYAxisEnabled">
      <summary>
            Gets or sets whether measuring on the Y axis is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.ShowRangeLabels">
      <summary>
            Gets or sets whether to show the labels of the measured ranges or not. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.ShowXRangeLabels">
      <summary>
            Gets or sets whether the X range labels are shown. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.ShowYRangeLabels">
      <summary>
            Gets or sets whether the Y range labels are shown. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.ShowSizeLabels">
      <summary>
            Gets or sets whether to show the labels of the measured sizes or not. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.ShowXSizeLabel">
      <summary>
            Gets or sets whether the X size labels are shown. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.ShowYSizeLabel">
      <summary>
            Gets or sets whether the Y size labels are shown. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.HideXLabels">
      <summary>
            Gets or sets whether the X value labels are hidden. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerBehaviour.HideYLabels">
      <summary>
            Gets or sets whether the Y value labels are hidden. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RulerRectangle">
      <summary>
            A control which is used to render a region which the user selects to measure.
            </summary>
      <remarks>
        <para>
            Provides a visual indication of the validity of the currently selected zoom region.
            </para>
        <para>
          <see cref="T:Visiblox.Charts.RulerBehaviour" /> uses RulerRectangle to draw a rectangle representing the
            area to be measured on the chart and updates it on every mouse move when measuring.</para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.RulerBehaviour" />
    </member>
    <member name="M:Visiblox.Charts.RulerRectangle.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RulerRectangle.OnApplyTemplate">
      <summary>
             Sets up the graphical components of the control.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RulerRectangle.SubscribeToDragHandleEvents">
      <summary>
            Subscribes to MouseLeftButtonDown events on all four drag handles.  
            Override if you want drag to be activated by a different button or some other event.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RulerRectangle.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.RulerRectangle.BorderStyleProperty">
      <summary>
            Identifies the BorderStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerRectangle.RangeLabelStyleProperty">
      <summary>
            Identifies the RangeLabelStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerRectangle.SizeLabelStyleProperty">
      <summary>
            Identifies the SizeLabelStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerRectangle.LabelBorderStyleProperty">
      <summary>
            Identifies the LabelBorderStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerRectangle.LineStyleProperty">
      <summary>
            Identifies the LineStyle Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RulerRectangle.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.RulerRectangle.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.RulerRectangle.BorderStyle">
      <summary>
            Gets or sets the border style for the ruler.  TargetType should be Border. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerRectangle.RangeLabelStyle">
      <summary>
            Gets or sets the label style for the min/max labels.  TargetType should be TextBlock. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerRectangle.SizeLabelStyle">
      <summary>
            Gets or sets the label style for the size labels.  TargetType should be TextBlock. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerRectangle.LabelBorderStyle">
      <summary>
            Gets or sets the border style for the ruler.  TargetType should be Border. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RulerRectangle.LineStyle">
      <summary>
            Gets or sets width/height line style.  TargetType should be Line. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.RulerRectangle.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RulerSide">
      <summary>
            An enumeration to describe which side of the Ruler is currently being used.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerSide.Left">
      <summary>
            Left side.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerSide.Right">
      <summary>
            Right side.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerSide.Top">
      <summary>
            Top side.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RulerSide.Bottom">
      <summary>
            Bottom side.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AllConditionsBehaviourActivator">
      <inheritdoc />
      <remarks>
             Accepts an <see cref="T:Visiblox.Charts.IEventContext" /> if it would be accepted by all of the <see cref="T:Visiblox.Charts.IBehaviourActivator" />s in <see cref="P:Visiblox.Charts.AllConditionsBehaviourActivator.Conditions" />.  
             </remarks>
    </member>
    <member name="T:Visiblox.Charts.IBehaviourActivator">
      <summary>
            An interface for an optional activator that can be used to determine
            if a particular event should be processed by a behaviour.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IBehaviourActivator.AcceptEvent(Visiblox.Charts.IEventContext)">
      <summary>
            Returns true if the behaviour should accept this event based on
            the provided behaviour context.
            </summary>
      <param name="context">The appropriate context for the event.</param>
      <returns>Returns true if the event should be accepted, false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.AllConditionsBehaviourActivator.AcceptEvent(Visiblox.Charts.IEventContext)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AllConditionsBehaviourActivator.Conditions">
      <summary>
            The set of conditions, all of which need to be satisfied for an event source to be accepted.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AnyConditionsBehaviourActivator">
      <inheritdoc />
      <remarks>
             Accepts an <see cref="T:Visiblox.Charts.IEventContext" /> if it would be accepted by any one of the <see cref="T:Visiblox.Charts.IBehaviourActivator" />s in <see cref="P:Visiblox.Charts.AnyConditionsBehaviourActivator.Conditions" />.  
             </remarks>
    </member>
    <member name="M:Visiblox.Charts.AnyConditionsBehaviourActivator.AcceptEvent(Visiblox.Charts.IEventContext)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AnyConditionsBehaviourActivator.Conditions">
      <summary>
            The set of conditions of which one needs to be satisfied for an event source to be accepted.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DefaultBehaviourActivator">
      <summary>
            The default behaviour activator, the activator will return true if, and only if,
            no other modifiers have been activated.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DefaultBehaviourActivator.AcceptEvent(Visiblox.Charts.IEventContext)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.DragBehaviourActivator">
      <summary>
            Accepts only drag gesture events.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DragBehaviourActivator.AcceptEvent(Visiblox.Charts.IEventContext)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.EmptyContextBehaviourActivator">
      <inheritdoc />
      <remarks>
             Accepts an <see cref="T:Visiblox.Charts.IEventContext" /> if <see cref="T:Visiblox.Charts.PointerEventContext" />, <see cref="T:Visiblox.Charts.KeyEventContext" /> and <see cref="T:Visiblox.Charts.GestureEventContext" /> are all null.  
             </remarks>
    </member>
    <member name="M:Visiblox.Charts.EmptyContextBehaviourActivator.AcceptEvent(Visiblox.Charts.IEventContext)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.ModifierKeysBehaviourActivator">
      <summary>
            Activates a behaviour based on any defined combination of control keys.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ModifierKeysBehaviourActivator.AcceptEvent(Visiblox.Charts.IEventContext)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ModifierKeysBehaviourActivator.AltKey">
      <summary>
            Specifies if the Alt Key must be pressed for the event to be accepted.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ModifierKeysBehaviourActivator.ControlKey">
      <summary>
            Specifies if the Control Key must be pressed for the event to be accepted.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ModifierKeysBehaviourActivator.ShiftKey">
      <summary>
            Specifies if the Shift Key must be pressed for the event to be accepted.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ModifierKeysBehaviourActivator.WindowsKey">
      <summary>
            Specifies if the Windows Key must be pressed for the event to be accepted.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.PinchBehaviourActivator">
      <summary>
            Accepts only pinch gesture events.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PinchBehaviourActivator.AcceptEvent(Visiblox.Charts.IEventContext)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.PointerButtonBehaviourActivator">
      <summary>
            Activates a behaviour based on the state of a pointer button.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PointerButtonBehaviourActivator.#ctor">
      <summary>
            Default Constructor
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PointerButtonBehaviourActivator.AcceptEvent(Visiblox.Charts.IEventContext)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.PointerButtonBehaviourActivator.PointerButton">
      <summary>
            The button that must be defined in the behaviour state context in order
            for the event to be accepted.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PointerButtonBehaviourActivator.AcceptPointerWheelEvents">
      <summary>
            Determines whether input pointer wheel events should be accepted by this activator regardless of button state.  If set to false
            wheel events will only be forwarded if the appropriate PointerButton is pressed, if true wheel events will always be 
            pressed.  Defaults to true.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.PointerWheelBehaviourActivator">
      <summary>
            Accepts contexts in which the pointer wheel has been moved.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PointerWheelBehaviourActivator.AcceptEvent(Visiblox.Charts.IEventContext)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.StringToActivatorConverter">
      <summary>
            A TypeConverter for converting a string to a behaviour activator instance.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.StringToActivatorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <list type="table">
          <listheader>
            <term>String</term>
            <description>Resulting <see cref="T:Visiblox.Charts.IBehaviourActivator" /></description>
          </listheader>
          <item>
            <term>Control or Ctrl</term>
            <description>
              <code>ModifierKeysBehaviourActivator() { ControlKey = true }</code>
            </description>
          </item>
          <item>
            <term>Shift</term>
            <description>
              <code>ModifierKeysBehaviourActivator() { ShiftKey = true }</code>
            </description>
          </item>
          <item>
            <term>Alt</term>
            <description>
              <code>ModifierKeysBehaviourActivator() { AltKey = true }</code>
            </description>
          </item>
          <item>
            <term>Windows</term>
            <description>
              <code>ModifierKeysBehaviourActivator() { WindowsKey = true }</code>
            </description>
          </item>
          <item>
            <term>ControlShift</term>
            <description>
              <code>ModifierKeysBehaviourActivator() { ControlKey = true, ShiftKey = true }</code>
            </description>
          </item>
          <item>
            <term>CtrlShift</term>
            <description>
              <code>ModifierKeysBehaviourActivator() { ControlKey = true, ShiftKey = true }</code>
            </description>
          </item>
          <item>
            <term>LeftMouse</term>
            <description>
              <code>PointerButtonBehaviourActivator() { PointerButton = PointerButton.Default }</code>
            </description>
          </item>
          <item>
            <term>RightMouse</term>
            <description>
              <code>PointerButtonBehaviourActivator() { PointerButton = PointerButton.Right }</code>
            </description>
          </item>
          <item>
            <term>MiddleMouse</term>
            <description>
              <code>PointerButtonBehaviourActivator() { PointerButton = PointerButton.Middle }</code>
            </description>
          </item>
          <item>
            <term>X1Mouse</term>
            <description>
              <code>PointerButtonBehaviourActivator() { PointerButton = PointerButton.XButton1 }</code>
            </description>
          </item>
          <item>
            <term>X2Mouse</term>
            <description>
              <code>PointerButtonBehaviourActivator() { PointerButton = PointerButton.XButton2 }</code>
            </description>
          </item>
          <item>
            <term>Wheel</term>
            <description>PointerWheelBehaviourActivator()</description>
          </item>
        </list>
      </summary>
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StringToActivatorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.Trackball">
      <summary>
            Represents a track-ball which is the visual representation of the data point closest to the mouse
            in a <see cref="T:Visiblox.Charts.TrackballBehaviour" />.
            </summary>
      <remarks>
        <para>
            The Trackball may be an ellipse, triangle, or other indicator as defined by the control template used.
            By the implementation of <see cref="T:Visiblox.Charts.TrackballBehaviour" />, this is defined per-series
            by <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.TrackballTemplate" />.
            </para>
        <para>
          <see cref="T:Visiblox.Charts.TrackballBehaviour" /> uses Trackball to draw a track-ball on the chart
            and update it on every mouse move.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.TrackballBehaviour" />
    </member>
    <member name="M:Visiblox.Charts.Trackball.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Trackball.OnApplyTemplate">
      <summary>
            Initialise the UI elements.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Trackball.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.Trackball.TrackballStyleProperty">
      <summary>
            Identifies the TrackballStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Trackball.CurrentPointProperty">
      <summary>
            Identifies the CurrentPoint Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Trackball.SeriesProperty">
      <summary>
            Identifies the Series Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Trackball.RenderPointProperty">
      <summary>
            Identifies the RenderPoint Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Trackball.AutoRotateProperty">
      <summary>
            Identifies the AutoRotate Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Trackball.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.Trackball.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.Trackball.TrackballStyle">
      <summary>
            Gets or sets the style of the trackball element. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Trackball.CurrentPoint">
      <summary>
            Gets or sets the current point. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Trackball.Series">
      <summary>
            Gets or sets the associated series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Trackball.RenderPoint">
      <summary>
            Gets or sets the current render point(s) - this is the current point converted to display coordinates. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Trackball.AutoRotate">
      <summary>
            For bar and column charts determines whether the trackball will be auto-rotated for negative values. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.Trackball.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.TrackballBehaviour">
      <summary>
            A behaviour that displays a <see cref="T:Visiblox.Charts.Trackball" /> at the closest data-point(s) to the mouse pointer.
            </summary>
      <remarks>
        <para>TrackballBehaviour displays a <see cref="T:Visiblox.Charts.Trackball" /> on each series indicating the data point which is closest (considering the <see cref="P:Visiblox.Charts.TrackballBehaviour.TrackingMode" /> in operation)
            to the mouse pointer.
            By default a trackball is added to every series on the chart, however if series are added to the behaviour's <see cref="P:Visiblox.Charts.TrackballBehaviour.Series" /> collection, only those series will display
            trackballs.</para>
        <para>The point(s) indicated by the trackball are exposed via the <see cref="P:Visiblox.Charts.TrackballBehaviour.CurrentPoints" /> collection. In common usage, the current point of the trackball
            will be bound to some visual indication on the screen (see the example below).</para>
        <para>The visual appearance of a particular trackball is specified by the associated series. Any series extending <see cref="T:Visiblox.Charts.ChartSeriesCommonBase" />
            specifies a <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.TrackballTemplate" /> and <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.TrackballStyle" />. The series
            will specify a suitable default appearance for the trackball, but by setting these properties it is possible to customise the trackball of a particular series (examples
            are given under <see cref="T:Visiblox.Charts.ChartSeriesCommonBase" />).</para>
      </remarks>
      <example>Assume there is a chart containing some series. To display the trackball's position, the following XAML snippet might be used:
            <code source="Help\Charts\IncludedCode\TrackballExample.xml" lang="XAML" /></example>
    </member>
    <member name="M:Visiblox.Charts.TrackballBehaviour.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TrackballBehaviour.PointerMoved(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
      <summary>
            Update the <see cref="T:Visiblox.Charts.Trackball" /> to the nearest <see cref="T:System.Windows.Point" /> when the pointer is moved.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TrackballBehaviour.PointerMovedInternal(System.Windows.Point)">
      <summary>
            Called by <see cref="M:Visiblox.Charts.TrackballBehaviour.PointerMoved(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)" /> if the given <see cref="T:Visiblox.Charts.PointerEventContext" /> was accepted.
            </summary>
      <param name="point">
      </param>
    </member>
    <member name="M:Visiblox.Charts.TrackballBehaviour.PointerExited(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.TrackballBehaviour.KeyUp(Visiblox.Charts.KeyEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.TrackballBehaviour.KeyDown(Visiblox.Charts.KeyEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.TrackballBehaviour.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.TrackballBehaviour.Init">
      <summary>
            Initialises the trackball behaviour.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TrackballBehaviour.OnIsEnabledPropertyChanged">
      <summary>
            Hides the trackball when the behaviour is not enabled.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TrackballBehaviour.UpdateTrackball(System.Windows.Point,Visiblox.Charts.Trackball)">
      <summary>
            Update the <see cref="T:Visiblox.Charts.Trackball" /> to a new mouse position.
            </summary>
      <param name="position">Position to move the trackball to.</param>
      <param name="trackball">Trackball to update.</param>
    </member>
    <member name="M:Visiblox.Charts.TrackballBehaviour.LocateClosestPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.IChartSeries)">
      <summary>
            Locate the closest <see cref="T:Visiblox.Charts.IDataPoint" /> in the <see cref="T:Visiblox.Charts.IChartSeries" /> to <paramref name="mousePoint" />.
            </summary>
      <param name="mousePoint">The mouse position translated to an <see cref="T:Visiblox.Charts.IDataPoint" />.</param>
      <param name="series">The series.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.TrackballBehaviour.BehaviourCanvasSizeChanged(Visiblox.Charts.IBehaviourEventSource,System.Windows.SizeChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.TrackballBehaviour.TrackingModeProperty">
      <summary>
            Identifies the TrackingMode Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TrackballBehaviour.SnapModeProperty">
      <summary>
            Identifies the SnapMode Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TrackballBehaviour.HideTrackballsOnPointerLeaveProperty">
      <summary>
            Identifies the HideTrackballsOnPointerLeave Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TrackballBehaviour.TrackballTypeProperty">
      <summary>
            Identifies the TrackballType Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TrackballBehaviour.CurrentPoints">
      <summary>
            Gets or sets the current collection of <see cref="T:Visiblox.Charts.IDataPoint" /> objects at the trackball position.
            </summary>
      <remarks>When the mouse has moved on the chart to indicate a data point, CurrentPoints contains one data point for each
            series which has a trackball. These are returned in the order that the points are added to <see cref="P:Visiblox.Charts.TrackballBehaviour.Series" />; if
            as by default all series have trackballs (<see cref="P:Visiblox.Charts.TrackballBehaviour.Series" /> is empty), the current points are returned in the order
            the series were added to the chart (see <see cref="P:Visiblox.Charts.Chart.Series" />).</remarks>
    </member>
    <member name="P:Visiblox.Charts.TrackballBehaviour.Series">
      <summary>
            Series which have trackballs enabled. If no series are added to this collection and the TrackballBehaviour is enabled, ALL series will have trackballs enabled.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TrackballBehaviour.TrackingMode">
      <summary>
            Gets or sets the mode of pointer-tracking used by the trackball.  The TrackingMode should be consistent with the Comparison delegate used to sort the DataSeries of series on the chart.  . This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TrackballBehaviour.SnapMode">
      <summary>
            Gets or sets the mode of snap to points used by the trackball. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TrackballBehaviour.HideTrackballsOnPointerLeave">
      <summary>
            Gets or sets whether to hide the trackballs on the chart when the mouse leaves the chart area. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TrackballBehaviour.TrackballType">
      <summary>
            Gets or sets the type of the Trackball used.  This should either be or extend Trackball.  . This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.TrackballFactory">
      <summary>
            This factory is used by <see cref="T:Visiblox.Charts.TrackballBehaviour" /> to construct its <see cref="T:Visiblox.Charts.Trackball" />s.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TrackballFactory.ConstructTrackball">
      <summary>
            Constructs a <see cref="T:Visiblox.Charts.Trackball" /> or type <see cref="P:Visiblox.Charts.TrackballFactory.TrackballType" />.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Visiblox.Charts.TrackballFactory.TrackballType">
      <summary>
            This type should either be or extend <see cref="T:Visiblox.Charts.Trackball" />.
            Any extensions of <see cref="T:Visiblox.Charts.Trackball" /> must have an empty constructor.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.TrackingPointPattern">
      <summary>
            Indicates what algorithm should be used to calculate the nearest point(s) on the chart to the cursor.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TrackingPointPattern.LineOnX">
      <summary>
            Nearest point to the line running through the X coordinate of the cursor
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TrackingPointPattern.LineOnY">
      <summary>
            Nearest point to the line running through the Y coordinate of the cursor
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ZoomBehaviour">
      <summary>
            A behaviour that allows the user to zoom the chart by dragging a
            rectangular region across the plot area.
            </summary>
      <remarks>
        <para>By default the zoom is animated. This can be turned off by setting <see cref="P:Visiblox.Charts.ZoomBehaviour.AnimationEnabled" /> to false.
            The animation duration can be controlled by setting the <see cref="P:Visiblox.Charts.ZoomBehaviour.AnimationDuration" /> property.</para>
        <para>The style of the rectangle drawn to indicate the zoom area can be changed by setting the <see cref="P:Visiblox.Charts.ZoomBehaviour.ZoomRectangleStyle" /> property.
            The zoom rectangle can be modified more extensively via the <see cref="P:Visiblox.Charts.ZoomBehaviour.ZoomRectangleTemplate" /> property.</para>
        <para>
            Note that the zoom is applied to all axes on the chart so that the axes remain in sync with one another.
            Axes can be excluded from zooming if they are added to the <see cref="P:Visiblox.Charts.ZoomBehaviour.ExcludedAxes" /><see cref="T:Visiblox.Charts.AxisCollection" /> or
            if zooming in a given direction is disabled with <see cref="P:Visiblox.Charts.ZoomBehaviour.XZoomEnabled" /> or <see cref="P:Visiblox.Charts.ZoomBehaviour.YZoomEnabled" />.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.ZoomRectangle" />
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.OnIsEnabledPropertyChanged">
      <summary>
            Handle changes to IsEnabled property
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.PointerDoubleTapped(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
      <summary>
            Override of <see cref="T:Visiblox.Charts.BehaviourBase" /> that handles a pointer double tap.
            If the chart is zoomed this will un-zoom the chart.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.PointerExited(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.ResetZoom(Visiblox.Charts.IBehaviourEventSource)">
      <summary>
            Resets all zooms as if the reset event (e.g. a double-click) had been sent from the given <paramref name="sender" />.
            If no <paramref name="sender" /> is specified then all zooms are reset.
            </summary>
      <param name="sender">
      </param>
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.AxesToZoom(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.AxisSubset)">
      <summary>
            Returns the axes that should be zoomed, given the <paramref name="sender" /> of the event
            and the subset of axes specified in <paramref name="relativeAxesToZoom" /></summary>
      <param name="sender">
      </param>
      <param name="relativeAxesToZoom">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.PointerPressed(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
      <summary>
            Override of <see cref="T:Visiblox.Charts.BehaviourBase" /> that handles a pointer press press.
            This initiates the selection of the area to be zoomed into if the mouse can
            be captured (i.e. the chart is enabled).
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.PointerMoved(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
      <summary>
            Override of <see cref="T:Visiblox.Charts.BehaviourBase" /> that handles the pointer being moved;
            therefore changing the area selected for zooming. The pointer dragged must have
            been initiated in the plot area.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.PointerReleased(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
      <summary>
            Override of <see cref="T:Visiblox.Charts.BehaviourBase" /> that handles the pointer being
            released. If the pointer was initially pressed in the plot area then the zoom is
            initiated; it is ignored otherwise.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.PointerWheelChanged(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
      <summary>
             Override of <see cref="T:Visiblox.Charts.BehaviourBase" /> that handles a pointer wheel scroll.
             If the <see cref="P:Visiblox.Charts.ZoomBehaviour.ZoomMode" /> dictates that the mouse wheel should zoom, this method will scale
             by <see cref="P:Visiblox.Charts.ZoomBehaviour.ScaleChangePerInteraction" /> for each mouse wheel rotation around the cursor's current position.
             </summary>
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.PointerCaptureLost(Visiblox.Charts.IBehaviourEventSource)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.KeyUp(Visiblox.Charts.KeyEventContext)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.CancelOperation">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.ZoomTo(System.Collections.Generic.IDictionary{Visiblox.Charts.IAxis,Visiblox.Charts.Zoom},System.Collections.Generic.IDictionary{Visiblox.Charts.IAxis,Visiblox.Charts.Zoom},System.Double)">
      <summary>
            Zooms to the given scales and offsets.
            </summary>
      <remarks>The zoom is animated according to <see cref="P:Visiblox.Charts.ZoomBehaviour.AnimationDuration" /> and <see cref="P:Visiblox.Charts.ZoomBehaviour.AnimationEnabled" />.</remarks>
      <param name="xAxisZooms">The X axes to zoom.</param>
      <param name="yAxisZooms">The Y axes to zoom.</param>
      <param name="animationDuration">The time, in seconds, for the zoom animation to take place.  </param>
      <returns>Whether the zoom has occurred.</returns>
      <seealso cref="T:Visiblox.Charts.Zoom" />
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.CanZoomTo(System.Collections.Generic.IEnumerable{Visiblox.Charts.Zoom})">
      <summary>
            Determines whether it is possible for the <see cref="T:Visiblox.Charts.Chart" /> to be zoomed to the <see cref="T:Visiblox.Charts.Zoom" />s specified in <paramref name="zooms" />.
            </summary>
      <param name="zooms">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.CanZoomTo(System.Collections.Generic.IEnumerable{Visiblox.Charts.IAxis},System.Double,System.Double)">
      <summary>
            Determines whether it is possible for the <see cref="T:Visiblox.Charts.Chart" /> to be zoomed such that
            the render positions <paramref name="posOne" /> and <paramref name="posTwo" /> fill each of the axes in <paramref name="axes" />.
            </summary>
      <param name="axes">
      </param>
      <param name="posOne">
      </param>
      <param name="posTwo">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.ZoomToPoints(Visiblox.Charts.IBehaviourEventSource,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Zooms to the rectangle defined by the given render points within chart's plot area.
            </summary>
      <remarks>The zoom is animated according to <see cref="P:Visiblox.Charts.ZoomBehaviour.AnimationDuration" /> and <see cref="P:Visiblox.Charts.ZoomBehaviour.AnimationEnabled" />.</remarks>
      <param name="sender">The source of the zoom request.</param>
      <param name="xPosOne">X1 point of the zoom rectangle.</param>
      <param name="yPosOne">Y1 point of the zoom rectangle.</param>
      <param name="xPosTwo">X2 point of the zoom rectangle.</param>
      <param name="yPosTwo">Y2 point of the zoom rectangle.</param>
      <returns>Whether the zoom has occurred.</returns>
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.Init">
      <summary>
            Initialises the zoom behaviour.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.OnZoomStarted(System.Object,System.EventArgs)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.ZoomBehaviour.ZoomStarted" /> event with the given parameters, if defined.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Visiblox.Charts.ZoomBehaviour.OnZoomEnded(System.Object,System.EventArgs)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.ZoomBehaviour.ZoomEnded" /> event with the given parameters, if defined.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="F:Visiblox.Charts.ZoomBehaviour.ZoomRectangleStyleProperty">
      <summary>
            Identifies the ZoomRectangleStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomBehaviour.ZoomRectangleTemplateProperty">
      <summary>
            Identifies the ZoomRectangleTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomBehaviour.AnimationEnabledProperty">
      <summary>
            Identifies the AnimationEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomBehaviour.AnimationDurationProperty">
      <summary>
            Identifies the AnimationDuration Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomBehaviour.ZoomModeProperty">
      <summary>
            Identifies the ZoomMode Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomBehaviour.ScaleChangePerInteractionProperty">
      <summary>
            Identifies the ScaleChangePerInteraction Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomBehaviour.DisableAxisRenderingProperty">
      <summary>
            Identifies the DisableAxisRendering Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomBehaviour.DisableDataLabelRenderingProperty">
      <summary>
            Identifies the DisableDataLabelRendering Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomBehaviour.XZoomEnabledProperty">
      <summary>
            Identifies the XZoomEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomBehaviour.YZoomEnabledProperty">
      <summary>
            Identifies the YZoomEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomBehaviour.RestrictZoomOutToInitialRangeProperty">
      <summary>
            Identifies the RestrictZoomOutToInitialRange Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomBehaviour.RelativeAxesToZoomProperty">
      <summary>
            Identifies the RelativeAxesToZoom Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.ZoomRectangle">
      <summary>
            Gets the control which is the visual representation
            of the zoom behaviour.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.ExcludedAxes">
      <summary>
            The set of Axis that should be excluded from any zoom operation.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.XZoomPossible">
      <summary>
            True if the current values of <see cref="P:Visiblox.Charts.ZoomBehaviour.XZoomPossible" /> and <see cref="P:Visiblox.Charts.ZoomBehaviour.ExcludedAxes" /> mean that there is at least one horizontal axis we can zoom on.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.YZoomPossible">
      <summary>
            True if the current values of <see cref="P:Visiblox.Charts.ZoomBehaviour.YZoomPossible" /> and <see cref="P:Visiblox.Charts.ZoomBehaviour.ExcludedAxes" /> mean that there is at least one vertical axis we can zoom on.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.ZoomBehaviour.ZoomStarted">
      <summary>
            Event fired when zooming begins.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.ZoomBehaviour.ZoomEnded">
      <summary>
            Event fired when zooming ends.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.ZoomRectangleStyle">
      <summary>
            Gets or sets the style of the zoom. This Style should have a TargetType of ZoomRectangle. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.ZoomRectangleTemplate">
      <summary>
            Gets or sets the style of the zoom. This ControlTemplate should have a TargetType of ZoomRectangle. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.AnimationEnabled">
      <summary>
            Gets or sets whether animation is enabled when zooming. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.AnimationDuration">
      <summary>
            Gets or sets the duration of the zooming animation in seconds. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.ZoomMode">
      <summary>
            Gets or sets the ZoomMode of the behaviour. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.ScaleChangePerInteraction">
      <summary>
            Gets or sets the amount to change the scale for each interaction. The default is to zoom in to show 20% less data each interaction. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.DisableAxisRendering">
      <summary>
            Gets or sets whether to disable the rendering of axes for the duration of a zoom to improve performance. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.DisableDataLabelRendering">
      <summary>
            Gets or sets whether to disable the rendering of data labels for the duration of a zoom to improve performance and avoid the consequences of dropped events. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.XZoomEnabled">
      <summary>
            Gets or sets whether zooming in the X direction is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.YZoomEnabled">
      <summary>
            Gets or sets whether zooming in the Y direction is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.RestrictZoomOutToInitialRange">
      <summary>
            Gets or sets whether zooming out using the mouse wheel is restricted to the original range of the axes. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomBehaviour.RelativeAxesToZoom">
      <summary>
            Gets or sets the axes that will be acted upon when an event comes from an axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ZoomHelper">
      <summary>
            Contains helper methods for manipulating the zoom.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ZoomHelper.CanZoomTo(Visiblox.Charts.Chart,Visiblox.Charts.IAxis,Visiblox.Charts.IAxis,System.Double,System.Double)">
      <summary>
            Decides if zooming is allowed between the two points on the given axes.
            </summary>
      <remarks>
            Zooming is only allowed to a certain extent in Silverlight due to a problem when drawing very long paths.
            In WPF zooming is also limited to a more generous extent as zooming too deep would result in shapes not being drawn correctly due to double rounding issues.
            </remarks>
      <param name="chart">The chart.</param>
      <param name="primaryAxis">The primary X/Y axis.</param>
      <param name="secondaryAxis">The secondary X/Y axis.</param>
      <param name="posOne">X/Y1 point of zoom rectangle.</param>
      <param name="posTwo">X/Y2 point of zoom rectangle.</param>
      <returns>Whether the zoom is allowed</returns>
    </member>
    <member name="M:Visiblox.Charts.ZoomHelper.CanZoomTo(Visiblox.Charts.Chart,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Decides whether zooming to the rectangle defined by <paramref name="xPosOne" />, <paramref name="yPosOne" />, <paramref name="xPosTwo" /> and <paramref name="yPosTwo" />
                is allowed on the chart.
            </summary>
      <remarks>
            Zooming is only allowed to a certain extent in Silverlight due to a problem when drawing very long paths.
            In WPF zooming is also limited to a more generous extent as zooming too deep would result in shapes not being drawn correctly due to double rounding issues.
            </remarks>
      <param name="chart">The chart.</param>
      <param name="xPosOne">X1 point of the zoom rectangle.</param>
      <param name="yPosOne">Y1 point of the zoom rectangle.</param>
      <param name="xPosTwo">X2 point of the zoom rectangle.</param>
      <param name="yPosTwo">Y2 point of the zoom rectangle.</param>
      <returns>Whether the zoom is allowed.</returns>
    </member>
    <member name="M:Visiblox.Charts.ZoomHelper.CanZoomTo(Visiblox.Charts.Chart,System.Windows.Controls.Orientation,System.Double,System.Double)">
      <summary>
            Decides if zooming is allowed between the two points on the given axes.
            </summary>
      <remarks>
            Zooming is only allowed to a certain extent in Silverlight due to a problem when drawing very long paths.
            In WPF zooming is also limited to a more generous extent as zooming too deep would result in shapes not being drawn correctly due to double rounding issues.
            </remarks>
      <param name="chart">The chart.</param>
      <param name="orientation">The orientation of axes to test.  
            Should be Horizontal if <paramref name="posOne" /> and <paramref name="posTwo" /> are x values, Vertical if they are y values.  </param>
      <param name="posOne">X/Y1 point of zoom rectangle.</param>
      <param name="posTwo">X/Y2 point of zoom rectangle.</param>
      <returns>Whether the zoom is allowed</returns>
    </member>
    <member name="M:Visiblox.Charts.ZoomHelper.CanZoomTo(Visiblox.Charts.Chart,System.Collections.Generic.IEnumerable{Visiblox.Charts.Zoom})">
      <summary>
            Returns whether all of the passed <paramref name="zooms" />'s scale is allowed
                on <paramref name="chart" />.
            </summary>
      <param name="chart">The chart.</param>
      <param name="zooms">Target zooms.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.ZoomHelper.CanZoomTo(Visiblox.Charts.Chart,Visiblox.Charts.Zoom)">
      <summary>
            Returns whether the passed <paramref name="zoom" />'s scale is to be allowed on <paramref name="chart" />.
            </summary>
      <remarks>
            Zooming is only allowed to a certain extent in Silverlight due to a problem when drawing very long paths.
            In WPF zooming is also limited to a more generous extent as zooming too deep would result in shapes not being drawn correctly due to double rounding issues.
            </remarks>
      <param name="chart">The chart.</param>
      <param name="zoom">Zoom to be checked.</param>
      <returns>whether zooming should be enabled.</returns>
    </member>
    <member name="M:Visiblox.Charts.ZoomHelper.AnimateZoomTo(System.Collections.Generic.IDictionary{Visiblox.Charts.IAxis,Visiblox.Charts.Zoom},System.Int32,System.EventHandler)">
      <summary>
            Animates a change in the zoom from the current scale and offset to the specified values, 
            in the specified number of milliseconds.
            </summary>
      <param name="axisZoomSet">The set of axis/zoom pairs to animate.</param>
      <param name="milliseconds">Animation duration.</param>
      <param name="animationFinished">Event handler to be called when all the animations have finished.</param>
    </member>
    <member name="P:Visiblox.Charts.ZoomHelper.DisablePathLengthRestriction">
      <summary>
            Enable this property to disable the restriction preventing zooming in too far.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ZoomMode">
      <summary>
            Specifies the ZoomMode to be used with the <see cref="T:Visiblox.Charts.ZoomBehaviour" />.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomMode.MouseDrag">
      <summary>
            Clicking and dragging the mouse produces a <see cref="T:Visiblox.Charts.ZoomRectangle" />, double clicking un-zooms.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomMode.MouseWheel">
      <summary>
            Rotating the mouse wheel forward zooms in, rotating backward zooms out.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomMode.MouseDragAndWheel">
      <summary>
            Both <see cref="F:Visiblox.Charts.ZoomMode.MouseDrag" /> and <see cref="F:Visiblox.Charts.ZoomMode.MouseWheel" /> are enabled.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ZoomRectangle">
      <summary>
            A control which is used to render a region which the user selects to zoom.
            </summary>
      <remarks>
        <para>
        </para>
            Provides a visual indication of the validity of the currently selected zoom region.
            <para><see cref="T:Visiblox.Charts.ZoomBehaviour" /> uses ZoomRectangle to draw a rectangle representing the
            area to be zoomed on the chart and updates it on every mouse move while the left mouse button is down.</para></remarks>
      <seealso cref="T:Visiblox.Charts.ZoomBehaviour" />
    </member>
    <member name="M:Visiblox.Charts.ZoomRectangle.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ZoomRectangle.OnApplyTemplate">
      <summary>
             Sets up the graphical components of the control.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ZoomRectangle.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.ZoomRectangle.NotZoomableBackgroundProperty">
      <summary>
            Identifies the NotZoomableBackground Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomRectangle.NotZoomableForegroundProperty">
      <summary>
            Identifies the NotZoomableForeground Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ZoomRectangle.BorderProperty">
      <summary>
            Identifies the Border Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ZoomRectangle.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.ZoomRectangle.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.ZoomRectangle.NotZoomableBackground">
      <summary>
            Gets or sets the background for the ZoomRectangle representing an invalid zoom selection. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomRectangle.NotZoomableForeground">
      <summary>
            Gets or sets the foreground for the ZoomRectangle representing an invalid zoom selection. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ZoomRectangle.Border">
      <summary>
            Gets or sets the border of the rectangle. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.ZoomRectangle.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Chart">
      <summary>
            Represents a Cartesian chart. A chart has 2 or more axes, and may contain a number of different kinds of series, a title and a legend. Charts are richly
            interactive and able to be styled.
            </summary>
      <remarks>
        <para>
            Chart takes care of generating all of its components needed for display, the developer only has to add
            one or more <see cref="T:Visiblox.Charts.IChartSeries" /> to its <see cref="P:Visiblox.Charts.Chart.Series" /> collection to plot data.
            </para>
        <para>
            Chart is designed to be fully customizable. The most important customization possibilities are the following:
            <list type="bullet"><item><term><strong>Axes</strong> - </term><description>The Chart must always have one <see cref="P:Visiblox.Charts.Chart.XAxis" /> or <see cref="P:Visiblox.Charts.Chart.SecondaryXAxis" /> and either one <see cref="P:Visiblox.Charts.Chart.YAxis" /> or <see cref="P:Visiblox.Charts.Chart.SecondaryYAxis" />.  If not supplied
                an axis will be automatically created based on the type of data supplied to the provided chart series.  Additionally, a chart may have one or more additional
                x or y axes on either side of the chart by adding <see cref="T:Visiblox.Charts.IAxis" /> instances to <see cref="P:Visiblox.Charts.Chart.AdditionalPrimaryXAxes" />, <see cref="P:Visiblox.Charts.Chart.AdditionalSecondaryXAxes" />,
                <see cref="P:Visiblox.Charts.Chart.AdditionalPrimaryYAxes" /> and <see cref="P:Visiblox.Charts.Chart.AdditionalSecondaryYAxes" />. Each axis has a range which handles the range of data values to be displayed. If not supplied,
                the chart will auto-calculate the range based on the data. When streaming live data, you can improve the performance by setting the <see cref="P:Visiblox.Charts.Chart.StreamingMode" /> to the appropriate value
                in order to pan the axis and accommodate the added data instead of recalculating the range.
                </description></item><item><term><strong>Styling</strong> - </term><description>Both the Chart container and its components can be fully styled using styling related properties.
                Chart allows the styling of the series in various ways. Styling related properties can be set on the individual series,
                the <see cref="P:Visiblox.Charts.IChartSeriesCommon.NormalStyle" />
                property can be set on the series, or the <see cref="T:Visiblox.Charts.Palette" /> property can be used to define a palette and apply it to the chart.
                Specifying style related properties on the individual series has the highest precedence, this followed by specifying
                the NormalStyle, finally by declaring a custom Palette. If none of these are specified, the default Chart Palette
                will be applied to the series.</description></item><item><term><strong>Interaction</strong> - </term><description>Interaction is supported through behaviours. A behaviour (<see cref="T:Visiblox.Charts.IBehaviour" />) needs to be
                assigned to the <see cref="P:Visiblox.Charts.Chart.Behaviour" /> property of the chart to enable various interactions. Examples for behaviours include
                <see cref="T:Visiblox.Charts.ZoomBehaviour" /> and <see cref="T:Visiblox.Charts.TrackballBehaviour" />.
                Note that by assigning a <see cref="T:Visiblox.Charts.BehaviourManager" /> to Behaviour, multiple behaviours can be assigned to the chart.</description></item></list></para>
        <para>
            Chart implements <see cref="T:Visiblox.Charts.IOffsetProvider" /> to provide offsets to <see cref="T:Visiblox.Charts.IChartSeries" /> which can be rendered
            in a side-by-side context - where the width of the rendered data points is dependent upon other data points from other series at that particular render position.
            </para>
      </remarks>
      <example>
        <para>Create a simple chart with a single line series:
            <code source="Help\Charts\IncludedCode\CreateSimpleChartExample.cs" />
            Example output:
            <img src="../Help/Charts/chart-example.jpg" /></para>
        <para>
            Customizing the Chart can be done through either the style related properties or by changing its layout via
            setting the <see cref="P:System.Windows.Controls.Control.Template" /> property and changing its control template.
            By default the following template is applied to the chart. Use this as a base for changing the chart's control template.
            <code source="Help\Charts\IncludedCode\ChartControlTemplate.xml" lang="XAML" /></para>
      </example>
      <seealso cref="T:Visiblox.Charts.IChartSeries" />
      <seealso cref="T:Visiblox.Charts.IAxis" />
      <seealso cref="T:Visiblox.Charts.IBehaviour" />
      <seealso cref="T:Visiblox.Charts.Palette" />
      <seealso cref="T:Visiblox.Charts.IOffsetProvider" />
    </member>
    <member name="T:Visiblox.Charts.ChartBase">
      <summary>
            Represents a base class for chart types. Is responsible for providing support for common functionality requirements
                for all Visiblox Charts chart types.  This includes title, legend, plot area and palette.
            </summary>
      <seealso cref="T:Visiblox.Charts.Chart" />
      <seealso cref="T:Visiblox.Charts.PieChart" />
    </member>
    <member name="T:Visiblox.Charts.Primitives.IPaletteAware">
      <summary>
            A marker interface to indicate that the implementer of this interface is aware of the Visiblox Chart's Palette concept.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.IPaletteAware.Palette">
      <summary>
            Gets or sets the palette to use for styling.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartBase.PalettePropertyChanged">
      <summary>
            Invoked when the <see cref="P:Visiblox.Charts.ChartBase.Palette" /> (or just the <see cref="P:Visiblox.Charts.ChartBase.EffectivePalette" />) property has changed. Override in sub-classes to handle this event.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartBase.LayoutCycleDetectionLimitPropertyChanged">
      <summary>
            Invoked when <see cref="F:Visiblox.Charts.ChartBase.LayoutCycleDetectionLimitProperty" /> changes.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartBase.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartBase.Dispose">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartBase.DisposeInternal">
      <summary>
            Called when the control is disposed. Override to handle this event.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartBase.OnApplyTemplate">
      <summary>
            Invoked when the template is applied.
            </summary>
      <remarks>
            Assigns <see cref="P:Visiblox.Charts.ChartBase.LayoutRoot" />, <see cref="P:Visiblox.Charts.ChartBase.PlotArea" />, <see cref="P:Visiblox.Charts.ChartBase.TitleArea" />, <see cref="P:Visiblox.Charts.ChartBase.Legend" />.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.ChartBase.OnApplyTemplateInternal">
      <summary>
            Called when the template is applied. Override to handle this event.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartBase.Invalidate">
      <summary>
            Requests the Invalidation of this chart object (and dependent objects where required).
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartBase.DoInvalidate">
      <summary>
            Invalidates the chart.
            </summary>
      <remarks>
            Instructs the legend to update and invokes <see cref="M:Visiblox.Charts.ChartBase.InvalidateInternal" />.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.ChartBase.InvalidateInternal">
      <summary>
            Implements invalidation of the chart.
            </summary>
      <remarks>
            Should only execute if <see cref="P:Visiblox.Charts.ChartBase.TemplateApplied" /> is set to true.
            Responsibilities include:
            - Checking for watermark
            - Redrawing of series
            - Rescaling of axes
            - Redrawing of annotations
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.ChartBase.UpdateLegend">
      <summary>
            Updates the position and items of the legend, taking <see cref="P:Visiblox.Charts.ChartBase.LegendOrdering" /> into account.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartBase.ChartSizeChanged">
      <summary>
            Invoked when the size of the chart has changed and there is no layout cycle detected.
            Override in sub-classes to handle this event.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartBase.PlotAreaSizeChanged(System.Windows.SizeChangedEventArgs)">
      <summary>
            Invoked when the size of the plot area has changed and no layout cycles are detected. 
            Override in sub-classes to handle this event.
            </summary>
      <param name="e">The size changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartBase.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.ChartBase.TitleProperty">
      <summary>
            Identifies the Title Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartBase.TitleStyleProperty">
      <summary>
            Identifies the TitleStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartBase.LegendVisibilityProperty">
      <summary>
            Identifies the LegendVisibility Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartBase.LegendTitleProperty">
      <summary>
            Identifies the LegendTitle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartBase.LegendStyleProperty">
      <summary>
            Identifies the LegendStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartBase.LegendTemplateProperty">
      <summary>
            Identifies the LegendTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartBase.LegendOrderingProperty">
      <summary>
            Identifies the LegendOrdering Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartBase.LegendMaxHeightRatioProperty">
      <summary>
            Identifies the LegendMaxHeightRatio Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartBase.PlotAreaStyleProperty">
      <summary>
            Identifies the PlotAreaStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartBase.PlotAreaBorderStyleProperty">
      <summary>
            Identifies the PlotAreaBorderStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartBase.PaletteProperty">
      <summary>
            Identifies the Palette Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartBase.LayoutCycleDetectionLimitProperty">
      <summary>
            Identifies the LayoutCycleDetectionLimit Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartBase.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.ChartBase.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.Rendered">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.ChartBase.InvalidationEnded">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ChartBase.TemplateApplied">
      <summary>
            Gets or sets whether the template has been applied.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.Legend">
      <summary>
            Gets the Legend from the chart's visual tree.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.EventSourceContainer">
      <inheritdoc cref="P:Visiblox.Charts.IBehaviourEventSource.EventSourceContainer" />
    </member>
    <member name="P:Visiblox.Charts.ChartBase.DefaultPalette">
      <summary>
            Default palette for this chart type. Applies to the chart unless the <see cref="P:Visiblox.Charts.ChartBase.Palette" /> property is set.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.EffectivePalette">
      <summary>
            Palette applied to the chart (user specified if present, or default).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.DefaultPaletteKey">
      <summary>
            Key to look up default palette in default theme for a given type of chart.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.Title">
      <summary>
            Gets or sets the title of the chart. This text appears on top of the chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.TitleStyle">
      <summary>
            Gets or sets the visual style of the title. The Style should have a TargetType of TextBlock. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.LegendVisibility">
      <summary>
            Gets or sets the visibility of the chart legend. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.LegendTitle">
      <summary>
            Gets or sets the title of the legend. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.LegendStyle">
      <summary>
            Gets or sets the visual style of the legend. The Style should have a TargetType of Legend. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.LegendTemplate">
      <summary>
            Gets or sets the control template applied to the legend. This ControlTemplate should have a TargetType of Legend. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.LegendOrdering">
      <summary>
            Gets or sets the ordering method for items in the chart legend. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.LegendMaxHeightRatio">
      <summary>
            Gets or sets the ratio of the maximum height of the legend compared to the ActualHeight of the chart on a 0.0-1.0 scale. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.PlotAreaStyle">
      <summary>
            Gets or sets the visual style of the plot area (the area where series are plotted). The Style should have a TargetType of Grid. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.PlotAreaBorderStyle">
      <summary>
            Gets or sets the style of the border around the plot area. The Style should have a TargetType of Border. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.Palette">
      <summary>
            Gets or sets the chart Palette. Series styles are determined based on this palette if no explicit styling is applied to them. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartBase.LayoutCycleDetectionLimit">
      <summary>
            Gets or sets the time window used to constrain layout cycle detection (in ms). Layout cycles can occur when different chart elements (such as the axes) cause each other to resize in a loop, and will cause the application to hang/crash. The chart tries to avoid this by detecting repeated cyclical size changes which occur during the specified time window. A large value may cause false positives, leading to incorrect rendering, whereas a small value may not detect a layout cycle. A non-positive value will disable this detection. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.ChartBase.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IOffsetProvider">
      <summary>
            An IOffsetProvider is responsible for calculating offsets to be applied to the rendering position or geometry of an <see cref="T:Visiblox.Charts.IChartSeries" />.
            </summary>
      <remarks>
        <para>
            IOffsetProvider provides offset values to a querying <see cref="T:Visiblox.Charts.IChartSeries" /> in order to adjust the render position or geometry. As such,
            methods declared by IOffsetProvider are called during the Invalidation process of an IChartSeries.
            </para>
        <para>
          <see cref="T:Visiblox.Charts.Chart" /> implements IOffsetProvider to represent the concept that it is responsible for providing offsets to all of the 
            <see cref="T:Visiblox.Charts.IChartSeries" /> which are held within its Series property. IOffsetProvider exposes the ability for offsets to be applied
            to IChartSeries rendered as in a side-by-side context, such as <see cref="T:Visiblox.Charts.BarOrColumnSeriesBase" />. Not all IChartSeries operate within
            a side-by-side context, and therefore not all series will interface with Chart as its IOffsetProvider.
            </para>
        <para>
            The subclass <see cref="T:Visiblox.Charts.IStackedOffsetProvider" /> provides extra methods which can be called in order to perform stacking on series.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.Chart" />
      <seealso cref="T:Visiblox.Charts.BarOrColumnSeriesBase" />
      <seealso cref="T:Visiblox.Charts.IStackedOffsetProvider" />
    </member>
    <member name="M:Visiblox.Charts.IOffsetProvider.GetBaseAxisOffsetForDataPoint(Visiblox.Charts.IChartSeries)">
      <summary>
            For any given IDataPoint in an <see cref="T:Visiblox.Charts.IChartSeries" />, get an offset to apply to the
            render position on the base axis, relative to that dictated by its actual base axis position.
            </summary>
      <param name="series">The series the data point belongs to.</param>
      <returns>An offset, represented as a double.</returns>
    </member>
    <member name="M:Visiblox.Charts.IOffsetProvider.GetPerpendicularAxisOffsetForDataPoint(Visiblox.Charts.IChartSeries,Visiblox.Charts.IDataPoint,System.Boolean,System.Boolean)">
      <summary>
            For a given IDataPoint on an <see cref="T:Visiblox.Charts.IChartSeries" />, get its render position on the 
            perpendicular axis.
            </summary>
      <param name="series">The series the data point belongs to.</param>
      <param name="dataPoint">The data point to get the offset for.</param>
      <param name="includePoint">If true, the height of the dataPoint itself will be included.</param>
      <param name="withZoom">The render position with zoom is returned if true, without zoom otherwise.</param>
      <returns>An offset, represented as a double.</returns>
    </member>
    <member name="M:Visiblox.Charts.IOffsetProvider.GetBaseAxisOffsetGeometry(Visiblox.Charts.IChartSeries)">
      <summary>
            For a given <see cref="T:Visiblox.Charts.IChartSeries" />, get the offset <see cref="T:System.Windows.Media.PathGeometry" /> that should
            act as the base 'path' on the base axis. This is used by <see cref="T:Visiblox.Charts.StackedLineSeries" /> to enable stacked areas.
            </summary>
      <param name="series">The series to get the offset path for.</param>
      <returns>A <see cref="T:System.Windows.Media.PathGeometry" /> representing the series 'below' this series in a stacking context.</returns>
    </member>
    <member name="M:Visiblox.Charts.IOffsetProvider.GetPerpendicularAxisOffsetGeometry(Visiblox.Charts.IChartSeries)">
      <summary>
            For a given <see cref="T:Visiblox.Charts.IChartSeries" />, get the offset <see cref="T:System.Windows.Media.PathGeometry" /> that should
            act as the base 'path' on the perpendicular axis. This is used by <see cref="T:Visiblox.Charts.StackedLineSeries" /> to enable stacked areas.
            </summary>
      <param name="series">The series to get the offset path for.</param>
      <returns>A <see cref="T:System.Windows.Media.PathGeometry" /> representing the series 'below' this series in a stacking context.</returns>
    </member>
    <member name="M:Visiblox.Charts.IOffsetProvider.GetSeries">
      <summary>
             Gets the series used for offset calculations.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IOffsetProvider.GetSideBySideSeries(Visiblox.Charts.BarSeriesType)">
      <summary>
            Gets the IBarOrColumnSeries which are to be rendered in a side-by-side context, in the same orientation as the type specified.
            </summary>
      <param name="barSeriesType">The type of series we're interested in.</param>
      <returns>A List of <see cref="T:Visiblox.Charts.IBarOrColumnSeries" /> which are to be rendered in a side-by-side context.</returns>
    </member>
    <member name="M:Visiblox.Charts.IOffsetProvider.GetSideBySideSeries(Visiblox.Charts.IBarOrColumnSeries)">
      <summary>
            Wraps a call to GetSideBySideSeries(BarSeriesType barSeriesType) to minimise changes to clients.
            </summary>
      <param name="series">The series for which to get the side by side series.</param>
      <returns>A List of <see cref="T:Visiblox.Charts.IBarOrColumnSeries" /> which are to be rendered in a side-by-side context.</returns>
    </member>
    <member name="M:Visiblox.Charts.IOffsetProvider.GetSideBySideWidth(Visiblox.Charts.IBarOrColumnSeries)">
      <summary>
            Get the full width of the area in which side-by-side series are to be plotted in.
            </summary>
      <param name="series">The identifying series.</param>
      <returns>The full width of the area into which the series may be plotted.</returns>
    </member>
    <member name="M:Visiblox.Charts.IOffsetProvider.GetSingleBarWidth(Visiblox.Charts.IBarOrColumnSeries)">
      <summary>
            Provides the width of an individual bar or column in the given series.
            </summary>
      <param name="series">The series to get the bar width for.</param>
      <returns>The bar width.</returns>
    </member>
    <member name="M:Visiblox.Charts.IOffsetProvider.ResetBarAndColumnCaches">
      <summary>
            Reset the bar and column series and width caches.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ILicensed">
      <summary>
            Implemented by anything that needs a <see cref="P:Visiblox.Charts.ILicensed.ValidationKey" /></summary>
    </member>
    <member name="P:Visiblox.Charts.ILicensed.ValidationKey">
      <summary>
            The property should contain the validation key from your Visiblox Charts trial license.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Chart.PalettePropertyChanged">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Chart.#ctor">
      <summary>
            Default Constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Chart.DisposeInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Chart.OnApplyTemplateInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Chart.UpdateLegend">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Chart.PlotAreaSizeChanged(System.Windows.SizeChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Chart.LayoutCycleDetectionLimitPropertyChanged">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Chart.ChartSizeChanged">
      <summary>
            Invoked when the size of the chart has changed.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Chart.InvalidateInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Chart.SetAxisRenderingEnabledState(System.Boolean)">
      <summary>
            Applies the specified value to the RenderingEnabled state of all axes to turn on and off
            axis rendering for the whole chart.
            </summary>
      <param name="isEnabled">True if axis rendering should be enabled or false otherwise.</param>
    </member>
    <member name="M:Visiblox.Charts.Chart.SetDataLabelZoomPendingState(System.Boolean)">
      <summary>
            Applies the specified value to the RenderingEnabled state of all series implementing IHasDataLabels to turn on and off
            data label rendering for the whole chart.
            </summary>
      <param name="isEnabled">True if data label rendering should be enabled or false otherwise.</param>
    </member>
    <member name="M:Visiblox.Charts.Chart.ResetBarAndColumnCaches">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Chart.GetSingleBarWidth(Visiblox.Charts.IBarOrColumnSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Chart.GetSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Chart.GetBaseAxisOffsetForDataPoint(Visiblox.Charts.IChartSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Chart.GetPerpendicularAxisOffsetForDataPoint(Visiblox.Charts.IChartSeries,Visiblox.Charts.IDataPoint,System.Boolean,System.Boolean)">
      <inheritdoc />
            Not implemented on Chart.
        </member>
    <member name="M:Visiblox.Charts.Chart.GetBaseAxisOffsetGeometry(Visiblox.Charts.IChartSeries)">
      <inheritdoc />
            Not implemented on Chart.
        </member>
    <member name="M:Visiblox.Charts.Chart.GetPerpendicularAxisOffsetGeometry(Visiblox.Charts.IChartSeries)">
      <inheritdoc />
            Not implemented on Chart.
        </member>
    <member name="M:Visiblox.Charts.Chart.GetSideBySideSeries(Visiblox.Charts.BarSeriesType)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Chart.GetSideBySideSeries(Visiblox.Charts.IBarOrColumnSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Chart.GetSideBySideWidth(Visiblox.Charts.IBarOrColumnSeries)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.Chart.AnnotationsProperty">
      <summary>
            Identifies the Annotations Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Chart.BehaviourProperty">
      <summary>
            Identifies the Behaviour Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Chart.IsBehaviourEventRouterEnabledProperty">
      <summary>
            Identifies the IsBehaviourEventRouterEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Chart.XAxisProperty">
      <summary>
            Identifies the XAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Chart.YAxisProperty">
      <summary>
            Identifies the YAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Chart.SecondaryYAxisProperty">
      <summary>
            Identifies the SecondaryYAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Chart.SecondaryXAxisProperty">
      <summary>
            Identifies the SecondaryXAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Chart.AdditionalPrimaryYAxesProperty">
      <summary>
            Identifies the AdditionalPrimaryYAxes Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Chart.AdditionalSecondaryYAxesProperty">
      <summary>
            Identifies the AdditionalSecondaryYAxes Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Chart.AdditionalPrimaryXAxesProperty">
      <summary>
            Identifies the AdditionalPrimaryXAxes Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Chart.AdditionalSecondaryXAxesProperty">
      <summary>
            Identifies the AdditionalSecondaryXAxes Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Chart.SeriesProperty">
      <summary>
            Identifies the Series Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Chart.LegendPositionProperty">
      <summary>
            Identifies the LegendPosition Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Chart.StreamingModeProperty">
      <summary>
            Identifies the StreamingMode Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.ValidationKey">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.Chart.BehaviourEventSourceCategory">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.Chart.BehaviourCanvas">
      <summary>
            Gets the panel used to render <see cref="T:Visiblox.Charts.IBehaviour" /> objects.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.AllAxes">
      <summary>
            Returns an enumerable of all the axes attached to the chart.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.Annotations">
      <summary>
            Gets or sets the collection of annotations on the chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.Behaviour">
      <summary>
            Gets or sets the behaviour that is currently associated with the chart. Behaviours integrate with the chart in order to provide some form of interactivity. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.IsBehaviourEventRouterEnabled">
      <summary>
            Gets or sets whether the Chart's BehaviourEventRouter will forward any events or not. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.XAxis">
      <summary>
            Gets or sets the X Axis of the chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.YAxis">
      <summary>
            Gets or sets the (primary) Y Axis of the chart. This is an alias for YAxes[0]. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.SecondaryYAxis">
      <summary>
            Gets or sets the secondary Y Axis of the chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.SecondaryXAxis">
      <summary>
            Gets or sets the secondary X Axis of the chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.AdditionalPrimaryYAxes">
      <summary>
            Gets or sets the additional primary Y axes. This is a collection of IAxis objects. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.AdditionalSecondaryYAxes">
      <summary>
            Gets or sets the additional secondary Y axes. This is a collection of IAxis objects. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.AdditionalPrimaryXAxes">
      <summary>
            Gets or sets the additional primary X axes. This is a collection of IAxis objects. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.AdditionalSecondaryXAxes">
      <summary>
            Gets or sets the additional secondary X axes. This is a collection of IAxis objects. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.Series">
      <summary>
            Gets or sets the collection of chart series that are on this chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.LegendPosition">
      <summary>
            Gets or sets the position of the legend. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Chart.StreamingMode">
      <summary>
            Gets or sets the streaming mode. The streaming mode improves the performance when charting live data as it pans the axis to the current max value instead of recalculating the range based on the data. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DragGestureBase">
      <summary>
            Abstract base class for drag gesture representations.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IGestureContext">
      <summary>
            A marker interface for gesture contexts.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DragGestureBase.#ctor(System.Windows.Point,System.Double,System.Double)">
      <summary>
            Constructor for the drag gesture base class.  Specifies the render point of the drag and the horizontal and vertical movement performed.  
            </summary>
      <param name="point">
      </param>
      <param name="horizontalChange">
      </param>
      <param name="verticalChange">
      </param>
    </member>
    <member name="P:Visiblox.Charts.DragGestureBase.Point">
      <summary>
            The render position of the start of the drag gesture.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DragGestureBase.HorizontalChange">
      <summary>
            The horizontal change represented in this context.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DragGestureBase.VerticalChange">
      <summary>
            The vertical change represented in this context.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DragGestureDragging">
      <summary>
            Represents incremental changes during a drag operation.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DragGestureDragging.#ctor(System.Windows.Point,System.Double,System.Double)">
      <summary>
            Constructor for incremental changes during a drag operation.  
            </summary>
      <param name="point">
      </param>
      <param name="horizontalChange">
      </param>
      <param name="verticalChange">
      </param>
    </member>
    <member name="T:Visiblox.Charts.DragGestureEnded">
      <summary>
            Represents the end of a drag operation.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DragGestureEnded.#ctor(System.Windows.Point,System.Double,System.Double)">
      <summary>
            Contructor for the representation of the end of a drag operation.  
            </summary>
      <param name="point">The start point of drag operation.</param>
      <param name="horizontalChange">The total horizontal change in the drag.  </param>
      <param name="verticalChange">The total vertical change in the drag.  </param>
    </member>
    <member name="T:Visiblox.Charts.DragGestureStarted">
      <summary>
            Representation of the start of a drag gesture.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DragGestureStarted.#ctor(System.Windows.Point,System.Windows.Controls.Orientation)">
      <summary>
      </summary>
      <param name="point">
      </param>
      <param name="direction">
      </param>
    </member>
    <member name="P:Visiblox.Charts.DragGestureStarted.Point">
      <summary>
            The starting render point of the drag gesture.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DragGestureStarted.Direction">
      <summary>
            Drag direction - horizontal or vertical.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.GestureType">
      <summary>
            Possible gesture types.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.GestureType.Undefined">
      <summary>
            Undefined.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.GestureType.Drag">
      <summary>
            A drag gesture, will involve a single touch.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.GestureType.Pinch">
      <summary>
            A pinch gesture, will involve two touches moving in relation to each other.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.GestureEventContext">
      <summary>
            A class for representing a gesture event.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.GestureEventContext.#ctor(Visiblox.Charts.GestureType,Visiblox.Charts.IGestureContext)">
      <summary>
            Constructor.  
            </summary>
      <param name="gestureType">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:Visiblox.Charts.GestureEventContext.AsPointerEventContext">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.GestureEventContext.AsKeyEventContext">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.GestureEventContext.AsGestureEventContext">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.GestureEventContext.GestureType">
      <summary>
             The type of gesture being performed, e.g. drag or pinch et.c
            </summary>
    </member>
    <member name="P:Visiblox.Charts.GestureEventContext.Context">
      <summary>
            Any supplementary context.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ManipulationBase">
      <summary>
            Abstract base class for all manipulation representations.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ManipulationBase.#ctor(System.Windows.Point,System.Windows.IInputElement,System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator})">
      <summary>
            Constructor.  
            </summary>
      <param name="manipulationOrigin">
      </param>
      <param name="manipulationContainer">
      </param>
      <param name="manipulators">
      </param>
    </member>
    <member name="M:Visiblox.Charts.ManipulationBase.#ctor(System.Windows.IInputElement,System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator})">
      <summary>
            Constructor.  
            </summary>
      <param name="manipulationContainer">
      </param>
      <param name="manipulators">
      </param>
    </member>
    <member name="P:Visiblox.Charts.ManipulationBase.ManipulationOrigin">
      <summary>
            Gets the point from which the manipulation originated. 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ManipulationBase.ManipulationContainer">
      <summary>
            Gets the container that the ManipulationOrigin property is relative to. 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ManipulationBase.Manipulators">
      <summary>
            Gets a collection of objects that represents the touch contacts for the manipulation. 
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ManipulationCompleted">
      <summary>
            Represents a manipulation in its entirety
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ManipulationCompleted.#ctor(System.Windows.Input.ManipulationVelocities,System.Boolean,System.Windows.Input.ManipulationDelta,System.Windows.Point,System.Windows.IInputElement,System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator})">
      <summary>
            Constructor.  
            </summary>
      <param name="finalVelocities">
      </param>
      <param name="isInertial">
      </param>
      <param name="totalManipulation">
      </param>
      <param name="manipulationOrigin">
      </param>
      <param name="manipulationContainer">
      </param>
      <param name="manipulators">
      </param>
    </member>
    <member name="P:Visiblox.Charts.ManipulationCompleted.IsInertial">
      <summary>
            Gets a value that indicates whether the event occurs during inertia.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ManipulationCompleted.FinalVelocities">
      <summary>
            Gets the velocities that are used for the manipulation.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ManipulationCompleted.TotalManipulation">
      <summary>
            Gets the total transformation that occurs during the current manipulation.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ManipulationDelta">
      <summary>
            Represents movements that occur over the course of a manipulation
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ManipulationDelta.#ctor(System.Windows.Input.ManipulationVelocities,System.Boolean,System.Windows.Input.ManipulationDelta,System.Windows.Input.ManipulationDelta,Visiblox.Charts.ManipulationDelta.CompleteType,System.Windows.Point,System.Windows.IInputElement,System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator})">
      <summary>
            Constructor.  
            </summary>
      <param name="velocities">
      </param>
      <param name="isInertial">
      </param>
      <param name="cumulativeManipulation">
      </param>
      <param name="deltaManipulation">
      </param>
      <param name="complete">
      </param>
      <param name="manipulationOrigin">
      </param>
      <param name="manipulationContainer">
      </param>
      <param name="manipulators">
      </param>
    </member>
    <member name="P:Visiblox.Charts.ManipulationDelta.IsInertial">
      <summary>
            Gets a value that indicates whether the event occurs during inertia.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ManipulationDelta.Velocities">
      <summary>
            Gets the rates of the most recent changes to the manipulation. 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ManipulationDelta.DeltaManipulation">
      <summary>
            Gets the most recent changes of the current manipulation. 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ManipulationDelta.CumulativeManipulation">
      <summary>
            Gets the cumulated changes of the current manipulation. 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ManipulationDelta.Complete">
      <summary>
            Ends the current manipulation with no inertia. 
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ManipulationDelta.CompleteType">
      <summary>
            Delegate type for Complete function. 
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ManipulationInertiaStarted">
      <summary>
            Represents the inertial motion at the end of a manipulation
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ManipulationInertiaStarted.#ctor(System.Windows.Input.ManipulationVelocities,System.Windows.Input.InertiaExpansionBehavior,System.Windows.Input.InertiaRotationBehavior,System.Windows.Input.InertiaTranslationBehavior,System.Windows.Point,System.Windows.IInputElement,System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator})">
      <summary>
            Constructor.  
            </summary>
      <param name="initialVelocities">
      </param>
      <param name="expansionBehaviour">
      </param>
      <param name="rotationBehaviour">
      </param>
      <param name="translationBehaviour">
      </param>
      <param name="manipulationOrigin">
      </param>
      <param name="manipulationContainer">
      </param>
      <param name="manipulators">
      </param>
    </member>
    <member name="P:Visiblox.Charts.ManipulationInertiaStarted.InitialVelocities">
      <summary>
            Gets the rates of changes to the manipulation that occur before inertia starts. 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ManipulationInertiaStarted.ExpansionBehavior">
      <summary>
            The rate of slowdown of expansion inertial movement. 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ManipulationInertiaStarted.RotationBehavior">
      <summary>
            The rate of slowdown of rotational inertial movement. 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ManipulationInertiaStarted.TranslationBehavior">
      <summary>
            The rate of slowdown of linear inertial movement. 
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ManipulationStarted">
      <summary>
            Represents the start of a manipulation
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ManipulationStarted.#ctor(System.Windows.Point,System.Windows.IInputElement,System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator})">
      <summary>
            Constructor.
            </summary>
      <param name="manipulationOrigin">
      </param>
      <param name="manipulationContainer">
      </param>
      <param name="manipulators">
      </param>
    </member>
    <member name="T:Visiblox.Charts.ManipulationStarting">
      <summary>
            Represents the possible start of a gesture manipulation.  Relates to the initial touch event before we are certain it is a manipulation rather than a tap.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ManipulationStarting.#ctor(System.Boolean,System.Windows.Input.ManipulationPivot,System.Windows.Input.ManipulationModes,System.Windows.IInputElement,System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator})">
      <summary>
            Constructor.  
            </summary>
      <param name="isSingleTouchEnabled">
      </param>
      <param name="pivot">
      </param>
      <param name="mode">
      </param>
      <param name="manipulationContainer">
      </param>
      <param name="manipulators">
      </param>
    </member>
    <member name="P:Visiblox.Charts.ManipulationStarting.IsSingleTouchEnabled">
      <summary>
            Gets or sets whether one finger can start a manipulation. 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ManipulationStarting.Pivot">
      <summary>
            Gets or sets an object that describes the pivot for a single-point manipulation. 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ManipulationStarting.Mode">
      <summary>
            Gets or sets which types of manipulations are possible. 
            </summary>
    </member>
    <member name="T:Visiblox.Charts.PinchGestureBase">
      <summary>
            Abstract base class for pinch gesture representations.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PinchGestureBase.#ctor(System.Windows.Point,System.Windows.Point,System.Double)">
      <summary>
            Constructor for the pinch gesture base class.  Specifies start points and distance of pinch.  
            </summary>
      <param name="startPoint1">
      </param>
      <param name="startPoint2">
      </param>
      <param name="distance">
      </param>
    </member>
    <member name="P:Visiblox.Charts.PinchGestureBase.StartPoint1">
      <summary>
            Render position of first pinch point.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PinchGestureBase.StartPoint2">
      <summary>
            Render position of first pinch point.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PinchGestureBase.Distance">
      <summary>
            Distance moved in pinch gesture.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.PinchGestureEnded">
      <summary>
            Representation of the end of a pinch gesture.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PinchGestureEnded.#ctor(System.Windows.Point,System.Windows.Point,System.Double,System.Double)">
      <summary>
            Constructor.  
            </summary>
      <param name="startPoint1">
      </param>
      <param name="startPoint2">
      </param>
      <param name="distance">
      </param>
      <param name="totalAngleChange">
      </param>
    </member>
    <member name="P:Visiblox.Charts.PinchGestureEnded.TotalAngleChange">
      <summary>
            The total change in angle that occurred over the entire pinch.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.PinchGesturePinching">
      <summary>
            Represents incremental changes during a pinch operation.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PinchGesturePinching.#ctor(System.Windows.Point,System.Windows.Point,System.Double,System.Double)">
      <summary>
            Constructor.  
            </summary>
      <param name="startPoint1">
      </param>
      <param name="startPoint2">
      </param>
      <param name="distance">
      </param>
      <param name="totalAngleChange">
      </param>
    </member>
    <member name="P:Visiblox.Charts.PinchGesturePinching.TotalAngleChange">
      <summary>
            The total angle change so far.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.PinchGestureStarted">
      <summary>
            Representation of the start of a pinch gesture.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PinchGestureStarted.#ctor(System.Windows.Point,System.Windows.Point,System.Double,System.Double)">
      <summary>
            Constructor for the pinch gesture base class.  Specifies start points, distance and angle of pinch.  
            </summary>
      <param name="startPoint1">
      </param>
      <param name="startPoint2">
      </param>
      <param name="distance">
      </param>
      <param name="angle">
      </param>
    </member>
    <member name="P:Visiblox.Charts.PinchGestureStarted.Angle">
      <summary>
            The initial angle of the pinch.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.AxisDirection">
      <summary>
            Enum describing a type of axis by its "direction"
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.PointShapeControl">
      <summary>
            Control which shows a shape as selected by the <see cref="P:Visiblox.Charts.Primitives.PointShapeControl.Shape" /> property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PointShapeControl.#ctor">
      <summary>
            Constructor.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.PointShapeControl.ShapeProperty">
      <summary>
            Identifies the Shape Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.PointShapeControl.FillProperty">
      <summary>
            Identifies the Fill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.PointShapeControl.StrokeProperty">
      <summary>
            Identifies the Stroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.PointShapeControl.ShapeStyleProperty">
      <summary>
            Identifies the ShapeStyle Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PointShapeControl.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.Primitives.PointShapeControl.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.Primitives.PointShapeControl.Shape">
      <summary>
            Type of shape. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.PointShapeControl.Fill">
      <summary>
            Fill on the shape. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.PointShapeControl.Stroke">
      <summary>
            Stroke on the shape. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.PointShapeControl.ShapeStyle">
      <summary>
            Style to set on the shape. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.Primitives.PointShapeControl.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.SafeEffect">
      <summary>
            Contains attached properties to apply <see cref="P:System.Windows.UIElement.Effect" /> if code is running in full trust.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SafeEffect.GetEffect(System.Windows.DependencyObject)">
      <summary>
            Get the Effect property
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SafeEffect.SetEffect(System.Windows.DependencyObject,Visiblox.Charts.Primitives.EffectType)">
      <summary>
            Set the Effect property
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.SafeEffect.EffectProperty">
      <summary>
            Identifier for the Effect property
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.EffectType">
      <summary>
        <see cref="T:Visiblox.Charts.Primitives.SafeEffect" />.
            </summary>
      <seealso cref="T:Visiblox.Charts.Primitives.DropShadowEffectType" />
    </member>
    <member name="T:Visiblox.Charts.Primitives.DropShadowEffectType">
      <summary>
            Wrapper for <see cref="T:System.Windows.Media.Effects.DropShadowEffect" /> properties to avoid creating an instance in partial trust environment.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.DropShadowEffectType.BlurRadiusProperty">
      <summary>
        <see cref="P:System.Windows.Media.Effects.DropShadowEffect.BlurRadius" />
      </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.DropShadowEffectType.ColorProperty">
      <summary>
        <see cref="F:System.Windows.Media.Effects.DropShadowEffect.ColorProperty" />
      </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.DropShadowEffectType.DirectionProperty">
      <summary>
        <see cref="F:System.Windows.Media.Effects.DropShadowEffect.DirectionProperty" />
      </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.DropShadowEffectType.OpacityProperty">
      <summary>
        <see cref="F:System.Windows.Media.Effects.DropShadowEffect.OpacityProperty" />
      </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.DropShadowEffectType.ShadowDepthProperty">
      <summary>
        <see cref="F:System.Windows.Media.Effects.DropShadowEffect.ShadowDepthProperty" />
      </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DropShadowEffectType.Apply(System.Windows.UIElement)">
      <summary>
            Apply the effect, assuming the security level is such that it should be allowed (otherwise no effect is applied)
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.DropShadowEffectType.BlurRadius">
      <summary>
        <see cref="P:System.Windows.Media.Effects.DropShadowEffect.BlurRadius" />
      </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.DropShadowEffectType.Color">
      <summary>
        <see cref="P:System.Windows.Media.Effects.DropShadowEffect.Color" />
      </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.DropShadowEffectType.Direction">
      <summary>
        <see cref="P:System.Windows.Media.Effects.DropShadowEffect.Direction" />
      </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.DropShadowEffectType.Opacity">
      <summary>
        <see cref="P:System.Windows.Media.Effects.DropShadowEffect.Opacity" />
      </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.DropShadowEffectType.ShadowDepth">
      <summary>
        <see cref="P:System.Windows.Media.Effects.DropShadowEffect.ShadowDepth" />
      </summary>
    </member>
    <member name="T:Visiblox.Charts.GenericIComparableRange">
      <summary>
            A range defined generically for <see cref="T:System.IComparable" /> values, rather than a specific <see cref="T:System.IComparable" /> sub type.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RangeBase`1">
      <summary>
            Base class for generic ranges with continuous value ranges bounded by a <see cref="P:Visiblox.Charts.RangeBase`1.Maximum" /> and <see cref="P:Visiblox.Charts.RangeBase`1.Minimum" /> value.
            </summary>
      <typeparam name="T">The type of the values within this range.</typeparam>
      <remarks>
        <para>
            This class provides property changed notification for the <see cref="P:Visiblox.Charts.RangeBase`1.Minimum" /> and <see cref="P:Visiblox.Charts.RangeBase`1.Maximum" /> properties.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.DoubleRange" />
      <seealso cref="T:Visiblox.Charts.DateTimeRange" />
    </member>
    <member name="T:Visiblox.Charts.IRange`1">
      <summary>
            Defines a range of values bounded by a <see cref="P:Visiblox.Charts.IRange`1.Minimum" /> and <see cref="P:Visiblox.Charts.IRange`1.Maximum" /> value.
            Defines a generic <see cref="T:Visiblox.Charts.IRange" />.
            </summary>
      <remarks>This is a more strongly typed version of the non-generic <see cref="T:Visiblox.Charts.IRange" /> interface.
            Implementation of IRange is recommended to be via <see cref="T:Visiblox.Charts.RangeBase`1" />.</remarks>
      <typeparam name="T">The type of the values within this range.</typeparam>
      <seealso cref="T:Visiblox.Charts.RangeBase`1" />
      <seealso cref="T:Visiblox.Charts.CategoryRange" />
    </member>
    <member name="T:Visiblox.Charts.IRange">
      <summary>
            Defines a range used by <see cref="T:Visiblox.Charts.IAxis" /> to define its <see cref="P:Visiblox.Charts.IRangeProvider.Range" />.
            </summary>
      <remarks>
        <para>
            A range is defined by <see cref="P:Visiblox.Charts.IRange.Maximum" /> and <see cref="P:Visiblox.Charts.IRange.Minimum" />. 
            </para>
      </remarks>
    </member>
    <member name="M:Visiblox.Charts.IRange.Grow(System.IComparable)">
      <summary>
             Grows the range by the specified <paramref name="value" />, which if outside the range will cause the
             range to be expanded to include it.
            </summary>
      <param name="value">The value to expand the range by.</param>
    </member>
    <member name="M:Visiblox.Charts.IRange.GrowByFactor(System.Double,System.Boolean,System.Boolean)">
      <summary>
            Causes the range to expand by the given <paramref name="factor" />.
            </summary>
      <param name="factor">Factor to expand the range by (where 1 is the entire range and 0 is no growth).</param>
      <param name="growMinimum">Whether to grow the range minimum.</param>
      <param name="growMaximum">Whether to grow the range maximum.</param>
    </member>
    <member name="M:Visiblox.Charts.IRange.GrowByRange(Visiblox.Charts.IRange)">
      <summary>
             Causes the range to expand to include <paramref name="range" />.
            </summary>
      <remarks>After an invocation of GrowByRange, this range will be the union of its previous value and <paramref name="range" />.</remarks>
      <param name="range">The range to grow the range to include.</param>
    </member>
    <member name="M:Visiblox.Charts.IRange.IsValueValid(System.IComparable)">
      <summary>
            Determines whether a value is valid to be added to this range.
            </summary>
      <param name="value">the value to check for validity.</param>
      <returns>True if the value is valid and false otherwise.</returns>
    </member>
    <member name="P:Visiblox.Charts.IRange.Maximum">
      <summary>
            Gets or sets the maximum of the range.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRange.Minimum">
      <summary>
            Gets or sets the minimum of the range.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRange.IsValid">
      <summary>
            Indicates whether the range in its current form is valid and can be used.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IRange`1.Grow(`0)">
      <summary>
             Grows the range by the specified <paramref name="value" />, which if outside the range will cause the
             range to be expanded to include it.
            </summary>
      <param name="value">The value to expand the range by.</param>
    </member>
    <member name="M:Visiblox.Charts.IRange`1.IsValueValid(`0)">
      <summary>
            Determines whether a value is valid to be added to this range.
            </summary>
      <param name="value">The value to check for validity.</param>
      <returns>True if the value is valid and false otherwise.</returns>
    </member>
    <member name="P:Visiblox.Charts.IRange`1.Maximum">
      <summary>
            Gets or sets the maximum of the range.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRange`1.Minimum">
      <summary>
            Gets or sets the minimum of the range.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RangeBase`1.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RangeBase`1.#ctor(`0,`0)">
      <summary>
            Constructs a range with the passed <paramref name="minimum" /> and <paramref name="maximum" />.
            </summary>
      <param name="minimum">Minimum value for the range.</param>
      <param name="maximum">Maximum value for the range.</param>
    </member>
    <member name="M:Visiblox.Charts.RangeBase`1.Grow(`0)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RangeBase`1.GrowByFactor(System.Double,System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RangeBase`1.GrowByRange(Visiblox.Charts.IRange{`0})">
      <inheritdoc cref="M:Visiblox.Charts.IRange.GrowByRange(Visiblox.Charts.IRange)" />
    </member>
    <member name="M:Visiblox.Charts.RangeBase`1.Grow(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RangeBase`1.GrowByRange(Visiblox.Charts.IRange)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RangeBase`1.IsValueValid(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RangeBase`1.IsValueValid(`0)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RangeBase`1.ConvertFromIComparable(System.IComparable)">
      <summary>
            Convert <paramref name="value" /> from <typeparamref name="T" /> to <see cref="T:System.IComparable" />. The base implementation uses
            <see cref="M:System.Convert.ChangeType(System.Object,System.TypeCode)" /></summary>
      <param name="value">Value to convert</param>
      <returns>Value as type T</returns>
    </member>
    <member name="M:Visiblox.Charts.RangeBase`1.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /><paramref name="obj" /> is equal to this <see cref="T:Visiblox.Charts.RangeBase`1" /> 
            (is a range deriving from <see cref="T:Visiblox.Charts.RangeBase`1" /> whose <see cref="P:Visiblox.Charts.IRange.Maximum" /> and <see cref="P:Visiblox.Charts.IRange.Minimum" /> are equal to this range, 
            and both ranges have the same value of <see cref="P:Visiblox.Charts.IRange.IsValid" />).
            </summary>
      <remarks>Does not check that effective minimum and maximum are equal, this would have negative performance implications on the chart:
            it should be assumed that if both ranges have their effective min/max recalculated, they would be equal if the ranges are equal.</remarks>
      <param name="obj">The object to test for range equality.</param>
      <returns>Whether <paramref name="obj" />is equal to this range.</returns>
    </member>
    <member name="M:Visiblox.Charts.RangeBase`1.GetHashCode">
      <summary>
            Serves as a hash function for this <see cref="T:Visiblox.Charts.RangeBase`1" />.
            </summary>
      <returns>A suitable hash for this object.</returns>
    </member>
    <member name="M:Visiblox.Charts.RangeBase`1.OnPropertyChanged(System.String)">
      <summary>
            Raises the property changed event for this range.
            </summary>
      <param name="propertyName">The name of the property that's changed.</param>
    </member>
    <member name="E:Visiblox.Charts.RangeBase`1.PropertyChanged">
      <summary>
            Event implementing <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RangeBase`1.IsValid">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RangeBase`1.Maximum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RangeBase`1.Minimum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RangeBase`1.Tag">
      <summary>
            Gets or sets an arbitrary object value that can be used to store custom information about this element.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.GenericIComparableRange.#ctor">
      <summary>
            Default Constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.GenericIComparableRange.#ctor(System.IComparable,System.IComparable)">
      <summary>
            Construct a range with the specified <paramref name="minimum" /> and <paramref name="maximum" />.
            </summary>
      <param name="minimum">Range minimum</param>
      <param name="maximum">Range maximum</param>
    </member>
    <member name="M:Visiblox.Charts.GenericIComparableRange.GrowByFactor(System.Double,System.Boolean,System.Boolean)">
      <summary>
            Not supported for this range type.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.GenericIComparableRange.ConvertFromIComparable(System.IComparable)">
      <summary>
            Convert to <see cref="T:System.IComparable" />, since <see cref="M:System.Convert.ChangeType(System.Object,System.TypeCode)" /> does not work for <see cref="T:System.IComparable" /> target.
            </summary>
      <param name="value">value</param>
      <returns>
        <paramref name="value" />
      </returns>
    </member>
    <member name="T:Visiblox.Charts.BarOrColumnSeriesRangeCalculator">
      <summary>
            Calculate the axis ranges of a bar or column series, taking into account showing a base value (ie 0) on the
            value axis range, and including the bar width in the base axis range. Caters for stackable series where appropriate
            (currently only <see cref="T:Visiblox.Charts.BarOrColumnSeriesBase" />).
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.#ctor(Visiblox.Charts.IBarOrColumnSeries)">
      <summary>
            Constructor for a non-stackable bar/column series
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.#ctor(Visiblox.Charts.IBarOrColumnSeries,System.Func{Visiblox.Charts.IDataPoint,System.IComparable,System.Double})">
      <summary>
            Constructor for a stackable bar/column series
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.GetXAxisRange(Visiblox.Charts.IRange)">
      <summary>
            Calculate the XRange of the series according to its type.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.GetYAxisRange(Visiblox.Charts.IRange)">
      <summary>
            Calculate the YRange of the series according to its type.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.GetValueAxisRange(Visiblox.Charts.IRange)">
      <summary>
            Calculate the value axis range, given the unmodified base range
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.GetBaseAxisRange(Visiblox.Charts.IRange)">
      <summary>
            Calculate the base axis range, given the unmodified base range
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.GetBaseValue(Visiblox.Charts.IRange,Visiblox.Charts.IRange)">
      <summary>
            Get the base value of the axis from which bars/columns should grow (eg 0.0)
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.GetBaseValue(Visiblox.Charts.IRange)">
      <summary>
            Get the base value of the axis from which bars/columns should grow (eg 0.0)
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.GetAxisAValue(Visiblox.Charts.IDataPoint)">
      <summary>
            Gets the value along the correct axis.
            A=X,B=Y for column series, A=Y,B=X for bar series.
            </summary>
      <param name="dataPoint">The data point to fetch a value for.</param>
      <returns>Appropriate value</returns>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.GetAxisBValue(Visiblox.Charts.IDataPoint)">
      <summary>
            Gets the value along the correct axis.
            A=X,B=Y for column series, A=Y,B=X for bar series.
            </summary>
      <param name="dataPoint">The data point to fetch a value for.</param>
      <returns>Appropriate value</returns>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.GetXMargin(System.Boolean)">
      <summary>
        <see cref="P:Visiblox.Charts.Primitives.IMarginPreference.XMargin" />
      </summary>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.GetYMargin(System.Boolean)">
      <summary>
        <see cref="P:Visiblox.Charts.Primitives.IMarginPreference.YMargin" />
      </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.Series">
      <summary>
            Series this is a calculator for.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.AxisA">
      <summary>
            Gets the horizontal axis.
            This is the X axis for a column series and Y axis for a bar series.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.AxisB">
      <summary>
            Gets the vertical axis.
            This is the Y axis for a column series and X axis for a bar series.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.IsXMinimumMarginEnabled">
      <summary>
        <see cref="P:Visiblox.Charts.Primitives.IMarginPreference.IsXMinimumMarginEnabled" />
      </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.IsXMaximumMarginEnabled">
      <summary>
        <see cref="P:Visiblox.Charts.Primitives.IMarginPreference.IsXMaximumMarginEnabled" />
      </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.IsYMinimumMarginEnabled">
      <summary>
        <see cref="P:Visiblox.Charts.Primitives.IMarginPreference.IsYMinimumMarginEnabled" />
      </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesRangeCalculator.IsYMaximumMarginEnabled">
      <summary>
        <see cref="P:Visiblox.Charts.Primitives.IMarginPreference.IsYMaximumMarginEnabled" />
      </summary>
    </member>
    <member name="T:Visiblox.Charts.IChartSeriesCommon">
      <summary>
            Defines members both Cartesian and radial series implement.
            </summary>
      <remarks>
            The common members that both Cartesian and radial series need to implement include the 
            data series (<see cref="M:Visiblox.Charts.IChartSeriesCommon.IsDataSeriesValid" />,<see cref="E:Visiblox.Charts.IChartSeriesCommon.DataSeriesCollectionChanged" />),
            range of the series (<see cref="P:Visiblox.Charts.IChartSeriesCommon.XRange" />, <see cref="P:Visiblox.Charts.IChartSeriesCommon.YRange" />)
            and initialization logic (<see cref="M:Visiblox.Charts.IChartSeriesCommon.Init" />, <see cref="M:Visiblox.Charts.IChartSeriesCommon.DeInit" />).
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.IChartSeriesCommon.IsDataSeriesValid">
      <summary>
            Determines whether the <see cref="T:Visiblox.Charts.IDataSeries" /> is valid.
            </summary>
      <returns>True if it is valid and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.IChartSeriesCommon.Init">
      <summary>
            Initialises the series, registering event handlers.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IChartSeriesCommon.DeInit">
      <summary>
            De-initialises the series, removing any event handlers present (but retaining references to its axes, data series, etc).
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IChartSeriesCommon.SelectBaseAxis">
      <summary>
            Determines which axis should be used as the base axis for this series type.
            </summary>
      <returns>The axis to use as the base axis.</returns>
    </member>
    <member name="M:Visiblox.Charts.IChartSeriesCommon.SelectPerpendicularAxis">
      <summary>
            Determines which axis should be used as the perpendicular axis for this series type.
            </summary>
      <returns>The axis to use as the perpendicular axis.</returns>
    </member>
    <member name="P:Visiblox.Charts.IChartSeriesCommon.XRange">
      <summary>
            Gets or sets the X range of the plotted series. This is a volatile object.
            </summary>
      <remarks>This may be the data series value range, or may be enlarged to account for the displayed width/height of points.
            For example the X range occupied by a column series is wider than the range of the data by half of the width of a column, on both maximum and minimum.</remarks>
      <remarks> Do not change the properties on this object as it may be overwritten by the chart. 
            Instead use Range to set a specific range.</remarks>
    </member>
    <member name="P:Visiblox.Charts.IChartSeriesCommon.YRange">
      <summary>
            Gets or sets the Y range of the plotted series. This is a volatile object.
            </summary>
      <remarks>This may be the data series value range, or may be enlarged to account for the displayed width/height of points.
            For example the Y range occupied by a bar series is wider than the range of the data by half of the width of a bar, on both maximum and minimum.</remarks>
      <remarks> Do not change the properties on this object as it may be overwritten by the chart. 
            Instead use Range to set a specific range.</remarks>
    </member>
    <member name="E:Visiblox.Charts.IChartSeriesCommon.DataSeriesCollectionChanged">
      <summary>
            Occurs when the DataSeries collection changes, or a point within the collection
            raises a PropertyChanged event.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IChartSeriesCommon.NormalStyle">
      <summary>
            Gets or sets the style applied to the series. Use this setter to set the style of the chart 
            instead of the Style property on <see cref="T:System.Windows.FrameworkElement" /> objects.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IChartSeriesCommon.IsDisplayedOnLegend">
      <summary>
            Gets or sets whether the series should be displayed on the legend of the chart.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IChartSeries`2.IsPointRenderable(`1)">
      <summary>
            Returns whether the point can be rendered on the canvas.
            </summary>
      <param name="dataPoint">Data point to test.</param>
      <returns>Whether the point can be rendered.</returns>
    </member>
    <member name="M:Visiblox.Charts.IChartSeries`2.GetPointRenderPosition(`1)">
      <summary>
            Returns the physical render coordinates of the logical point <paramref name="dataPoint" />.
            </summary>
      <param name="dataPoint">The data point to get the render position of.</param>
      <returns>The render coordinates of <paramref name="dataPoint" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.IChartSeries`2.GetFirstOrDefault">
      <summary>
            Get the first or default data point from the DataSeries.
            </summary>
      <returns>The first data point or null.</returns>
    </member>
    <member name="P:Visiblox.Charts.IChartSeries`2.DataSeries">
      <summary>
            Gets or sets the data series this plotted by this series.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IDataLabelAware">
      <summary>
            Implemented by classes that have data labels associated with <see cref="T:Visiblox.Charts.IDataPoint" />s.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IDataLabelAware.GetOrAddDataLabels(Visiblox.Charts.IDataPoint)">
      <summary>
            Retrieves the label(s) associated with the given dataPoint, or some blank labels if none have yet been added to the label dictionary.  
            Maintains the dictionary between data points and lists of labels.  
            </summary>
      <param name="dataPoint">The data point for which to retrieve the labels.</param>
      <returns>The labels associated with the specified point.</returns>
    </member>
    <member name="M:Visiblox.Charts.IDataLabelAware.InitializeDataLabels(Visiblox.Charts.IDataPoint)">
      <summary>
            Creates new label(s) for the data point or retrieves existing ones if they're there.  
            Sets the LabelText of the DataLabels in a series-specific way.  
            </summary>
      <param name="dataPoint">The data point for which to create data labels.</param>
    </member>
    <member name="M:Visiblox.Charts.IDataLabelAware.GetDataLabels">
      <summary>
            An enumerator over all labels.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.IDataLabelAware.GetDataLabelString(Visiblox.Charts.IAxisCommon,Visiblox.Charts.IAxisCommon,Visiblox.Charts.IDataPoint,System.String)">
      <summary>
            Provides the formatted data label.
            </summary>
      <param name="xAxis">The x axis against which the labels are plotted.</param>
      <param name="yAxis">The y axis against which the labels are plotted.</param>
      <param name="dataPoint">The data point to create a label for.</param>
      <param name="formatString">An optional format string to apply to the label.</param>
      <returns>The formatted label string.</returns>
    </member>
    <member name="M:Visiblox.Charts.IDataLabelAware.SpecializeLabel(Visiblox.Charts.IDataPoint)">
      <summary>
            Modifies the label(s) in ways that are specific to the given series.
            </summary>
      <param name="dataPoint">The data point for which to modify the associated data labels.</param>
    </member>
    <member name="M:Visiblox.Charts.IDataLabelAware.StyleDataLabel(Visiblox.Charts.IDataPoint,System.Int32)">
      <summary>
            Styles the data label(s).
            </summary>
      <param name="dataPoint">The data point for which to style the associated data label.</param>
      <param name="index">The index of the data label to style.</param>
    </member>
    <member name="M:Visiblox.Charts.IDataLabelAware.AddDataLabelToRootZoomCanvas(Visiblox.Charts.IDataPoint)">
      <summary>
            Adds the label(s) to the chart's plot area if they aren't already there.
            </summary>
      <param name="dataPoint">The data point for the data labels to add.</param>
    </member>
    <member name="M:Visiblox.Charts.IDataLabelAware.LayoutDataLabel(Visiblox.Charts.IDataPoint)">
      <summary>
            Position the label(s) around the data point, respecting desired position and collisions.
            </summary>
      <param name="dataPoint">The data point for the data labels to layout</param>
    </member>
    <member name="P:Visiblox.Charts.IDataLabelAware.ShowDataLabels">
      <summary>
            Gets or sets whether data labels are rendered or not.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IDataLabelAware.ZoomPending">
      <summary>
            Gets or sets whether data labels are rendered or not during a zoom.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IDataLabelAware.LabelFormatString">
      <summary>
            Gets or sets the format string used for any data labels.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IPointRenderingSeries`1">
      <summary>
            Implementations of this interface raise a <see cref="E:Visiblox.Charts.IPointRenderingSeries`1.PointRendered" /> every time a data point is rendered.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="E:Visiblox.Charts.IPointRenderingSeries`1.PointRendered">
      <summary>
            This event is raised when a <see cref="T:System.Windows.FrameworkElement" /> is rendered by the chart after all the chart methods are finished with it.  This
            provides a mechanism for external classes to alter the rendering of individual points, for example to change the styling of a given
            point.  Both the data point and the render element are provided in the event arguments.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.PointRenderedEventArgs`1">
      <summary>
            Event arguments for the PointRendered method.  The arguments identify the point being rendered and its visual representation.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PointRenderedEventArgs`1.#ctor(Visiblox.Charts.IDataPoint,`0)">
      <summary>
            Construct a new event argument object.
            </summary>
      <param name="dataPoint">The data point being rendered.</param>
      <param name="element">The visual representation.</param>
    </member>
    <member name="P:Visiblox.Charts.PointRenderedEventArgs`1.DataPoint">
      <summary>
            Gets the data point which this event relates to.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PointRenderedEventArgs`1.Element">
      <summary>
            Gets the framework element which identifies the visual element being displayed for this point.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ISelectable">
      <summary>
            Defines members a class needs to implement in order to support selection.  
            Both selection and highlighting of the entire class and selection of contained items is covered.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ISelectable.IsSelected">
      <summary>
            Gets or sets whether the series is selected.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ISelectable.IsHighlighted">
      <summary>
            Gets or sets whether the series is highlighted.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ISelectable.HighlightingEnabled">
      <summary>
            Gets or sets whether the series can be highlighted by the user.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ISelectable.SelectionMode">
      <summary>
            Gets or sets how the series supports selection.
            </summary>
      <remarks>
        <para>
            The options are no selection, selection of the entire
            series, selection of a single individual point, or the selection of multiple points. These options are 
            mutually exclusive.
            </para>
        <para>
            Selection of points is generally via clicking on the individual point (see <see cref="P:Visiblox.Charts.ISelectable.SelectedItems" />) 
            while selection of the entire series is via clicking on some part of the series (see <see cref="P:Visiblox.Charts.Primitives.IInteractable.IsSelected" />).
            (different series may choose to
            support this in different ways as appropriate).
            </para>
      </remarks>
    </member>
    <member name="P:Visiblox.Charts.ISelectable.SelectedItem">
      <summary>
            Gets or sets the selected item. In case of multiple selected items, it refers to the first one.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ISelectable.SelectedItems">
      <summary>
            Gets the list of selected points.
            </summary>
      <remarks>
        <para>
            The selected points collection is altered by clicking on the points of a series, but
            can also be manipulated programmatically.
            </para>
      </remarks>
    </member>
    <member name="E:Visiblox.Charts.ISelectable.SelectionChanged">
      <summary>
            Occurs when the currently selected item changes.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IStyleProvider">
      <summary>
            Defines the operation, called by the <see cref="T:Visiblox.Charts.SimplePalette" />, that generates styles for all the palette colours.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IStyleProvider.GetStylesForColour(System.Windows.Media.Color,System.Windows.Style)">
      <summary>
            Generates the correct series style for the given palette <paramref name="color" />.
            </summary>
      <param name="color">The palette color to be used.</param>
      <param name="style">The original style.</param>
      <returns>The original style where the colors have been replaced by <paramref name="color" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.TouchBehaviour.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TouchBehaviour.Init">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.TouchBehaviour.DeInit">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.TouchBehaviour.XZoomEnabledProperty">
      <summary>
            Identifies the XZoomEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TouchBehaviour.YZoomEnabledProperty">
      <summary>
            Identifies the YZoomEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TouchBehaviour.XPanEnabledProperty">
      <summary>
            Identifies the XPanEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TouchBehaviour.YPanEnabledProperty">
      <summary>
            Identifies the YPanEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TouchBehaviour.RestrictGesturesToDataAreaProperty">
      <summary>
            Identifies the RestrictGesturesToDataArea Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TouchBehaviour.RelativeAxesToTransformProperty">
      <summary>
            Identifies the RelativeAxesToTransform Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TouchBehaviour.DisableAxisRenderingProperty">
      <summary>
            Identifies the DisableAxisRendering Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TouchBehaviour.DisableDataLabelRenderingProperty">
      <summary>
            Identifies the DisableDataLabelRendering Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TouchBehaviour.ExcludedAxes">
      <summary>
            The set of axes that should be excluded from any transform operation
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TouchBehaviour.XZoomEnabled">
      <summary>
            Gets or sets whether zooming in the X direction is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TouchBehaviour.YZoomEnabled">
      <summary>
            Gets or sets whether zooming in the Y direction is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TouchBehaviour.XPanEnabled">
      <summary>
            Gets or sets whether panning in the X direction is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TouchBehaviour.YPanEnabled">
      <summary>
            Gets or sets whether panning in the Y direction is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TouchBehaviour.RestrictGesturesToDataArea">
      <summary>
            Gets or sets whether gestures are restricted when the limits of the data are reached. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TouchBehaviour.RelativeAxesToTransform">
      <summary>
            Gets or sets the axes that will be acted upon when an event comes from an axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TouchBehaviour.DisableAxisRendering">
      <summary>
            Gets or sets whether to disable the rendering of axes for the duration of a zoom to improve performance. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TouchBehaviour.DisableDataLabelRendering">
      <summary>
            Gets or sets whether to disable the rendering of data labels for the duration of a zoom to improve performance and avoid the consequences of dropped events. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ColorAxis">
      <summary>
            A logical axis which provides a mapping between a data value and a color.
            The mapping is handled by the <see cref="P:Visiblox.Charts.ColorAxis.ColorMap" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.LogicalAxisBase`2">
      <summary>Provides a base implementation of <see cref="T:Visiblox.Charts.ILogicalAxis" />. An <see cref="T:Visiblox.Charts.ILogicalAxis" /> represents a single chart axis which has no visual display.</summary>
      <remarks>The main responsibility of a <see cref="T:Visiblox.Charts.ILogicalAxis" /> is to provide a mapping between the data space and the logical space.</remarks>
      <typeparam name="TComparable">The value type for this axis.</typeparam>
      <typeparam name="TLogical">The type of data stored in logical values</typeparam>
      <seealso cref="T:Visiblox.Charts.ILogicalAxis" />
      <seealso cref="T:Visiblox.Charts.LogicalIntervalAxis" />
      <seealso cref="T:Visiblox.Charts.ColorAxis" />
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.CreateRange">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.#ctor">
      <summary>
            Default constructor, sets up default properties.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.Invalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.DoInvalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.SetActualRange(Visiblox.Charts.IRange)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.GrowActualRange">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.CreateRangeWithEffectiveLimits(Visiblox.Charts.IRange{`0})">
      <summary>
            Factory method. Returns the range type used by the axis implementation as a range with effective limits.
            Clones the <see cref="P:Visiblox.Charts.IRange.Maximum" /> and <see cref="P:Visiblox.Charts.IRange.Minimum" /> from <paramref name="range" />.
            </summary>
      <param name="range">The range describing the maximum and minimum extents to set on the new range with effective limits.</param>
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.GetDataValueAsLogicalValue(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.GetLogicalValueAsDataValue(`1)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.RangePropertyChangedInternal(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Called when a property of <see cref="P:Visiblox.Charts.LogicalAxisBase`2.Range" /> has changed. Override in child classes
            to handle this event.
            </summary>
      <param name="sender">The sender of the property changed event.</param>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.ComputeEffectiveRange">
      <summary>
            Re-computes <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMaximum" /> and <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMaximum" />
            on <see cref="P:Visiblox.Charts.LogicalAxisBase`2.ActualRange" />. 
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.GetActualMinimumDisplayValue">
      <summary>
            Returns the display value of the beginning of the rendered range.
            This implementation returns the render position of ActualRange.Minimum.
            Override if needed to modify this value.
            </summary>
      <returns>The display value.</returns>
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.GetActualMaximumDisplayValue">
      <summary>
            Returns the display value of the end of the rendered range.
            This implementation returns the render position of ActualRange.Maximum.
            Override if needed to modify this value.
            </summary>
      <returns>The display value.</returns>
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.ConvertToTComparable(System.IComparable)">
      <summary>
            Converts value to TComparable.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>The casted or converted TComparable value of the passed parameter. 
                Throws InvalidCastException if the conversion is not possible.</returns>
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.GetDataValueAsAxisValue(`0)">
      <summary>
            Converts a data value into an arbitrary double scale. This removes the complexity of converting to/from a render position which is handled
            in <see cref="T:Visiblox.Charts.AxisBase`1" />.
            </summary>
      <remarks>
            Converting a Data value to and from a Render position requires finding the data value relative to the current location of the left most 
            Data value and the height/width of the chart. This method is provided to remove the need to implement this boiler plate code
            and allow an implementation to simply convert the Data value into an arbitrary double scale, which will be converted to a render position 
            internally.
            </remarks>
      <remarks>
            This is the inverse of <see cref="M:Visiblox.Charts.LogicalAxisBase`2.GetAxisValueAsDataValue(System.Double)" />.</remarks>
      <example>
            A DateTime axis implementation could use the Ticks value of the DateTime passed through.
            </example>
      <example>
            A double-based axis implementation could simply return the Data value as a double.
            </example>
      <param name="dataValue">A data value.</param>
      <returns>Arbitrary axis value corresponding to <paramref name="dataValue" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.GetAxisValueAsDataValue(System.Double)">
      <summary>
            Converts a value in the arbitrary double scale into a data value. This removes the complexity of converting to/from a 
            render position which is handled in <see cref="T:Visiblox.Charts.AxisBase`1" />.
            </summary>
      <remarks>
            Converting a Data value to and from a Render position requires finding the data value relative to the current location of the left most 
            Data value and the height/width of the chart. This method is provided to remove the need to implement this boiler plate code
            and allow an implementation to simply convert an arbitrary double scale into the Data value, which will be converted to a render position 
            internally.
            </remarks>
      <remarks>
            This is the inverse of <see cref="M:Visiblox.Charts.LogicalAxisBase`2.GetDataValueAsAxisValue(`0)" />.</remarks>
      <example>
            A DateTime axis implementation could return the DateTime value of the number of Ticks passed through.
            </example>
      <example>
            A double-based axis implementation could simply return the double as the Data value.
            </example>
      <param name="axisValue">The value (in the axis specific axis range) to retrieve as a data value.</param>
      <returns>Data value corresponding to <paramref name="axisValue" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.OnActualRangePropertyChanged">
      <summary>
            Invoked when ActualRange has changed.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LogicalAxisBase`2.RangeProperty">
      <summary>
            Identifies the Range Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LogicalAxisBase`2.AutoScaleToVisibleDataProperty">
      <summary>
            Identifies the AutoScaleToVisibleData Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LogicalAxisBase`2.ZoomProperty">
      <summary>
            Identifies the Zoom Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LogicalAxisBase`2.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.LogicalAxisBase`2.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.LogicalAxisBase`2.ActualRangeValid">
      <summary>
            This property defines whether the current ActualRange is valid.  This is a cached version of ActualRange.IsValid for performance reasons.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.LogicalAxisBase`2.InvalidationEnded">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.LogicalAxisBase`2.Rendered">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.LogicalAxisBase`2.ActualRange">
      <inheritdoc cref="P:Visiblox.Charts.IAxis.ActualRange" />
    </member>
    <member name="P:Visiblox.Charts.LogicalAxisBase`2.ScalingDimension">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.LogicalAxisBase`2.Range">
      <summary>
            Gets or sets the user-specified range of this axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LogicalAxisBase`2.AutoScaleToVisibleData">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.LogicalAxisBase`2.Zoom">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.LogicalAxisBase`2.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ColorAxis.ColorMapProperty">
      <summary>
            Identifies the ColorMap Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ColorAxis.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ColorAxis.ResubscribeToPropertyChanged(Visiblox.Charts.IColorMap,Visiblox.Charts.IColorMap)">
      <summary>
            Re-subscribe to PropertyChanged event.
            </summary>
      <param name="oldColorMap">The old color map from which to unsubscribe handlers.</param>
      <param name="newColorMap">The new color map to subscribe handlers to.</param>
    </member>
    <member name="M:Visiblox.Charts.ColorAxis.CreateRange">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ColorAxis.GetDataValueAsAxisValue(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ColorAxis.GetAxisValueAsDataValue(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ColorAxis.CreateRangeWithEffectiveLimits(Visiblox.Charts.IRange{System.Double})">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ColorAxis.GetDataValueAsLogicalValue(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ColorAxis.GetLogicalValueAsDataValue(System.Windows.Media.Color)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ColorAxis.ColorMap_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Invoked when a ColorMap property has changed. This can be overridden by subclasses. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="P:Visiblox.Charts.ColorAxis.CachedColorMap">
      <summary>
            Gets or sets the cached <see cref="P:Visiblox.Charts.ColorAxis.ColorMap" /> to avoid hitting it repeatedly (as it is a Dependency Property).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ColorAxis.ColorMap">
      <summary>
            Gets or sets the color map. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DefaultColorMap">
      <summary>
            The default implementation of <see cref="T:Visiblox.Charts.IColorMap" /> which provides a mapping between a data value and a color.
            A number of predefined palettes are available and the selected palette is determined by the <see cref="P:Visiblox.Charts.DefaultColorMap.ColorMapName" /> value.
            The mapping is handled by projecting the data value, which is between the minimum and maximum of the range,
            to the logical space, which is defined by the <see cref="P:Visiblox.Charts.DefaultColorMap.ColorMapName" /> size.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IColorMap">
      <summary>
            Represents a color map that can be used by a <see cref="T:Visiblox.Charts.ColorAxis" /> and must provide a mapping between data values and colors.
            <remarks>The default implementation is <see cref="T:Visiblox.Charts.DefaultColorMap" />.</remarks></summary>
    </member>
    <member name="M:Visiblox.Charts.IColorMap.Init">
      <summary>
            Initialises the color map, registering event handlers.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IColorMap.DeInit">
      <summary>
            De-initialises the color map, removing any event handlers present.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IColorMap.GetDataValueAsColor(System.Double,System.Double,System.Double)">
      <summary>
            Converts the given <paramref name="dataValue" />, which is between <paramref name="lowerVisibleBound" /> and <paramref name="upperVisibleBound" />, into the equivalent Color.
            </summary>
      <param name="dataValue">The data value that should be converted</param>
      <param name="lowerVisibleBound">The lower bound of the data space</param>
      <param name="upperVisibleBound">The upper bound of the data space</param>
      <returns>The Color that corresponds to the <paramref name="dataValue" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.IColorMap.GetColorAsDataValue(System.Windows.Media.Color,System.Double,System.Double)">
      <summary>
            Converts the given <paramref name="color" /> into the corresponding data value, which should be between <paramref name="lowerVisibleBound" /> and <paramref name="upperVisibleBound" />.
            </summary>
      <param name="color">The color that should be converted</param>
      <param name="lowerVisibleBound">The lower bound of the data space</param>
      <param name="upperVisibleBound">The upper bound of the data space</param>
      <returns>The data value that corresponds to the <paramref name="color" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.DefaultColorMap.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DefaultColorMap.Init">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DefaultColorMap.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DefaultColorMap.GetDataValueAsColor(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DefaultColorMap.GetColorAsDataValue(System.Windows.Media.Color,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DefaultColorMap.CreateInstanceCore">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.DefaultColorMap.ColorMapNameProperty">
      <summary>
            Identifies the ColorMapName Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DefaultColorMap.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.DefaultColorMap.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.DefaultColorMap.ColorMapName">
      <summary>
            Gets or sets the color palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.DefaultColorMap.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.LogicalIntervalAxis">
      <summary>
            A logical axis which provides a mapping between a data value and an interval value  (an interval in this context could be, for example,
            a contour line, or a tick placement).
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LogicalIntervalAxis.MAXIMUM_ALLOWED_TICKS">
      <summary>
            Defines the maximum number of ticks that can be created.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LogicalIntervalAxis.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LogicalIntervalAxis.CreateRange">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogicalIntervalAxis.GetDataValueAsLogicalValue(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogicalIntervalAxis.GetLogicalValueAsDataValue(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogicalIntervalAxis.CreateRangeWithEffectiveLimits(Visiblox.Charts.IRange{System.Double})">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogicalIntervalAxis.GetMinorIntervalValues">
      <summary>
             Returns list of minor interval values for this axis 
             by calculating the interval spacing and applying it to the effective range.
            </summary>
      <returns>A list of values where minor intervals are.</returns>
    </member>
    <member name="M:Visiblox.Charts.LogicalIntervalAxis.GetMajorIntervalValues">
      <summary>
             Returns list of major interval values for this axis 
             by calculating the interval spacing and applying it to the effective range.
            </summary>
      <returns>A list of values where major intervals are.</returns>
    </member>
    <member name="M:Visiblox.Charts.LogicalIntervalAxis.DoInvalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogicalIntervalAxis.GetDataValueAsAxisValue(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogicalIntervalAxis.GetAxisValueAsDataValue(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogicalIntervalAxis.GrowActualRange">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LogicalIntervalAxis.ComputeActualInterval">
      <summary>
            Calculates the <see cref="P:Visiblox.Charts.LogicalIntervalAxis.ActualMajorInterval" /> of the axis.
            </summary>
      <remarks>
            Internal for UnitTesting
            </remarks>
      <returns>true if <see cref="P:Visiblox.Charts.LogicalIntervalAxis.ActualMajorInterval" />, <see cref="P:Visiblox.Charts.LogicalIntervalAxis.ActualMinorInterval" /> has changed</returns>
    </member>
    <member name="F:Visiblox.Charts.LogicalIntervalAxis.MajorIntervalProperty">
      <summary>
            Identifies the MajorInterval Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LogicalIntervalAxis.MinorIntervalProperty">
      <summary>
            Identifies the MinorInterval Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LogicalIntervalAxis.FormattedActualMajorIntervalProperty">
      <summary>
            Identifies the FormattedActualMajorInterval Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LogicalIntervalAxis.FormattedActualMinorIntervalProperty">
      <summary>
            Identifies the FormattedActualMinorInterval Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LogicalIntervalAxis.LabelFormatStringProperty">
      <summary>
            Identifies the LabelFormatString Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LogicalIntervalAxis.NumberOfIntervals">
      <summary>
            The number of intervals displayed
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LogicalIntervalAxis.ActualMajorInterval">
      <summary>
            Gets the actual interval at which major intervals are drawn on the axis. 
            </summary>
      <remarks>This property is set to <see cref="P:Visiblox.Charts.AxisCommonBase`1.MajorTickInterval" /> if it exists, otherwise it is computed based on the data ranges.</remarks>
    </member>
    <member name="P:Visiblox.Charts.LogicalIntervalAxis.ActualMinorInterval">
      <summary>
            Gets the actual interval at which minor intervals are drawn on the axis.
            </summary>
      <remarks>This property is set to <see cref="P:Visiblox.Charts.AxisCommonBase`1.MinorTickInterval" /> if it exists, otherwise it is computed based on the data ranges.</remarks>
    </member>
    <member name="P:Visiblox.Charts.LogicalIntervalAxis.MajorInterval">
      <summary>
            Gets or sets the numeric distance between major intervals. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LogicalIntervalAxis.MinorInterval">
      <summary>
            Gets or sets the numeric distance between minor intervals. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LogicalIntervalAxis.FormattedActualMajorInterval">
      <summary>
            Gets the numeric distance between major intervals formatted according to <see cref="P:Visiblox.Charts.LogicalIntervalAxis.LabelFormatString" />, it should not be set directly. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LogicalIntervalAxis.FormattedActualMinorInterval">
      <summary>
            Gets the numeric distance between minor intervals formatted according to <see cref="P:Visiblox.Charts.LogicalIntervalAxis.LabelFormatString" />, it should not be set directly. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LogicalIntervalAxis.LabelFormatString">
      <summary>
            Gets or sets the format string used for formatting the labels. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BitmapManager">
      <summary>
            Manages the collation of bitmaps from multiple <see cref="T:Visiblox.Charts.RasterChartSeriesCommonBase" />s
            such that they share one bitmap and update when required.
            </summary>
      <remarks>When a raster series requires a render update, it must invalidate this BitmapManager, which will in turn ask all 
            series sharing its bitmap to render, and push this rendered bitmap to the series responsible for display.</remarks>
    </member>
    <member name="M:Visiblox.Charts.BitmapManager.#ctor(System.Windows.Size)">
      <summary>
            Constructor.
            </summary>
      <param name="size">
      </param>
    </member>
    <member name="M:Visiblox.Charts.BitmapManager.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructor.
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:Visiblox.Charts.BitmapManager.RegisterSeries(Visiblox.Charts.RasterChartSeriesCommonBase)">
      <summary>
            Registers the given <paramref name="rasterSeries" /> with this <see cref="T:Visiblox.Charts.BitmapManager" />.
            Any change in size will update the collating bitmap.  When <see cref="!:GetImage" /> is called
            this series will now be required to write its contents to the shared bitmap.
            </summary>
      <param name="rasterSeries">
      </param>
    </member>
    <member name="M:Visiblox.Charts.BitmapManager.UnregisterSeries(Visiblox.Charts.RasterChartSeriesCommonBase)">
      <summary>
            The given <paramref name="rasterSeries" /> is no longer associated with this bitmap.
            Changes in size and content of the series is now ignored.
            </summary>
      <param name="rasterSeries">
      </param>
    </member>
    <member name="M:Visiblox.Charts.BitmapManager.GetBitmap">
      <summary>
            Iterates over the <see cref="T:Visiblox.Charts.RasterChartSeriesCommonBase" />s that are registered with it
            and gets each of them to write its content to a common <see cref="T:Visiblox.Charts.WriteableBitmapAdapter" />
            (i.e. by calling <see cref="M:Visiblox.Charts.RasterChartSeriesCommonBase.GetImage(Visiblox.Charts.WriteableBitmapAdapter)" />).
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BitmapManager.Invalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BitmapManager.DoInvalidate">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BitmapManager.Size">
      <summary>
            Size of the bitmap.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BitmapManager.OwnerSeries">
      <summary>
            The series which owns the image associated with this <see cref="T:Visiblox.Charts.BitmapManager" />. This is the only series which has
            the right to display the rendered bitmap in an image control, other series merely render on top of the bitmap on request.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BitmapManager.Rendered">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.BitmapManager.InvalidationEnded">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.DataPoint3D`3">
      <summary>
            Concrete implementation of IDataPoint3D representing a 3D data point.
            </summary>
      <typeparam name="TX">The type of X axis data</typeparam>
      <typeparam name="TY">The type of Y axis data</typeparam>
      <typeparam name="TZ">The type of Z axis data</typeparam>
    </member>
    <member name="T:Visiblox.Charts.DataPoint`2">
      <summary>
            Represents a single-valued data point which is stored in the <see cref="T:Visiblox.Charts.DataSeries`2" /> class.
            </summary>
      <remarks>
            DataPoint defines a two-dimensional (X and Y) point.  It implements <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> to allow
            the chart to respond to changes in the X or Y values dynamically.  It does not, however, support multiple Y values.
            To use a data point with multiple Y values see <see cref="T:Visiblox.Charts.MultiValuedDataPoint`2" />.
            To create data points automatically from a data source via binding, see <see cref="T:Visiblox.Charts.BindableDataSeries" /> (this also supports multiple Y values).
            </remarks>
      <typeparam name="TX">The X axis value type</typeparam>
      <typeparam name="TY">The Y axis value type</typeparam>
    </member>
    <member name="T:Visiblox.Charts.IObservableDataPoint">
      <summary>
            Represents an <see cref="T:Visiblox.Charts.IDataPoint" /> that implements <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
      <remarks>
            The IObservableDataPoint also defines setters on the X and Y properties of the data point.
            This interface is inherited by <see cref="T:Visiblox.Charts.DataPoint`2" />.
            </remarks>
      <seealso cref="T:Visiblox.Charts.IDataPoint" />
    </member>
    <member name="T:Visiblox.Charts.IDataPoint">
      <summary>
            Represents a point within a data series.
            </summary>
      <remarks>
            IDataPoint can define either a two dimensional point with X and Y value (See <see cref="T:Visiblox.Charts.DataPoint`2" /> and <see cref="T:Visiblox.Charts.BindableDataPoint" />),
            or a multi Y-dimensional point with a single X value and multiple Y values (See <see cref="T:Visiblox.Charts.MultiValuedDataPoint`2" />).
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.IDataPoint.Item(System.Object)">
      <summary>
            Gets the Y values for this data point associated with this indexer.  This is of particular interest where a single data point
            has multiple y values (e.g. open, close, high and low).  Normally the indexer will be an enumeration or string representing the
            y value associated with it.
            </summary>
      <param name="indexer">The key for which to look up the y value.</param>
      <returns>The y value if found or null otherwise.</returns>
    </member>
    <member name="P:Visiblox.Charts.IDataPoint.X">
      <summary>
            Gets the X value for this data point.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IDataPoint.Y">
      <summary>
            Gets the Y value for this data point.  The behaviour of this property is undefined value in the case of multiple y values
            being present, as there is no single universally correct value to return here.  In such cases the indexer should be used instead.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IDataPoint.YValueMaximum">
      <summary>
            Gets or maximum of the Y values.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IDataPoint.YValueMinimum">
      <summary>
            Gets the minimum of the Y values.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IDataPoint.Model">
      <summary>
            Gets the model item that the point represents.  In a data bound context (i.e. <see cref="T:Visiblox.Charts.BindableDataPoint" />) this
            will be the original source model object, in other cases it will be the data point itself.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IObservableDataPoint.X">
      <summary>
            Gets or sets the X value for this data point.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IObservableDataPoint.Y">
      <summary>
            Gets or sets the Y value for this data point.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DataPoint`2.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DataPoint`2.#ctor(`0,`1)">
      <summary>
            Constructor specify the X and Y values of the point.
            </summary>
      <param name="x">X value of the data point.</param>
      <param name="y">Y value of the data point.</param>
    </member>
    <member name="M:Visiblox.Charts.DataPoint`2.OnPropertyChanged(System.String)">
      <summary>
            Raises the <see cref="E:Visiblox.Charts.DataPoint`2.PropertyChanged" /> event.
            </summary>
      <param name="property">The name of the property which changed.</param>
    </member>
    <member name="M:Visiblox.Charts.DataPoint`2.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this DataPoint&lt;TX, TY&gt;.
            </summary>
      <param name="obj">The object to test for equality.</param>
      <returns>Whether <paramref name="obj" /> is equal to this object.</returns>
    </member>
    <member name="M:Visiblox.Charts.DataPoint`2.GetHashCode">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.DataPoint`2.PropertyChanged">
      <summary>
            Occurs when the X or Y property of the data point changes.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DataPoint`2.Model">
      <summary>
            This class represents itself as the model.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DataPoint`2.Item(System.Object)">
      <summary>
            Indexer for the Y Value data range.
            Because this is a single value data point this is just the Y value.
            </summary>
      <param name="indexer">The indexer (or key) of the Y value.</param>
      <returns>The Y value of the data point.</returns>
    </member>
    <member name="P:Visiblox.Charts.DataPoint`2.YValueMaximum">
      <summary>
            Gets the maximum of the Y values.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DataPoint`2.YValueMinimum">
      <summary>
            Gets the minimum of the Y values.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DataPoint`2.X">
      <summary>
            Gets or sets the X value for this data point.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DataPoint`2.Y">
      <summary>
            Gets or sets the Y value for this data point.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DataPoint`2.Tag">
      <summary>
            Gets or sets an arbitrary object value that can be used to store custom information about this element.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IDataPoint3D">
      <summary>
            Representation of a 3D data point
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IDataPoint3D.Z">
      <summary>
            Gets the Z value at which to plot the data point
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DataPoint3D`3.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DataPoint3D`3.#ctor(`0,`1,`2)">
      <summary>
            Constructor specify the X, Y and Z values of the point.
            </summary>
      <param name="x">X value of the data point.</param>
      <param name="y">Y value of the data point.</param>
      <param name="z">Z value of the data point.</param>
    </member>
    <member name="P:Visiblox.Charts.DataPoint3D`3.Z">
      <summary>
            Gets or sets the Z value for this data point.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DataSeries3D`3">
      <summary>
            An <see cref="T:Visiblox.Charts.IDataSeries3D" /> consisting of a collection of <see cref="T:Visiblox.Charts.DataPoint3D`3">DataPoint3D</see> objects.
            </summary>
      <typeparam name="TX">
      </typeparam>
      <typeparam name="TY">
      </typeparam>
      <typeparam name="TZ">
      </typeparam>
    </member>
    <member name="T:Visiblox.Charts.Primitives.RelayingObservableCollection`1">
      <summary>
            Represents a collection that relays member changed events as well as collection changed events.
            </summary>
      <remarks>
            RelayingObservableCollection automatically takes care of subscribing/unsubscribing to member 
            PropertyChanged handlers, collection changed events and propagates these via the 
            <see cref="E:Visiblox.Charts.Primitives.RelayingObservableCollection`1.PropertyChangedRelay" /> event.
            <see cref="T:Visiblox.Charts.DataSeries`2" /> inherits from this class.
            </remarks>
      <typeparam name="T">The type of the collection elements.</typeparam>
      <seealso cref="T:Visiblox.Charts.DataSeries`2" />
    </member>
    <member name="M:Visiblox.Charts.Primitives.RelayingObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>
            Inserts the given <paramref name="item" /> into the collection, adding its property changed event to the relay event.
            </summary>
      <param name="index">Index to insert the item at.</param>
      <param name="item">Item to insert.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.RelayingObservableCollection`1.RemoveItem(System.Int32)">
      <summary>
            Removes the given item from the collection, unregistering its property changed event.
            </summary>
      <param name="index">Index of the item to fetch.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.RelayingObservableCollection`1.ClearItems">
      <summary>
            Clears the collection, unregistering all property changed events.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.RelayingObservableCollection`1.OnPropertyChangedRelay(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the PropertyChangedRelay event.
            </summary>
      <param name="originalSender">The object which raised the original event.</param>
      <param name="args">The original event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.RelayingObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds multiple items to the collection. 
            </summary>
      <remarks>Fires a single reset event after all items are added. For best results use this when there are
            several or many items to add, but always use a single <see cref="M:System.Collections.ObjectModel.Collection`1.Add(`0)" /> to add individual items.</remarks>
      <param name="items">The items to add to the collection.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.RelayingObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Overrides OnCollectionChanged in order to suppress <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> 
            notifications when adding a range.
            </summary>
      <param name="e">Arguments of the event being raised.</param>
    </member>
    <member name="P:Visiblox.Charts.Primitives.RelayingObservableCollection`1.RegisterPropertyChangedHandlers">
      <summary>
            A flag that allows the collection to disable registering for property changed events.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.Primitives.RelayingObservableCollection`1.PropertyChangedRelay">
      <summary>
            Relay event: occurs when any property value has changed.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IDataSeries3D">
      <summary>
            Represents a 3D data series
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IDataSeries">
      <summary>
            Represents a collection that contains points which can be plotted on a chart but makes no assumptions about the way in which that
            data is visually presented.
            </summary>
      <remarks>
        <para>IDataSeries is used as the data source for all <see cref="T:Visiblox.Charts.IChartSeries" /> and the <see cref="T:Visiblox.Charts.PieChart" />.</para>
        <para>To create an IDataSeries bound to an existing data source, see <see cref="T:Visiblox.Charts.BindableDataSeries" />, or to create
            an IDataSeries by directly constructing data points see <see cref="T:Visiblox.Charts.DataSeries`2" />.</para>
      </remarks>
      <remarks>
            Note when implementing this interface it is the responsibility of the implementation to ensure that the indexes contained in the 
            INotifyCollectionChangedArgs
            when the CollectionChanged event is raised match up with the data returned from the GetEnumerator call such that the index 0 refers
            to the first element returned and index n refers to the (n+1)th element returned.  Failure to correctly maintain this relationship
            this may cause unexpected behaviour during the addition or modification of data points at runtime.
            </remarks>
      <seealso cref="T:Visiblox.Charts.IChartSeries" />
      <seealso cref="T:Visiblox.Charts.DataSeries`2" />
      <seealso cref="T:Visiblox.Charts.BindableDataSeries" />
    </member>
    <member name="M:Visiblox.Charts.IDataSeries.GetSearchableSeries">
      <summary>
            Get the searchable data series associated with this DataSeries. This can either be
            the series itself, or some internal series that handles the sorting and searching.
            </summary>
      <returns>An implementation of the ISearchable interface that can be used for efficient searching of DataPoints or null if unsupported.</returns>
    </member>
    <member name="M:Visiblox.Charts.IDataSeries.GetSearchableSeries(System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Get the searchable data series associated with this DataSeries. This can either be
            the series itself, or some internal series that handles the sorting and searching.
            </summary>
      <param name="comparisonMethod">The comparison method to compare DataPoints.</param>
      <returns>An implementation of the ISearchable interface that can be used for efficient searching of DataPoints or null if unsupported.</returns>
    </member>
    <member name="P:Visiblox.Charts.IDataSeries.Title">
      <summary>
             Gets or sets the title of the data series.
            </summary>
      <remarks>The data series title is displayed in the chart legend.</remarks>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.#ctor">
      <summary>
            Constructor creating an empty data series with no title set.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.#ctor(System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating an empty data series with no title set and the given <paramref name="comparison" /> to be used by the SortedDataSeries.
            </summary>
      <param name="comparison">A Comparison{IDataPoint} delegate to be used by the SortedDataSeries.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.#ctor(System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint3D{`0,`1,`2}})">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and no title set.
            </summary>
      <param name="points">Collection of data points that the series consists of.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.#ctor(System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint3D{`0,`1,`2}},System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and no title set.
            </summary>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to be used by the SortedDataSeries.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.#ctor(System.String)">
      <summary>
            Constructor creating an empty DataSeries with the given <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.#ctor(System.String,System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating an empty DataSeries with the given <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to be used by the SortedDataSeries.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.#ctor(System.String,System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint3D{`0,`1,`2}})">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and the title <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="points">Collection of data points that the series consists of.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.#ctor(System.String,System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint3D{`0,`1,`2}},System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and the title <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to be used by the SortedDataSeries.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.#ctor(System.Boolean)">
      <summary>
            Constructor creating an empty data series with no title set and no SortedDataSeries.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.#ctor(System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint3D{`0,`1,`2}},System.Boolean)">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and no title set and no SortedDataSeries.
            </summary>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="maintainSortedDataSeries">Indicate if a SortedDataSeries should be kept in sync.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.#ctor(System.String,System.Boolean)">
      <summary>
            Constructor creating an empty DataSeries with the given <paramref name="title" /> and no SortedDataSeries.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="maintainSortedDataSeries">Indicate if a SortedDataSeries should be kept in sync.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.#ctor(System.String,System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint3D{`0,`1,`2}},System.Boolean)">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and the title <paramref name="title" /> and no SortedDataSeries.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="maintainSortedDataSeries">Indicate if a SortedDataSeries should be kept in sync.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.Add(`0,`1,`2)">
      <summary>
            Adds a <see cref="T:Visiblox.Charts.DataPoint3D`3" /> with the provided X, Y and Z values.  
            </summary>
      <param name="x">The x value of the new data point.</param>
      <param name="y">The y value of the new data point.</param>
      <param name="z">The z value of the new data point.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.InsertItem(System.Int32,Visiblox.Charts.DataPoint3D{`0,`1,`2})">
      <inheritdoc />
      <remarks>Maintain the sorted data if it is in use.</remarks>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.SetItem(System.Int32,Visiblox.Charts.DataPoint3D{`0,`1,`2})">
      <inheritdoc />
      <remarks>Maintain the sorted data if it is in use.</remarks>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.RemoveAt(System.Int32)">
      <summary>
            Remove the point at the given index. Pass this removal through to the SortedDataSeries if it is being maintained.
            </summary>
      <param name="index">The index at which the point is to be removed.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.RemoveItem(System.Int32)">
      <inheritdoc />
      <remarks>Maintain the sorted data if it is in use.</remarks>
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.ClearItems">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.GetSearchableSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DataSeries3D`3.GetSearchableSeries(System.Comparison{Visiblox.Charts.IDataPoint})">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DataSeries3D`3.MaintainSortedDataSeries">
      <summary>
            Determines whether the inner SortedDataSeries will be maintained, allowing for
            optimal searching.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DataSeries3D`3.Title">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.WriteableBitmapExtensions">
      <summary>
            Collection of draw extension methods for the Silverlight WriteableBitmap class.
            </summary>
      <summary>
            Collection of blit (copy) extension methods for the Silverlight WriteableBitmap class.
            </summary>
      <summary>
            Collection of draw extension methods for the Silverlight WriteableBitmap class.
            </summary>
      <summary>
            Collection of draw extension methods for the Silverlight WriteableBitmap class.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.Clear(Visiblox.Charts.WriteableBitmapAdapter)">
      <summary>
            Fills the whole WriteableBitmap with an empty colour (0).
            </summary>
      <param name="bmp">The WriteableBitmap.</param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.Clear(Visiblox.Charts.WriteableBitmapAdapter,System.Windows.Media.Color)">
      <summary>
            Fills the whole WriteableBitmap with a color.
            </summary>
      <param name="bmp">The WriteableBitmap.</param>
      <param name="color">The color used for filling.</param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.Blit(Visiblox.Charts.WriteableBitmapAdapter,System.Windows.Rect,Visiblox.Charts.WriteableBitmapAdapter,System.Windows.Rect,Visiblox.Charts.WriteableBitmapExtensions.BlendMode)">
      <summary>
            Copies (blits) the pixels from the WriteableBitmap source to the destination WriteableBitmap (this).
            </summary>
      <param name="bmp">The destination WriteableBitmap.</param>
      <param name="destRect">The rectangle that defines the destination region.</param>
      <param name="source">The source WriteableBitmap.</param>
      <param name="sourceRect">The rectangle that will be copied from the source to the destination.</param>
      <param name="BlendMode">The blending mode <see cref="T:Visiblox.Charts.WriteableBitmapExtensions.BlendMode" />.</param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.Blit(Visiblox.Charts.WriteableBitmapAdapter,System.Windows.Rect,Visiblox.Charts.WriteableBitmapAdapter,System.Windows.Rect)">
      <summary>
            Copies (blits) the pixels from the WriteableBitmap source to the destination WriteableBitmap (this).
            </summary>
      <param name="bmp">The destination WriteableBitmap.</param>
      <param name="destRect">The rectangle that defines the destination region.</param>
      <param name="source">The source WriteableBitmap.</param>
      <param name="sourceRect">The rectangle that will be copied from the source to the destination.</param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.Blit(Visiblox.Charts.WriteableBitmapAdapter,System.Windows.Point,Visiblox.Charts.WriteableBitmapAdapter,System.Windows.Rect,System.Windows.Media.Color,Visiblox.Charts.WriteableBitmapExtensions.BlendMode)">
      <summary>
            Copies (blits) the pixels from the WriteableBitmap source to the destination WriteableBitmap (this).
            </summary>
      <param name="bmp">The destination WriteableBitmap.</param>
      <param name="destPosition">The destination position in the destination bitmap.</param>
      <param name="source">The source WriteableBitmap.</param>
      <param name="sourceRect">The rectangle that will be copied from the source to the destination.</param>
      <param name="color">If not Colors.White, will tint the source image. A partially transparent color and the image will be drawn partially transparent.</param>
      <param name="BlendMode">The blending mode <see cref="T:Visiblox.Charts.WriteableBitmapExtensions.BlendMode" />.</param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.Blit(Visiblox.Charts.WriteableBitmapAdapter,System.Windows.Rect,Visiblox.Charts.WriteableBitmapAdapter,System.Windows.Rect,System.Windows.Media.Color,Visiblox.Charts.WriteableBitmapExtensions.BlendMode)">
      <summary>
            Copies (blits) the pixels from the WriteableBitmap source to the destination WriteableBitmap (this).
            </summary>
      <param name="bmp">The destination WriteableBitmap.</param>
      <param name="destRect">The rectangle that defines the destination region.</param>
      <param name="source">The source WriteableBitmap.</param>
      <param name="sourceRect">The rectangle that will be copied from the source to the destination.</param>
      <param name="color">If not Colors.White, will tint the source image. A partially transparent color and the image will be drawn partially transparent. If the BlendMode is ColorKeying, this color will be used as color key to mask all pixels with this value out.</param>
      <param name="BlendMode">The blending mode <see cref="T:Visiblox.Charts.WriteableBitmapExtensions.BlendMode" />.</param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.FillRectangle``1(Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester,``0,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draws a filled rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
      <param name="bmp">The WriteableBitmap.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The item to be used as a reference for the selection array.</param>
      <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
      <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
      <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
      <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
      <param name="color">The colour.</param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.FillEllipseCentered``1(Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester,``0,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
      <param name="bmp">The WriteableBitmap.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The item to be used as a reference for the selection array.</param>
      <param name="xc">The x-coordinate of the ellipses centre.</param>
      <param name="yc">The y-coordinate of the ellipses centre.</param>
      <param name="xr">The radius of the ellipse in x-direction.</param>
      <param name="yr">The radius of the ellipse in y-direction.</param>
      <param name="color">The colour for the line.</param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.FillEllipseCenteredWithRadialGradient``1(Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester,``0,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            The fill colour is a radial gradient where the center has the <paramref name="color1" /> colour and the border points the <paramref name="color2" /></summary>
      <param name="bmp">The WriteableBitmap.</param>
      <param name="hitTester">The hit locations array to be marked as appropriate.</param>
      <param name="selectionSource">The item to be used as a reference for the selection array.</param>
      <param name="xc">The x-coordinate of the ellipses centre.</param>
      <param name="yc">The y-coordinate of the ellipses centre.</param>
      <param name="xr">The radius of the ellipse in x-direction.</param>
      <param name="yr">The radius of the ellipse in y-direction.</param>
      <param name="color1">The colour for the center.</param>
      <param name="color2">The colour for the outer points.</param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.FillPolygon(Visiblox.Charts.WriteableBitmapAdapter,System.Int32[],System.Int32,Visiblox.Charts.IHitTester)">
      <summary>
            Draws a filled polygon. Add the first point also at the end of the array if the line should be closed.
            </summary>
      <param name="bmp">The WriteableBitmap.</param>
      <param name="points">The points of the polygon in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
      <param name="color">The colour for the line.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.FillPolygon``1(Visiblox.Charts.WriteableBitmapAdapter,System.Int32[],System.Int32,Visiblox.Charts.IHitTester,``0)">
      <summary>
            Draws a filled polygon. Add the first point also at the end of the array if the line should be closed.
            </summary>
      <param name="bmp">The WriteableBitmap.</param>
      <param name="points">The points of the polygon in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
      <param name="color">The colour for the line.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The item to be used as a reference for the selection array.</param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.ConvertColourToInteger(System.Windows.Media.Color)">
      <summary>
            Extension method to convert colour to integer representation.
            </summary>
      <param name="colour">The colour to convert.</param>
      <returns>The integer representation of the colour.</returns>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.DrawLine``1(Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester,``0,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draws a coloured line by connecting two points using an optimized DDA.
            </summary>
      <param name="bmp">The WriteableBitmap.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The item to be used as a reference for the selection array.</param>
      <param name="x1">The x-coordinate of the start point.</param>
      <param name="y1">The y-coordinate of the start point.</param>
      <param name="x2">The x-coordinate of the end point.</param>
      <param name="y2">The y-coordinate of the end point.</param>
      <param name="color">The colour for the line.</param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.DrawLine``1(System.Int32[],Visiblox.Charts.IHitTester,``0,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draws a coloured line by connecting two points using an optimized DDA.
            Uses the pixels array and the width directly for best performance.
            </summary>
      <param name="pixels">An array containing the pixels as int RGBA value.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The item to be used as a reference for the selection array.</param>
      <param name="pixelWidth">The width of one scanline in the pixels array.</param>
      <param name="pixelHeight">The height of the bitmap.</param>
      <param name="x1">The x-coordinate of the start point.</param>
      <param name="y1">The y-coordinate of the start point.</param>
      <param name="x2">The x-coordinate of the end point.</param>
      <param name="y2">The y-coordinate of the end point.</param>
      <param name="color">The colour for the line.</param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.DrawLine``1(System.Int32[],Visiblox.Charts.IHitTester,``0,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int32)">
      <summary>
            Draws a coloured line by connecting two points using an optimized DDA.
            Uses the pixels array and the width directly for best performance.
            </summary>
      <param name="pixels">An array containing the pixels as int RGBA value.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The item to be used as a reference for the selection array.</param>
      <param name="pixelWidth">The width of one scanline in the pixels array.</param>
      <param name="pixelHeight">The height of the bitmap.</param>
      <param name="x1">The x-coordinate of the start point.</param>
      <param name="y1">The y-coordinate of the start point.</param>
      <param name="x2">The x-coordinate of the end point.</param>
      <param name="y2">The y-coordinate of the end point.</param>
      <param name="color">The colour for the line.</param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.DrawLineAa``1(Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester,``0,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draws an anti-aliased line, using an optimized version of Gupta-Sproull algorithm
            From http://nokola.com/blog/post/2010/10/14/Anti-aliased-Lines-And-Optimizing-Code-for-Windows-Phone-7e28093First-Look.aspx
            <param name="bmp">The WriteableBitmap.</param><param name="hitTester">The hit locations array to be marked as appropriate.</param><param name="selectionSource">The item to be used as a reference for the selection array.</param><param name="x1">The x-coordinate of the start point.</param><param name="y1">The y-coordinate of the start point.</param><param name="x2">The x-coordinate of the end point.</param><param name="y2">The y-coordinate of the end point.</param><param name="color">The colour for the line.</param></summary>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.DrawLineAa``1(System.Int32[],Visiblox.Charts.IHitTester,``0,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draws an anti-aliased line, using an optimized version of Gupta-Sproull algorithm
            From http://nokola.com/blog/post/2010/10/14/Anti-aliased-Lines-And-Optimizing-Code-for-Windows-Phone-7e28093First-Look.aspx
            <param name="pixels">An array containing the pixels as int RGBA value.</param><param name="hitTester">The hit locations array to be marked as appropriate.</param><param name="selectionSource">The item to be used as a reference for the selection array.</param><param name="pixelWidth">The width of one scanline in the pixels array.</param><param name="pixelHeight">The height of the bitmap.</param><param name="x1">The x-coordinate of the start point.</param><param name="y1">The y-coordinate of the start point.</param><param name="x2">The x-coordinate of the end point.</param><param name="y2">The y-coordinate of the end point.</param><param name="color">The colour for the line.</param></summary>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.DrawRectangle``1(Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester,``0,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draws a rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
      <param name="bmp">The WriteableBitmap.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The item to be used as a reference for the selection array.</param>
      <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
      <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
      <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
      <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapExtensions.DrawEllipseCentered``1(Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester,``0,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf
            Uses a different parameter representation than DrawEllipse().
            </summary>
      <param name="bmp">The WriteableBitmap.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The item to be used as a reference for the selection array.</param>
      <param name="xc">The x-coordinate of the ellipses center.</param>
      <param name="yc">The y-coordinate of the ellipses center.</param>
      <param name="xr">The radius of the ellipse in x-direction.</param>
      <param name="yr">The radius of the ellipse in y-direction.</param>
      <param name="color">The color for the line.</param>
    </member>
    <member name="T:Visiblox.Charts.WriteableBitmapExtensions.BlendMode">
      <summary>
            The blending mode.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.WriteableBitmapExtensions.BlendMode.Alpha">
      <summary>
            Alpha blendiing uses the alpha channel to combine the source and destination. 
            </summary>
    </member>
    <member name="F:Visiblox.Charts.WriteableBitmapExtensions.BlendMode.Additive">
      <summary>
            Additive blending adds the colors of the source and the destination.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.WriteableBitmapExtensions.BlendMode.Subtractive">
      <summary>
            Subtractive blending subtracts the source color from the destination.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.WriteableBitmapExtensions.BlendMode.Mask">
      <summary>
            Uses the source color as a mask.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.WriteableBitmapExtensions.BlendMode.Multiply">
      <summary>
            Multiplies the source color with the destination color.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.WriteableBitmapExtensions.BlendMode.ColorKeying">
      <summary>
            Ignores the specified Color
            </summary>
    </member>
    <member name="F:Visiblox.Charts.WriteableBitmapExtensions.BlendMode.None">
      <summary>
            No blending just copies the pixels from the source.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.CohenSutherland">
      <summary>
            The Cohen Sutherland line clipping algorithm
            http://en.wikipedia.org/wiki/Cohen%E2%80%93Sutherland_algorithm
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CohenSutherland.CohenSutherlandLineClip(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Cohen–Sutherland clipping algorithm clips a line from
            P0 = (x0, y0) to P1 = (x1, y1) against a rectangle with
            diagonal from (xmin, ymin) to (xmax, ymax).
            </summary>
      <param name="x0">
      </param>
      <param name="y0">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="height">
      </param>
      <param name="width">
      </param>
      <returns>a list of two points in the resulting clipped line, or zero</returns>
    </member>
    <member name="T:Visiblox.Charts.Primitives.PickColorConverter">
      <summary>
            Pulls a Color out of any <see cref="T:Visiblox.Charts.IColorMap" /> that it converts, null otherwise.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PickColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Pulls a Color out of any <see cref="T:Visiblox.Charts.IColorMap" /> that it converts, null otherwise.  
            </summary>
      <param name="value">
      </param>
      <param name="targetType">
      </param>
      <param name="parameter">
      </param>
      <param name="culture">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PickColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Not implemented.  
            </summary>
      <param name="value">
      </param>
      <param name="targetType">
      </param>
      <param name="parameter">
      </param>
      <param name="culture">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Visiblox.Charts.IContourRenderer">
      <summary>
            An abstraction of the algorithm used to render contours on a contour chart series
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IContourRenderer.RenderContours(System.Double[0:,0:],System.Double[],System.Double[],System.Double[],Visiblox.Charts.LineRenderingDelegate)">
      <summary>
            Render the contour lines
            </summary>
      <param name="d">
            Matrix of data to contour.
            </param>
      <param name="x">
            Data matrix column coordinates.
            </param>
      <param name="y">
            Data matrix row coordinates.
            </param>
      <param name="z">
            Contour levels in increasing order.
            </param>
      <param name="renderer">
            The renderer.
            </param>
    </member>
    <member name="T:Visiblox.Charts.RasterContourSeries">
      <summary>
            Renders contours for the <see cref="T:Visiblox.Charts.IDataSeries3D" /> provided.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RasterChartSeriesBase3D`2">
      <summary>
            Represents the base class for <see cref="T:Visiblox.Charts.IChartSeries3D" /> implementations, defining common behaviours held for 
            all Raster 3D chart series.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RasterChartSeriesBase`2">
      <summary>
            Generic derived class with type parameter to prevent boxing.
            </summary>
      <typeparam name="T">The type of model point to be used internally to prevent boxing / unboxing.</typeparam>
      <typeparam name="TStyle">The type of style to be used internally for the series.</typeparam>
    </member>
    <member name="T:Visiblox.Charts.RasterChartSeriesCommonBase">
      <summary>
            Represents the base class for <see cref="T:Visiblox.Charts.IChartSeries" /> implementations, defining common behaviour held for
            all Raster Cartesian chart series.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IChartSeries">
      <summary>
            Defines required members a series needs to implement in order to work within a <see cref="T:Visiblox.Charts.Chart" />.
            This interface represents a graphical depiction on the chart of a set of data 
            (which in Visiblox Charts is an implementation of the <see cref="T:Visiblox.Charts.IDataSeries" /> interface).
            </summary>
      <remarks>
        <para>
          <see cref="T:Visiblox.Charts.ChartSeriesBase" /> defines an implementation of this interface, although it is not recommended
            to implement this class directly. <see cref="T:Visiblox.Charts.ChartSeriesBase" /> is extended by two further classes which provide more specific series types.
            For implementing a new single series type, it is advised to extend <see cref="T:Visiblox.Charts.ChartSingleSeriesBase" />,
            which also implements <see cref="T:Visiblox.Charts.IChartSingleSeries" />. For implementing a new multiple series type, it is advised to extend
            <see cref="T:Visiblox.Charts.ChartMultipleSeriesBase" />, which also implements <see cref="T:Visiblox.Charts.IChartMultipleSeries" />.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.ChartSeriesBase" />
      <seealso cref="P:Visiblox.Charts.Chart.Series" />
      <seealso cref="T:Visiblox.Charts.IChartSingleSeries" />
      <seealso cref="T:Visiblox.Charts.ChartSingleSeriesBase" />
      <seealso cref="T:Visiblox.Charts.IChartMultipleSeries" />
      <seealso cref="T:Visiblox.Charts.ChartMultipleSeriesBase" />
    </member>
    <member name="T:Visiblox.Charts.ILegendItemProvider">
      <summary>
            Indicates that the implementer can provide legend items to be added to the legend.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ILegendItemProvider.GetLegendItems">
      <summary>
            Gets the legend items to be added for this implementation.
            </summary>
      <returns>Zero or more legend items.  This method should never return null.</returns>
    </member>
    <member name="E:Visiblox.Charts.ILegendItemProvider.LegendItemsChanged">
      <summary>
            Occurs when legend items change requiring a refresh of the legend.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IChartSeries.OffsetProvider">
      <summary>
            An offset provider with which the series will interact with in order to get
            offset values to apply to data points.  May be used by multiple series to determine perpendicular or
            base offsets (e.g. in a stacking context) or by single series to determine base offsets (e.g. in
            column series which render next to each other in groups when multiple column series are rendered).
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.OnHighlightingEnabledPropertyChangedInternal">
      <summary>
            Overrideable method to allow triggering events when the highlighting enabled state changes.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.OnIsSelectedPropertyChangedInternal">
      <summary>
            Overrideable method to allow triggering events when the IsSelected state changes.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.OnIsHighlightedPropertyChangedInternal">
      <summary>
            Overrideable method to allow triggering events when the IsHighlighted state changes.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.OnSelectionModeChangedInternal">
      <summary>
            Overrideable method to allow triggering events when the selection mode changes
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.CalculateMinimumValue(System.Double)">
      <summary>
            Provide a suitable minimum value for calculation of subsequent hit
            testing and selection testing arrays.
            </summary>
      <param name="value">The value to calculate.</param>
      <returns>The smallest integer value greater than 0.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.SelectBaseAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.SelectPerpendicularAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.AreKeyPropertiesNull">
      <summary>
            Identify if the key rendering properties are null.
            </summary>
      <returns>True if any properties required for rendering are null and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.AxisChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when either the XAxis or YAxis property changes.
            </summary>
      <param name="e">The event args for the change, containing both the new and old axes</param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.Init">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.Invalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.DoInvalidate">
      <inheritdoc />
      <remarks>
            For implementers of series, this method checks that a number of key
            properties are non-null, clears the canvas, then invokes <see cref="M:Visiblox.Charts.RasterChartSeriesCommonBase.InvalidateBase" />.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.InitInternal">
      <summary>
            Override to implement custom initialization.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.DeInitInternal">
      <summary>
            Override to implement custom de-initialization.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.InvalidateBase">
      <summary>
            Invalidation functionality for further base classes.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.GetImage(Visiblox.Charts.WriteableBitmapAdapter)">
      <summary>
            Renders the series on top of the given <paramref name="bitmapAdapter" />.
            </summary>
      <param name="bitmapAdapter">
      </param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.UpdateImage(Visiblox.Charts.WriteableBitmapAdapter)">
      <summary>
            Updates the image held by the series with the supplied bitmap. 
            </summary>
      <remarks>Only called by the <see cref="P:Visiblox.Charts.RasterChartSeriesCommonBase.BitmapManager" /> on a series which is managing an output image.</remarks>
      <param name="newBitmap">Rendered image of all series which are drawn on this series's image.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.OnMouseMovedInternal(System.Windows.Point)">
      <summary>
            The mouse has moved to the provided position.
            Check if highlighting is enabled and if the mouse is over a point then
            highlight as appropriate.
            </summary>
      <param name="position">The screen co-ordinates of the mouse.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.OnMouseLeftButtonDownInternal(System.Windows.Point)">
      <summary>
            The left mouse button has been pressed down at the given location.
            Check if selection is enabled and select either an individual point, additional point
            or series as appropriate.
            </summary>
      <param name="position">The screen co-ordinates of the mouse depression.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.GetPointRenderPosition(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.GetLegendItems">
      <summary>
            Gets the items to display in the legend for this series.
            </summary>
      <returns>The enumeration of legend items associated with this series.  Must never return null.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.OnLegendItemsChanged(System.EventArgs)">
      <summary>
            Raises the LegendItemsChanged event.
            </summary>
      <param name="e">The change event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.IsDataSeriesValid">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.GetFirstOrDefault">
      <summary>
            Convenience method for retrieving the first element of the <see cref="P:Visiblox.Charts.RasterChartSeriesCommonBase.DataSeries" /> or null if the data series is not
            instantiated or contains no elements.
            </summary>
      <returns>The first element in the data series or null if not possible.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.ResubscribeToPropertyChangeRelay(Visiblox.Charts.IDataSeries,Visiblox.Charts.IDataSeries)">
      <summary>
            Re-subscribe to PropertyChangedRelay event.
            </summary>
      <param name="oldDataSeries">The old series from which to unsubscribe handlers.</param>
      <param name="newDataSeries">The new series to subscribe handlers to.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.ResubscribeToCollectionChanged(Visiblox.Charts.IDataSeries,Visiblox.Charts.IDataSeries)">
      <summary>
            Re-subscribe to collectionChanged event.
            </summary>
      <param name="oldDataSeries">The old series from which to unsubscribe handlers.</param>
      <param name="newDataSeries">The new series to subscribe handlers to.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.UpdateDataSeriesWithRanges">
      <summary>
            For series which store their data ranges this method is invoked when these ranges need to be updated.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.SetDataContext">
      <summary>
            Sets the DataContext of a DataSeries (which is a FrameworkElement) to this.DataContext
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.AddDataPoints(System.Int32,System.Collections.IList)">
      <summary>
            Adds the list of IDataPoints to the internal cached render points collection.
            </summary>
      <param name="index">The index to start the add from.</param>
      <param name="items">The list of items to add.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.RemoveDataPoints(System.Int32,System.Collections.IList)">
      <summary>
            Removes each IDataPoint in the provided list from the internal cached render points collection.
            </summary>
      <param name="index">The index to start the remove from.</param>
      <param name="items">The list of items to remove.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.ClearDataPoints">
      <summary>
            Clear the internal cached render points collection.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.IsPointRenderable(Visiblox.Charts.IDataPoint)">
      <summary>
            Tests if a given datapoint is renderable.
            </summary>
      <param name="dataPoint">The point to test.</param>
      <returns>True if point is renderable, false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.IsPointRenderableInternal(Visiblox.Charts.IDataPoint)">
      <summary>
            Tests if a given datapoint is renderable.
            Override this method to provide further tests.
            </summary>
      <param name="dataPoint">The point to test.</param>
      <returns>True if point is renderable, false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.OnDataSeriesChanged(System.Object,System.EventArgs)">
      <summary>
            Handler for when the <see cref="P:Visiblox.Charts.RasterChartSeriesCommonBase.DataSeries" /> property changes.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.OnDataSeriesCollectionChanged(System.Object,System.EventArgs)">
      <summary>
            Handler for when the data series collection changes.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.OnAxisPropertyChanged(System.Object,System.EventArgs)">
      <summary>
            Accessor event method.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.OnSelectionChangedInternal">
      <summary>
            Overrideable method for handling changes in selection
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.SelectedEvent">
      <summary>
            The RoutedEvent to be raised when selection happens
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.XAxisProperty">
      <summary>
            Identifies the XAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.YAxisProperty">
      <summary>
            Identifies the YAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.HighlightingEnabledProperty">
      <summary>
            Identifies the HighlightingEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.IsSelectedProperty">
      <summary>
            Identifies the IsSelected Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.IsHighlightedProperty">
      <summary>
            Identifies the IsHighlighted Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.SelectionModeProperty">
      <summary>
            Identifies the SelectionMode Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.SelectedItemProperty">
      <summary>
            Identifies the SelectedItem Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.SelectedItemsProperty">
      <summary>
            Identifies the SelectedItems Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.LegendItemStyleProperty">
      <summary>
            Identifies the LegendItemStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.LegendItemTemplateProperty">
      <summary>
            Identifies the LegendItemTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.NormalStyleProperty">
      <summary>
            Identifies the NormalStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.IsDisplayedOnLegendProperty">
      <summary>
            Identifies the IsDisplayedOnLegend Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.OffsetProviderProperty">
      <summary>
            Identifies the OffsetProvider Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.TrackballTemplateProperty">
      <summary>
            Identifies the TrackballTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.TrackballStyleProperty">
      <summary>
            Identifies the TrackballStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.DataSeriesProperty">
      <summary>
            Identifies the DataSeries Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.HitTestingStrategyProperty">
      <summary>
            Identifies the HitTestingStrategy Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesCommonBase.BitmapManagerProperty">
      <summary>
            Identifies the BitmapManager Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesCommonBase.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.RasterChartSeriesCommonBase.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.CachedHighlightingEnabled">
      <summary>
            The cached Highlighting Enabled property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.CachedIsSelected">
      <summary>
            The cached Is Selected property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.CachedIsHighlighted">
      <summary>
            The cached Is Highlighted property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.EnablePerPointHitTesting">
      <summary>
            Determines whether to enable per point hit testing
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.EnableGeneralHitTesting">
      <summary>
            Determines whether to enable general hit testing
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.CachedSelectionMode">
      <summary>
            The cached Selection Mode property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.CachedSelectedItem">
      <summary>
            The cached Selected Item property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.CachedSelectedItems">
      <summary>
            The cached Selected Items property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.CachedXAxis">
      <summary>
            Gets or sets the cached <see cref="P:Visiblox.Charts.RasterChartSeriesCommonBase.XAxis" /> to avoid hitting it repeatedly (as it is a Dependency Property).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.CachedYAxis">
      <summary>
            Gets or sets the cached <see cref="P:Visiblox.Charts.RasterChartSeriesCommonBase.YAxis" /> to avoid hitting it repeatedly (as it is a Dependency Property).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.HitTesterManager">
      <summary>
            Provides an <see cref="T:Visiblox.Charts.IHitTester" /> instance.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.ValidationKey">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.LayoutRoot">
      <summary>
            Gets the grid which is the root element of the series.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.InvalidateRequestPending">
      <summary>
            Determines whether there is currently an invalidate request pending for this series instance.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.Rendered">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.RasterChartSeriesCommonBase.InvalidationEnded">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.XRenderDirty">
      <summary>
            Determines if the saved render positions are invalid on the x axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.YRenderDirty">
      <summary>
            Determines if the saved render positions are invalid on the y axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.Element">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.HitTester">
      <summary>
            The hit tester, handles the mapping between render positions and datapoints, used for highlighting and selection.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.XRange">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.YRange">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.SuggestedPointWidth">
      <summary>
            Suggested maximum width of points. It's value is 80% of the minimum distance between two points
            within the series. Its value is re-calculated whenever <see cref="M:Visiblox.Charts.RasterChartSeriesCommonBase.Invalidate" /> is called - either
                externally or by the series itself.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.Discontinuities">
      <summary>
            Data structure for compactly recording all regions of the DataSeries that are non-renderable because of any discontinuous axis it is being rendered on.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.RasterChartSeriesCommonBase.LegendItemsChanged">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.RasterChartSeriesCommonBase.DataSeriesChanged">
      <summary>
            An event fired when the <see cref="P:Visiblox.Charts.RasterChartSeriesCommonBase.DataSeries" /> property changes.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.RasterChartSeriesCommonBase.DataSeriesCollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.RasterChartSeriesCommonBase.AxisPropertyChanged">
      <summary>
            The axis property changed event.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.XAxis">
      <summary>
            Gets or sets the X axis of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.YAxis">
      <summary>
            Gets or sets the Y axis of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.HighlightingEnabled">
      <summary>
            Gets or sets whether highlighting of the series is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.IsSelected">
      <summary>Gets or sets whether the series is selected.</summary>
      <remarks>This value can only be true if selection is enabled on the series, that is <see cref="P:Visiblox.Charts.RasterChartSeriesCommonBase.SelectionMode" /> is set to <see cref="F:Visiblox.Charts.SelectionMode.Series" />.Generally clicking on the series will select it, if it is selectable, but this property can also be manipulated programmatically.</remarks>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.IsHighlighted">
      <summary>Gets or sets whether the series is highlighted.</summary>
      <remarks> This value can only be true if selection is enabled on the series, that is <see cref="P:Visiblox.Charts.RasterChartSeriesCommonBase.SelectionMode" /> is set to <see cref="F:Visiblox.Charts.SelectionMode.Series" />. Generally hovering over the series will highlighted it, if it is selectable, but this property can also be manipulated programmatically.</remarks>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.SelectionMode">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.SelectedItem">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.SelectedItems">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.LegendItemStyle">
      <summary>
            Gets or sets LegendItemStyle. This property is used to style the legend item belonging to this series. The Style should have a TargetType of LegendItem. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.LegendItemTemplate">
      <summary>
            Gets or sets LegendItemTemplate. This property defines the template of the legend item belonging to this series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.NormalStyle">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.IsDisplayedOnLegend">
      <summary>
            Gets or sets whether the series should be displayed on the legend of the chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.OffsetProvider">
      <summary>
            Gets or sets the offset provider. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.TrackballTemplate">
      <summary>
            Gets or sets the control template used for a trackball on this series. The ControlTemplate should have a TargetType of Trackball. See <see cref="T:Visiblox.Charts.ChartSeriesBase" /> for an example. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.TrackballStyle">
      <summary>Gets or sets the Style associated with trackballs on this series. The appropriate TargetType of this Style depends on the TrackballTemplate set on the series.</summary>
      <remarks>The TrackballStyle is bound in the TrackballTemplate, so its use depends on the particular TrackballTemplate set on the series. For a LineSeries this is by default Ellipse, for other series types the default is Polygon</remarks>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.DataSeries">
      <summary>
            Gets or sets the data series used by this series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.HitTestingStrategy">
      <summary>
            Gets or sets the hit testing method that will be used.  . This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesCommonBase.BitmapManager">
      <summary>
            Gets or sets the bitmap manager that will be used.  . This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.RasterChartSeriesCommonBase.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.InvalidateBase">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.UpdateImage(Visiblox.Charts.WriteableBitmapAdapter)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.CreateRange(Visiblox.Charts.IRangeProvider,System.Collections.Generic.List{System.IComparable},System.Boolean)">
      <summary>
            Create a range for the given <paramref name="axis" />.
            </summary>
      <param name="axis">Axis to create range</param>
      <param name="sortedList">Items to include in range</param>
      <param name="isCategoryRange">Is it a category range</param>
      <returns>The created range</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.UpdateRenderPositionsInternal">
      <summary>
            Updates the structs holding the datapoint to render position mappings
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.ResetRangeCacheInternal">
      <summary>
            Overrideable extension for hooking into conditions where the range cache is reset
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.ConvertDataPointToRenderPoint(Visiblox.Charts.IDataPoint,`0,System.Boolean,System.Boolean)">
      <summary>
            Abstract method to create a model render point for each data point.
            </summary>
      <param name="point">The datapoint to be converted.</param>
      <param name="existingItem">The original item if one exists to be reused if <paramref name="xRenderDirty" /> and <paramref name="yRenderDirty" /> are false.</param>
      <param name="xRenderDirty">If the x axis has changed in a material way to force all render positions to be recalculated.</param>
      <param name="yRenderDirty">If the y axis has changed in a material way to force all render positions to be recalculated.</param>
      <returns>The model render point for the specific datapoint.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.GetLatestRenderPositions">
      <summary>
            Returns all render positions computed to the current zoom scale and offset of the appropriate axis.
            </summary>
      <returns>An enumerable of KeyValuePairs of datapoints and render position models.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.SkipPoint(`0,`0)">
      <summary>
            A function to allow derived classes to determine if a point should be
            skipped from rendering, used primarily for sampling if new point is too
            close to previous point.
            </summary>
      <param name="previousPoint">The previous point that is being rendered.</param>
      <param name="newPoint">The candidate current point to be rendered.</param>
      <returns>True if the point should be rendered, false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.CreateScaledRenderPoint(`0,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a scaled render point by providing the initial point and appropriate scale values.
            </summary>
      <param name="initialPoint">The initial unscaled render point.</param>
      <param name="xScale">The current scale of the X Axis Zoom.</param>
      <param name="yScale">The current scale of the Y Axis Zoom.</param>
      <param name="xOffsetValue">The current offset of the X Axis Zoom multiplied by the width of this control.</param>
      <param name="yOffsetValue">The current offset of the Y Axis Zoom multiplied by the height of this control.</param>
      <param name="yAdjustment">The adjustment to perform on the yAxis.</param>
      <returns>A scaled render point.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.GetImage(Visiblox.Charts.WriteableBitmapAdapter)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.CreateRenderContextObject">
      <summary>
            Creates the appropriate context object for the render cycle.
            </summary>
      <returns>The context object.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.DrawPoint(Visiblox.Charts.IDataPoint,`0,`1,System.Boolean,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester)">
      <summary>
            Abstract class to draw, as appropriate, an individual render pair.
            </summary>
      <param name="dataPoint">The datapoint to be drawn.</param>
      <param name="renderPoint">The render point to be drawn.</param>
      <param name="style">The style object to use when drawing this point.</param>
      <param name="isSelected">Whether or not this point has been selected.</param>
      <param name="bitmap">The bitmap that this point should be drawn onto.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.FinaliseDrawing(Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester)">
      <summary>
            A virtual method to override if any final drawing items need to take place after the last
            point to guarantee that all of the points have been provided.
            </summary>
      <param name="bitmap">The bitmap that any drawing should occur on.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.CalculateSuggestedPointWidth">
      <summary>
            Calculates the suggested point width. This is 80% of the minimum distance between two points.
            </summary>
      <returns>The suggested point width to use.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.ComputeMinimumDistanceBetweenPoints">
      <summary>
            Determine the minimum distance between points on the X axis.
            </summary>
      <returns>The computed distance.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.AddDataPoints(System.Int32,System.Collections.IList)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.AddPointToRenderPositions(System.Int32,Visiblox.Charts.IDataPoint,`0)">
      <summary>
            Adds the point in the struct that maintains the datapoint to render position mapping
            </summary>
      <param name="index">The list index where the point should be added to</param>
      <param name="dataPoint">The datapoint to be added</param>
      <param name="renderPoint">The render position where the <paramref name="dataPoint" /> should be rendered</param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.RemoveDataPoints(System.Int32,System.Collections.IList)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.RemovePointFromRenderPositions(System.Int32)">
      <summary>
            Removes the point reference from the struct that maintains the datapoint to render position mapping
            </summary>
      <param name="index">The list index where the point should be removed from</param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.FindYValues(Visiblox.Charts.IDataPoint)">
      <summary>
            Return all of the Y Values for a given datapoint.
            </summary>
      <param name="dataPoint">The datapoint to retrieve the y values from.</param>
      <returns>All of the y values for the datapoint.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.ClearDataPoints">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.OnDataSeriesChanged(System.Object,System.EventArgs)">
      <summary>
            Update the render positions then propagate the DataSeriesChanged event.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.SubscribeToStyle(System.ComponentModel.INotifyPropertyChanged)">
      <summary>
            Subscribe to receive notifications from a style which
            implements INotifyPropertyChanged.
            </summary>
      <param name="style">The style to subscribe to.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.UnsubscribeFromStyle(System.ComponentModel.INotifyPropertyChanged)">
      <summary>
            Unsubscribe to receive notifications from a style which
            implements INotifyPropertyChanged.
            </summary>
      <param name="style">The style to unsubscribe to.</param>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesBase`2.IsXAxisValid">
      <summary>
            Shortcut test for checking validity of the Cached X Axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesBase`2.IsYAxisValid">
      <summary>
            Shortcut test for checking validity of the Cached Y Axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesBase`2.XRange">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesBase`2.YRange">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesBase`2.IsConnectedSeries">
      <summary>
            Determines if the series should be treated as connected or not.
            Connected series are always given all points to render regardless of the zoom and scale.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesBase`2.SkipNullPoints">
      <summary>
            Determines if null points should be relayed to the draw point method or not.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesBase`2.RenderPositions">
      <summary>
            A collection of render positions calculated without zoom mapped to each datapoint.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RasterChartSeriesBase`2.RenderPositionPoint`2">
      <summary>
            An encapsulating class for a render point and a datapoint which is
            used in the sampling of individual points.
            </summary>
      <remarks>
            This class deliberately uses read only fields for performance.
            </remarks>
      <typeparam name="TRenderPoint">The type of render point.</typeparam>
      <typeparam name="TDataPoint">The type of data point.</typeparam>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesBase`2.RenderPositionPoint`2.skipPoint">
      <summary>
            If this point was skipped on the last invalidation.
            It will continue to be skipped until the scale changes.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesBase`2.RenderPositionPoint`2.renderPoint">
      <summary>
            The render point for the corresponding datapoint.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesBase`2.RenderPositionPoint`2.dataPoint">
      <summary>
            The underlying datapoint.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.RenderPositionPoint`2.#ctor(`3,`2)">
      <summary>
            Constructor.
            </summary>
      <param name="dataPoint">The underlying datapoint.</param>
      <param name="renderPoint">The render point for the corresponding datapoint.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase`2.RenderPositionPoint`2.#ctor(`3,`2,System.Boolean)">
      <summary>
            Constructor.
            </summary>
      <param name="dataPoint">The underlying datapoint.</param>
      <param name="renderPoint">The render point for the corresponding datapoint.</param>
      <param name="skipPoint">
        <see cref="F:Visiblox.Charts.RasterChartSeriesBase`2.RenderPositionPoint`2.skipPoint" />
      </param>
    </member>
    <member name="T:Visiblox.Charts.IChartSeries3D">
      <summary>
            A representation of a chart series responsible for plotting three dimensional data
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IChartSeries3D.ZRange">
      <summary>
            Gets or sets the Z range of the plotted series. This is a volatile object.
            </summary>
      <remarks>This may be the data series value range, or may be enlarged to account for the displayed width/height of points.
            Instead use Range to set a specific range.</remarks>
    </member>
    <member name="P:Visiblox.Charts.IChartSeries3D.ZAxis">
      <summary>
            Gets or sets the Z axis belonging to the component.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.OnDataSeriesChanged(System.Object,System.EventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.ConvertDataPointToRenderPoint(Visiblox.Charts.IDataPoint,`0,System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.CreateScaledRenderPoint(`0,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.CreateRenderContextObject">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.DrawPoint(Visiblox.Charts.IDataPoint,`0,`1,System.Boolean,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.IsLogicalAxisValid">
      <summary>
            Returns whether the logical axis is valid based on the expected axis type from the series
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.InitLogicalAxis">
      <summary>
            Initializes the logical axis
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.UpdateLocalZAxis">
      <summary>
            Update local Z axis value
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.InitInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.ZAxis_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Invoked when a ZAxis property has changed. This can be overridden by subclasses. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.IsPointRenderable(Visiblox.Charts.IDataPoint3D)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.GetPointRenderPosition(Visiblox.Charts.IDataPoint3D)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.GetFirstOrDefault">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.DeInitInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.InvalidateBase">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.ResetRangeCacheInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.AddDataPoints(System.Int32,System.Collections.IList)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.RemoveDataPoints(System.Int32,System.Collections.IList)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.CalculateSuggestedPointWidth">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.AreKeyPropertiesNull">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.CalculateSuggestedPointHeight">
      <summary>
            Calculates the suggested point height. This is 100% of the minimum distance between two points.
            </summary>
      <returns>The suggested point height to use.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.ComputeMinimumDistanceBetweenPointsY">
      <summary>
            Determine the minimum distance between points on the y axis.
            </summary>
      <returns>The computed distance.</returns>
    </member>
    <member name="F:Visiblox.Charts.RasterChartSeriesBase3D`2.ZAxisProperty">
      <summary>
            Identifies the ZAxis Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterChartSeriesBase3D`2.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.RasterChartSeriesBase3D`2.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesBase3D`2.SuggestedPointHeight">
      <summary>
            Suggested maximum height of points. Its value is re-calculated whenever <see cref="M:Visiblox.Charts.Primitives.IInvalidatable.Invalidate" /> is called - either
            externally or by the series itself.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesBase3D`2.ZoomPending">
      <summary>
            true when the <see cref="T:Visiblox.Charts.ZoomBehaviour" /> is the in the middle of a zoom operation.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesBase3D`2.ZRange">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesBase3D`2.IsConnectedSeries">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterChartSeriesBase3D`2.ZAxis">
      <summary>
            Gets or sets the ZAxis used for this series. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.RasterChartSeriesBase3D`2.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterContourSeries.#ctor">
      <summary>
            Constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterContourSeries.IsLogicalAxisValid">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterContourSeries.UpdateLocalZAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterContourSeries.InitLogicalAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterContourSeries.ZAxis_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterContourSeries.InvalidateBase">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterContourSeries.GetImage(Visiblox.Charts.WriteableBitmapAdapter)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterContourSeries.SelectThicknessForZValue(System.IComparable,Visiblox.Charts.RenderContextObject{Visiblox.Charts.ContourSeriesStyle},System.Boolean)">
      <summary>
            Returns the thickness that should be used to render a contour at the given z value.  
            </summary>
      <param name="value">
      </param>
      <param name="contextObject">
      </param>
      <param name="isMajor">
            is true if it is a major rather than minor contour
            </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.RasterContourSeries.SelectColourForZValue(System.IComparable,Visiblox.Charts.RenderContextObject{Visiblox.Charts.ContourSeriesStyle},System.Boolean)">
      <summary>
            Returns the colour that should be used to render a contour at the given z value.  
            </summary>
      <param name="value">
      </param>
      <param name="contextObject">
      </param>
      <param name="isMajor">
            is true if it is a major rather than minor contour
            </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.RasterContourSeries.ConvertDataPointToRenderPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.CartesianPoint,System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterContourSeries.CreateScaledRenderPoint(Visiblox.Charts.CartesianPoint,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterContourSeries.CreateRenderContextObject">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterContourSeries.DrawPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.CartesianPoint,Visiblox.Charts.ContourSeriesStyle,System.Boolean,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester)">
      <summary>
            No points are rendered by a <see cref="T:Visiblox.Charts.RasterContourSeries" /> and so this method does nothing.  
            </summary>
      <param name="dataPoint">
      </param>
      <param name="renderPoint">
      </param>
      <param name="style">
      </param>
      <param name="isSelected">
      </param>
      <param name="bitmap">
      </param>
      <param name="hitTester">
      </param>
    </member>
    <member name="M:Visiblox.Charts.RasterContourSeries.GetStylesForColour(System.Windows.Media.Color,System.Windows.Style)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.RasterContourSeries.ShowMajorIntervalsProperty">
      <summary>
            Identifies the ShowMajorIntervals Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterContourSeries.ShowMinorIntervalsProperty">
      <summary>
            Identifies the ShowMinorIntervals Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterContourSeries.DefaultStyleProperty">
      <summary>
            Identifies the DefaultStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterContourSeries.HighlightedStyleProperty">
      <summary>
            Identifies the HighlightedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterContourSeries.SelectedStyleProperty">
      <summary>
            Identifies the SelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterContourSeries.HighlightedAndSelectedStyleProperty">
      <summary>
            Identifies the HighlightedAndSelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterContourSeries.AntiAliasingEnabledProperty">
      <summary>
            Identifies the AntiAliasingEnabled Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterContourSeries.ContourRenderer">
      <summary>
            The contour rendering algorithm to use.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterContourSeries.IsConnectedSeries">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterContourSeries.CachedDefaultStyle">
      <summary>
            The cached Default Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterContourSeries.CachedHighlightedStyle">
      <summary>
            The cached Highlighted Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterContourSeries.CachedSelectedStyle">
      <summary>
            The cached Selected Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterContourSeries.CachedHighlightedAndSelectedStyle">
      <summary>
            The cached Highlighted and Selected Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterContourSeries.ShowMajorIntervals">
      <summary>
            Gets or sets whether major intervals are plotted. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterContourSeries.ShowMinorIntervals">
      <summary>
            Gets or sets whether minor intervals are plotted. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterContourSeries.DefaultStyle">
      <summary>
            Gets or sets the default style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterContourSeries.HighlightedStyle">
      <summary>
            Gets or sets the highlighted style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterContourSeries.SelectedStyle">
      <summary>
            Gets or sets the selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterContourSeries.HighlightedAndSelectedStyle">
      <summary>
            Gets or sets the highlighted and selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterContourSeries.AntiAliasingEnabled">
      <summary>
            Gets or sets whether the line is drawn with anti aliasing enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BandPoint">
      <summary>
            A representation of a multi valued datapoint comprising of
            upper and lower values.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandPoint.X">
      <summary>
            The x co-ordinate in render co-ordinates.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandPoint.Upper">
      <summary>
            The upper co-ordinate in render co-ordinates.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandPoint.Lower">
      <summary>
            The lower co-ordinate in render co-ordinates.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BandPoint.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Default constructor.
            </summary>
      <param name="x">The x co-ordinate in render co-ordinates.</param>
      <param name="upper">The upper co-ordinate in render co-ordinates.</param>
      <param name="lower">The lower co-ordinate in render co-ordinates.</param>
    </member>
    <member name="T:Visiblox.Charts.CartesianPoint">
      <summary>
            A representation of a Cartesian (X, Y) point.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CartesianPoint.X">
      <summary>
            The x co-ordinate in render co-ordinates.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CartesianPoint.Y">
      <summary>
            The y co-ordinate in render co-ordinates.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CartesianPoint.#ctor(System.Double,System.Double)">
      <summary>
            Default constructor.
            </summary>
      <param name="x">The x co-ordinate in render co-ordinates.</param>
      <param name="y">The y co-ordinate in render co-ordinates. </param>
    </member>
    <member name="T:Visiblox.Charts.HlocPoint">
      <summary>
            A representation of a multi valued datapoint comprising of
            high, low, open and close values.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocPoint.X">
      <summary>
            The x co-ordinate in render co-ordinates.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocPoint.High">
      <summary>
            The high co-ordinate in render co-ordinates.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocPoint.Open">
      <summary>
            The open co-ordinate in render co-ordinates.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocPoint.Low">
      <summary>
            The low co-ordinate in render co-ordinates.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocPoint.Close">
      <summary>
            The close co-ordinate in render co-ordinates.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.HlocPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Default constructor.
            </summary>
      <param name="x">The x co-ordinate in render co-ordinates.</param>
      <param name="high">The high co-ordinate in render co-ordinates.</param>
      <param name="low">The low co-ordinate in render co-ordinates.</param>
      <param name="open">The open co-ordinate in render co-ordinates.</param>
      <param name="close">The close co-ordinate in render co-ordinates.</param>
    </member>
    <member name="P:Visiblox.Charts.HlocPoint.IsRising">
      <summary>
            If this point should be treated as rising.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DiscreteHeatPlotSeries">
      <summary>
            Represents a discrete heat plot series. A discrete heat plot series requires an <see cref="T:Visiblox.Charts.IDataSeries3D" /> collection and renders the points in a grid.
            The number of distinct X values in the data series defines the number of columns in the grid and the number of distinct Y values defines the number of rows.
            Each point is rendered as a cell in the grid based on its X and Y value while the Z value defines the cell color.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RasterHeatPlotSeriesBase`1">
      <summary>
            Represents the base class for HeatPlotSeries implementations.
            </summary>
      <typeparam name="TStyle">
      </typeparam>
    </member>
    <member name="T:Visiblox.Charts.Primitives.IMarginPreference">
      <summary>
            Specifies a series that dynamically requests margins to be generated. A series type implementing this interface
                can specify whether it requests margins to be auto calculated on either sides of the X and Y axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.IMarginPreference.IsXMinimumMarginEnabled">
      <summary>
            Gets whether there's margin on the left of the X axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.IMarginPreference.IsXMaximumMarginEnabled">
      <summary>
            Gets whether there's margin on the right of the X axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.IMarginPreference.IsYMinimumMarginEnabled">
      <summary>
            Gets whether there's margin on the bottom of the Y axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.IMarginPreference.IsYMaximumMarginEnabled">
      <summary>
            Gets whether there's margin on the top of the Y axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.IMarginPreference.XMargin">
      <summary>
            Gets the margin to be applied on the left and right of the X axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.IMarginPreference.YMargin">
      <summary>
            Gets the margin to be applied on the top and bottom of the Y axis.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterHeatPlotSeriesBase`1.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterHeatPlotSeriesBase`1.UpdateLocalZAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterHeatPlotSeriesBase`1.UpdateRenderPositionsInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterHeatPlotSeriesBase`1.IsLogicalAxisValid">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterHeatPlotSeriesBase`1.InitLogicalAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterHeatPlotSeriesBase`1.InitInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterHeatPlotSeriesBase`1.ZAxis_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterHeatPlotSeriesBase`1.ClearDataPoints">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterHeatPlotSeriesBase`1.GetDataValueAsLogicalValueInternal(System.IComparable)">
      <summary>
            Returns the logical value that corresponds to the given data value <paramref name="z" />.
            </summary>
      <param name="z">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.RasterHeatPlotSeriesBase`1.ConvertDataPointToRenderPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.CartesianPoint,System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterHeatPlotSeriesBase`1.CreateScaledRenderPoint(Visiblox.Charts.CartesianPoint,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterHeatPlotSeriesBase`1.AddPointToRenderPositions(System.Int32,Visiblox.Charts.IDataPoint,Visiblox.Charts.CartesianPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterHeatPlotSeriesBase`1.RemovePointFromRenderPositions(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterHeatPlotSeriesBase`1.GetImage(Visiblox.Charts.WriteableBitmapAdapter)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterHeatPlotSeriesBase`1.DataPointToRenderPositionX">
      <summary>
            A mapping between all the datapoint X values and their render position calculated without zoom
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterHeatPlotSeriesBase`1.DataPointToRenderPositionY">
      <summary>
            A mapping between all the datapoint Y values and their render position calculated without zoom
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterHeatPlotSeriesBase`1.IsXMinimumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterHeatPlotSeriesBase`1.IsXMaximumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterHeatPlotSeriesBase`1.IsYMinimumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterHeatPlotSeriesBase`1.IsYMaximumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterHeatPlotSeriesBase`1.XMargin">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterHeatPlotSeriesBase`1.YMargin">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscreteHeatPlotSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DiscreteHeatPlotSeries.OnMouseMovedInternal(System.Windows.Point)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscreteHeatPlotSeries.OnIsHighlightedPropertyChangedInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscreteHeatPlotSeries.OnHighlightingEnabledPropertyChangedInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscreteHeatPlotSeries.CreateRenderContextObject">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscreteHeatPlotSeries.GetImage(Visiblox.Charts.WriteableBitmapAdapter)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscreteHeatPlotSeries.DrawPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.CartesianPoint,Visiblox.Charts.DiscreteHeatPlotSeriesStyle,System.Boolean,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscreteHeatPlotSeries.DrawBorder(Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester,Visiblox.Charts.IDataPoint,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draw a border around each point.
            </summary>
      <param name="bitmap">The bitmap to draw onto.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The item to set as the selected item.</param>
      <param name="x1">The position of X1 (top left).</param>
      <param name="x2">The position of X2 (bottom right).</param>
      <param name="y1">The position of Y1 (top left).</param>
      <param name="y2">The position of Y2 (bottom right).</param>
      <param name="lineWidth">The width of the border in pixels.</param>
      <param name="strokeColor">The colour of the border as an integer colour.</param>
    </member>
    <member name="M:Visiblox.Charts.DiscreteHeatPlotSeries.FindX1(System.Double,System.Double)">
      <summary>
            Finds the position of X1 (top left).
            </summary>
      <param name="x">The base x render co-ordinate.</param>
      <param name="y">The base y render co-ordinate.</param>
      <returns>The top left point in x render space to be drawn.</returns>
    </member>
    <member name="M:Visiblox.Charts.DiscreteHeatPlotSeries.FindX2(System.Double,System.Double)">
      <summary>
            Finds the position of X2 (bottom right).
            </summary>
      <param name="x">The base x render co-ordinate.</param>
      <param name="y">The base y render co-ordinate.</param>
      <returns>The bottom right point in x render space to be drawn.</returns>
    </member>
    <member name="M:Visiblox.Charts.DiscreteHeatPlotSeries.FindY1(System.Double,System.Double)">
      <summary>
            Finds the position of Y1 (top left).
            </summary>
      <param name="x">The base x render co-ordinate.</param>
      <param name="y">The base y render co-ordinate.</param>
      <returns>The top left point in y render space to be drawn.</returns>
    </member>
    <member name="M:Visiblox.Charts.DiscreteHeatPlotSeries.FindY2(System.Double,System.Double)">
      <summary>
            Finds the position of Y2 (bottom right).
            </summary>
      <param name="x">The base x render co-ordinate.</param>
      <param name="y">The base y render co-ordinate.</param>
      <returns>The bottom right point in y render space to be drawn.</returns>
    </member>
    <member name="F:Visiblox.Charts.DiscreteHeatPlotSeries.DefaultStyleProperty">
      <summary>
            Identifies the DefaultStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DiscreteHeatPlotSeries.HighlightedStyleProperty">
      <summary>
            Identifies the HighlightedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DiscreteHeatPlotSeries.SelectedStyleProperty">
      <summary>
            Identifies the SelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DiscreteHeatPlotSeries.HighlightedAndSelectedStyleProperty">
      <summary>
            Identifies the HighlightedAndSelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DiscreteHeatPlotSeries.CellWidthFractionProperty">
      <summary>
            Identifies the CellWidthFraction Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DiscreteHeatPlotSeries.CellHeightFractionProperty">
      <summary>
            Identifies the CellHeightFraction Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeries.CachedDefaultStyle">
      <summary>
            The cached Default Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeries.CachedHighlightedStyle">
      <summary>
            The cached Highlighted Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeries.CachedSelectedStyle">
      <summary>
            The cached Selected Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeries.CachedHighlightedAndSelectedStyle">
      <summary>
            The cached Highlighted and Selected Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeries.CachedCellWidthFraction">
      <summary>
            The cached Cell Width Fraction property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeries.CachedCellHeightFraction">
      <summary>
            The cached Cell Width Fraction property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeries.EnablePerPointHitTesting">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeries.EnableGeneralHitTesting">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeries.DefaultStyle">
      <summary>
            Gets or sets the default style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeries.HighlightedStyle">
      <summary>
            Gets or sets the highlighted style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeries.SelectedStyle">
      <summary>
            Gets or sets the selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeries.HighlightedAndSelectedStyle">
      <summary>
            Gets or sets the highlighted and selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeries.CellWidthFraction">
      <summary>
            Gets or sets the enforced width of each cell, as a fraction of the calculated width. If this is not set, the width is calculated automatically. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeries.CellHeightFraction">
      <summary>
            Gets or sets the enforced height of each cell, as a fraction of the calculated height. If this is not set, the height is calculated automatically. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.HeatPlotSeries">
      <summary>
            Represents a heat plot series. A heat plot series requires an <see cref="T:Visiblox.Charts.IDataSeries3D" /> collection and renders each point as a spot.
            The size of each spot is defined by <see cref="P:Visiblox.Charts.HeatPlotSeries.SpotRadiusX" /> and <see cref="P:Visiblox.Charts.HeatPlotSeries.SpotRadiusY" /> and the colour is extracted by the Z value of the respective point. 
            If the spots overlap, then the colour of the overlapping pixels will be a blend of all the individual colours.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.HeatPlotSeries.OnIsHighlightedPropertyChangedInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HeatPlotSeries.OnHighlightingEnabledPropertyChangedInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HeatPlotSeries.OnSelectionModeChangedInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HeatPlotSeries.OnSelectionChangedInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HeatPlotSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.HeatPlotSeries.CreateRenderContextObject">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HeatPlotSeries.DrawPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.CartesianPoint,Visiblox.Charts.HeatPlotSeriesStyle,System.Boolean,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.HeatPlotSeries.DefaultStyleProperty">
      <summary>
            Identifies the DefaultStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HeatPlotSeries.SpotRadiusXProperty">
      <summary>
            Identifies the SpotRadiusX Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HeatPlotSeries.SpotRadiusYProperty">
      <summary>
            Identifies the SpotRadiusY Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HeatPlotSeries.FeatheringFactorProperty">
      <summary>
            Identifies the FeatheringFactor Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HeatPlotSeries.CachedDefaultStyle">
      <summary>
            The cached Default Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HeatPlotSeries.CachedSpotRadiusX">
      <summary>
            The cached Spot Radius X property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HeatPlotSeries.CachedSpotRadiusY">
      <summary>
            The cached Spot Radius Y property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HeatPlotSeries.CachedFeatheringFactor">
      <summary>
            The cached Feathering Factor property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HeatPlotSeries.DefaultStyle">
      <summary>
            Gets or sets the default style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HeatPlotSeries.SpotRadiusX">
      <summary>
            Gets or sets the radius in pixels of each point along the X axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HeatPlotSeries.SpotRadiusY">
      <summary>
            Gets or sets the radius in pixels of each point along the Y axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HeatPlotSeries.FeatheringFactor">
      <summary>
            Gets or sets the gradient factor by which the center color fades towards the edge of each spot. Setting it to 1 will make each spot completely opaque (no gradient applied) while 0 will apply a smooth gradient from the center color to transparent. This is a Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IHitTester.GetDataPoint(System.Int32,System.Int32)">
      <summary>
            Returns the <see cref="T:Visiblox.Charts.IDataPoint" /> corresponding to the given position 
            (only guaranteed to return correctly if <see cref="P:Visiblox.Charts.IHitTester.IsPerDataPointHitTestingEnabled" /> is enabled).  
            </summary>
      <param name="x">The x coordinate of the location to test.</param>
      <param name="y">The y coordinate of the location to test.</param>
      <returns>The data point if one was hit and null if none was hit.</returns>
    </member>
    <member name="M:Visiblox.Charts.IHitTester.IsHit(System.Int32,System.Int32)">
      <summary>
            Returns true if the point at x position <paramref name="x" /> and y position <paramref name="y" /> 
            hits a filled location.  
            </summary>
      <param name="x">The x coordinate of the location to test.</param>
      <param name="y">The y coordinate of the location to test.</param>
      <returns>True if a hit was detected and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.IHitTester.SetHitPoint(System.Int32,System.Int32,Visiblox.Charts.IDataPoint,System.Boolean)">
      <summary>
            Sets the value for the point at x position <paramref name="x" /> and y position <paramref name="y" /> 
            to be <paramref name="hit" />, which defaults to true.  
            </summary>
      <param name="x">The x coordinate of the location to set the hit state for.</param>
      <param name="y">The y coordinate of the location to set the hit state for.</param>
      <param name="dp">The data point to associate with the location (defaults to null).</param>
      <param name="hit">Whether or not to mark the location as a hit location or not 
            (true indicates it is a hit location and false indicates it isn't).  Defaults to true.</param>
    </member>
    <member name="M:Visiblox.Charts.IHitTester.SetHitPoint(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},Visiblox.Charts.IDataPoint,System.Boolean)">
      <summary>
            Sets the value for the points at x position <paramref name="xs" /> and y position <paramref name="ys" /> 
            to be <paramref name="hit" />, which defaults to true.  
            </summary>
      <param name="xs">The x coordinates of the locations to set the hit state for.</param>
      <param name="ys">The y coordinates of the locations to set the hit state for.</param>
      <param name="dp">The data point to associate with the location (defaults to null).</param>
      <param name="hit">Whether or not to mark the location as a hit location or not 
            (true indicates it is a hit location and false indicates it isn't).  Defaults to true.</param>
    </member>
    <member name="M:Visiblox.Charts.IHitTester.Compress">
      <summary>
            Perform any work needed to reduce memory usage or generally improve efficiency.  
            Will be called after series rendering has been completed i.e. it would be reasonable to expect no further
            changes to <see cref="T:Visiblox.Charts.IHitTester" /> anytime soon.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IHitTester.Width">
      <summary>
            The width in pixels of the area covered by the hit tester.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IHitTester.Height">
      <summary>
            The height in pixels of the area covered by the hit tester.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IHitTester.IsGeneralHitTestingEnabled">
      <summary>
            Indicates whether hit testing is enabled or not.  Allows for series highlighting etc.
            to work.  Does not guarantee that hit test data is stored on a per-point basis though and thus whether GetDataPoint functions
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IHitTester.IsPerDataPointHitTestingEnabled">
      <summary>
            Indicates whether an <see cref="T:Visiblox.Charts.IDataPoint" /> is associated with points.  Allows point based hit testing to work.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.HitTesterManager">
      <summary>
            Provides an instance of <see cref="T:Visiblox.Charts.IHitTester" />, the exact type of which is determined by
            <see cref="P:Visiblox.Charts.HitTesterManager.HitTesterType" />.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.HitTesterManager.GetHitTester(System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Creates a new instance of the <see cref="T:Visiblox.Charts.IHitTester" /> specified, 
            using the given parameters.  
            </summary>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="isEnabled">
      </param>
      <param name="isSelectionEnabled">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Visiblox.Charts.HitTesterManager.HitTesterType">
      <summary>
            The type of <see cref="T:Visiblox.Charts.IHitTester" /> that will be instantiated.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.HitTesterType">
      <summary>
            The possible hit testing algorithms available for user by raster series.  
            
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HitTesterType.FullArrayImplementation">
      <summary>
            A simple 2D array-based hit tester.  Has a high but constant memory use.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HitTesterType.SparseListImplementation">
      <summary>
            A hit tester that assumes a significant proportion of the plot area will not be covered by points 
            - almost always a reasonable assumption.  
            Uses less memory than the <see cref="F:Visiblox.Charts.HitTesterType.FullArrayImplementation" /> algorithm, except for 
            when a significant percentage of the screen becomes filled with selectable points.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.PredefinedColorMap">
      <summary>
            Defines a list of the predefined color maps included in Visiblox
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RasterBandSeries">
      <summary>
            Represents a band series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterBandSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterBandSeries.ConvertDataPointToRenderPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.BandPoint,System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBandSeries.CreateScaledRenderPoint(Visiblox.Charts.BandPoint,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBandSeries.CreateRenderContextObject">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.RasterBandSeries.RenderPoints">
      <summary>
            The points to be rendered for this band series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterBandSeries.DrawPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.BandPoint,Visiblox.Charts.BandSeriesStyle,System.Boolean,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBandSeries.FinaliseDrawing(Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBandSeries.FillAreas(Visiblox.Charts.WriteableBitmapAdapter,System.Collections.Generic.List{Visiblox.Charts.BandSeriesRenderPoint},Visiblox.Charts.IHitTester)">
      <summary>
            Uses each render point to fill in the band series areas using either the area fill or inverted
            area fill depending on the positions of the upper and lower lines.
            </summary>
      <param name="bitmap">The writeable bitmap to draw the area onto.</param>
      <param name="renderPoints">The render points to use to create the polygons.</param>
      <param name="hitTester">The hit locations array to mark as appropriate.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterBandSeries.DrawLines(Visiblox.Charts.WriteableBitmapAdapter,System.Collections.Generic.List{Visiblox.Charts.BandSeriesRenderPoint},Visiblox.Charts.IHitTester)">
      <summary>
            Draws the upper and lower lines for the band series.
            </summary>
      <param name="bitmap">The writeable bitmap to draw the lines onto.</param>
      <param name="renderPoints">The list of render points to be used to draw the lines.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
    </member>
    <member name="M:Visiblox.Charts.RasterBandSeries.FindYValues(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.RasterBandSeries.ShowLinesProperty">
      <summary>
            Identifies the ShowLines Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterBandSeries.ShowAreaProperty">
      <summary>
            Identifies the ShowArea Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterBandSeries.DefaultStyleProperty">
      <summary>
            Identifies the DefaultStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterBandSeries.HighlightedStyleProperty">
      <summary>
            Identifies the HighlightedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterBandSeries.SelectedStyleProperty">
      <summary>
            Identifies the SelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterBandSeries.HighlightedAndSelectedStyleProperty">
      <summary>
            Identifies the HighlightedAndSelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterBandSeries.AntiAliasingEnabledProperty">
      <summary>
            Identifies the AntiAliasingEnabled Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterBandSeries.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.RasterBandSeries.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.RasterBandSeries.CachedShowLines">
      <summary>
            The cached Show Lines property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBandSeries.CachedShowArea">
      <summary>
            The cached Show Area property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBandSeries.CachedDefaultStyle">
      <summary>
            The cached Default Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBandSeries.CachedHighlightedStyle">
      <summary>
            The cached Highlighted Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBandSeries.CachedSelectedStyle">
      <summary>
            The cached Selected Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBandSeries.CachedHighlightedAndSelectedStyle">
      <summary>
            The cached Highlighted and Selected Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBandSeries.CachedAntiAliasingEnabled">
      <summary>
            The cached Anti Aliasing Enabled property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBandSeries.IsConnectedSeries">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterBandSeries.ShowLines">
      <summary>
            Gets or sets whether the line is plotted on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBandSeries.ShowArea">
      <summary>
            Gets or sets whether the line is plotted on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBandSeries.DefaultStyle">
      <summary>
            Gets or sets the default style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBandSeries.HighlightedStyle">
      <summary>
            Gets or sets the highlighted style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBandSeries.SelectedStyle">
      <summary>
            Gets or sets the selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBandSeries.HighlightedAndSelectedStyle">
      <summary>
            Gets or sets the highlighted and selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBandSeries.AntiAliasingEnabled">
      <summary>
            Gets or sets whether the lines are drawn with anti aliasing enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.RasterBandSeries.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RasterDiscontinuousLineSeries">
      <summary>
            Represents a discontinuous line series.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RasterLineSeries">
      <summary>
            Represents a line series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterLineSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterLineSeries.ConvertDataPointToRenderPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.CartesianPoint,System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterLineSeries.CreateScaledRenderPoint(Visiblox.Charts.CartesianPoint,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterLineSeries.CreateRenderContextObject">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.RasterLineSeries.RenderPoints">
      <summary>
            The points to be rendered for this line series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterLineSeries.SkipPoint(Visiblox.Charts.CartesianPoint,Visiblox.Charts.CartesianPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterLineSeries.DrawPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.CartesianPoint,Visiblox.Charts.LineSeriesStyle,System.Boolean,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterLineSeries.FinaliseDrawing(Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterLineSeries.FillAreas(Visiblox.Charts.WriteableBitmapAdapter,System.Collections.Generic.IEnumerable{Visiblox.Charts.AreaStyleContainer},Visiblox.Charts.IHitTester)">
      <summary>
            Fill areas on the provided bitmap.
            </summary>
      <param name="bitmap">The bitmap to fill the area on.</param>
      <param name="renderPoints">A list of points making up the polygon to be drawn.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
    </member>
    <member name="M:Visiblox.Charts.RasterLineSeries.ConvertRenderPointsToAreaPolygons(System.Collections.Generic.List{Visiblox.Charts.LineSeriesRenderPoint})">
      <summary>
            Converts a list of render points to an integer array representing the points
            to be drawn in x,y format.
            </summary>
      <param name="renderPoints">The initial render points to be drawn.</param>
      <returns>A list of integer arrays in the form x,y,x,y which represents the polygon to be drawn.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterLineSeries.ConvertRenderSegmentToAreaPolygon(System.Collections.Generic.List{Visiblox.Charts.LineSeriesRenderPoint})">
      <summary>
            Converts a list of render points to an integer array representing an area polygon.
            This polygon will close to the bottom axis (height) of the chart.
            </summary>
      <param name="renderPoints">The render points to be used.</param>
      <returns>An integer representation of the form x1,y1,x2,y2,xn,yn</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterLineSeries.DrawSeriesLine(Visiblox.Charts.WriteableBitmapAdapter,System.Collections.Generic.List{Visiblox.Charts.LineSeriesRenderPoint},Visiblox.Charts.IHitTester)">
      <summary>
            Draws lines connecting each of the points in the render points collection.
            </summary>
      <param name="bitmap">The bitmap to draw the line onto.</param>
      <param name="renderPoints">The points to draw each line between.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
    </member>
    <member name="M:Visiblox.Charts.RasterLineSeries.DrawPoints(Visiblox.Charts.WriteableBitmapAdapter,System.Collections.Generic.List{Visiblox.Charts.LineSeriesRenderPoint},Visiblox.Charts.IHitTester)">
      <summary>
            Draws the points represented in renderPoints onto the provided bitmap.
            </summary>
      <param name="bitmap">The bitmap to draw the points onto.</param>
      <param name="renderPoints">The list of points to be drawn.</param>
      <param name="hitTester">The hit locations array to mark as appropriate.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterLineSeries.GetStylesForColour(System.Windows.Media.Color,System.Windows.Style)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.RasterLineSeries.ShowLineProperty">
      <summary>
            Identifies the ShowLine Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterLineSeries.ShowPointsProperty">
      <summary>
            Identifies the ShowPoints Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterLineSeries.ShowAreaProperty">
      <summary>
            Identifies the ShowArea Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterLineSeries.AreaBaseAxisProperty">
      <summary>
            Identifies the AreaBaseAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterLineSeries.AreaBaseValueProperty">
      <summary>
            Identifies the AreaBaseValue Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterLineSeries.DefaultStyleProperty">
      <summary>
            Identifies the DefaultStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterLineSeries.HighlightedStyleProperty">
      <summary>
            Identifies the HighlightedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterLineSeries.SelectedStyleProperty">
      <summary>
            Identifies the SelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterLineSeries.HighlightedAndSelectedStyleProperty">
      <summary>
            Identifies the HighlightedAndSelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterLineSeries.AntiAliasingEnabledProperty">
      <summary>
            Identifies the AntiAliasingEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterLineSeries.IsSortedLineSeriesProperty">
      <summary>
            Identifies the IsSortedLineSeries Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.CachedShowLine">
      <summary>
            The cached Show Line property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.CachedShowPoints">
      <summary>
            The cached Show Points property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.CachedShowArea">
      <summary>
            The cached Show Area property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.CachedAreaBaseAxis">
      <summary>
            The cached Area Base Axis property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.CachedAreaBaseValue">
      <summary>
            The cached Area Base Value property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.CachedDefaultStyle">
      <summary>
            The cached Default Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.CachedHighlightedStyle">
      <summary>
            The cached Highlighted Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.CachedSelectedStyle">
      <summary>
            The cached Selected Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.CachedHighlightedAndSelectedStyle">
      <summary>
            The cached Highlighted and Selected Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.CachedAntiAliasingEnabled">
      <summary>
            The cached Anti Aliasing Enabled property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.CachedIsSortedLineSeries">
      <summary>
            The cached Is Sorted Line Series property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.IsConnectedSeries">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.ShowLine">
      <summary>
            Gets or sets whether the line is plotted on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.ShowPoints">
      <summary>
            Gets or sets whether points are displayed on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.ShowArea">
      <summary>
            Gets or sets whether the area is plotted on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.AreaBaseAxis">
      <summary>
            Gets or sets which axis to fill to when ShowArea is set to True. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.AreaBaseValue">
      <summary>
            Gets or sets the value to which to extend the fill when ShowArea is True. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.DefaultStyle">
      <summary>
            Gets or sets the default style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.HighlightedStyle">
      <summary>
            Gets or sets the highlighted style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.SelectedStyle">
      <summary>
            Gets or sets the selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.HighlightedAndSelectedStyle">
      <summary>
            Gets or sets the highlighted and selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.AntiAliasingEnabled">
      <summary>
            Gets or sets whether the line is drawn with anti aliasing enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterLineSeries.IsSortedLineSeries">
      <summary>
            Gets or sets whether the underlying data series is sorted for sampling purposes. This is a Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterDiscontinuousLineSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterDiscontinuousLineSeries.ConvertDataPointToRenderPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.CartesianPoint,System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterDiscontinuousLineSeries.CreateScaledRenderPoint(Visiblox.Charts.CartesianPoint,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterDiscontinuousLineSeries.SkipPoint(Visiblox.Charts.CartesianPoint,Visiblox.Charts.CartesianPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterDiscontinuousLineSeries.ConvertRenderPointsToAreaPolygons(System.Collections.Generic.List{Visiblox.Charts.LineSeriesRenderPoint})">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterDiscontinuousLineSeries.DrawSeriesLine(Visiblox.Charts.WriteableBitmapAdapter,System.Collections.Generic.List{Visiblox.Charts.LineSeriesRenderPoint},Visiblox.Charts.IHitTester)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterDiscontinuousLineSeries.DrawPoints(Visiblox.Charts.WriteableBitmapAdapter,System.Collections.Generic.List{Visiblox.Charts.LineSeriesRenderPoint},Visiblox.Charts.IHitTester)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterDiscontinuousLineSeries.CreateAlternativeRenderContextObject">
      <summary>
            Create a render context object containing the alternative styles.
            </summary>
      <returns>The created render context object.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterDiscontinuousLineSeries.IsPointRenderableInternal(Visiblox.Charts.IDataPoint)">
      <summary>
            Override IsPointRenderableInternal since even null points should be considered for
            discontinuous series.
            </summary>
      <param name="dataPoint">The datapoint to test.</param>
      <returns>True if the datapoint is null, otherwise defers to base implementation.</returns>
    </member>
    <member name="F:Visiblox.Charts.RasterDiscontinuousLineSeries.NullHandlingModeProperty">
      <summary>
            Identifies the NullHandlingMode Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterDiscontinuousLineSeries.AlternativeDefaultStyleProperty">
      <summary>
            Identifies the AlternativeDefaultStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterDiscontinuousLineSeries.AlternativeHighlightedStyleProperty">
      <summary>
            Identifies the AlternativeHighlightedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterDiscontinuousLineSeries.AlternativeSelectedStyleProperty">
      <summary>
            Identifies the AlternativeSelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterDiscontinuousLineSeries.AlternativeHighlightedAndSelectedStyleProperty">
      <summary>
            Identifies the AlternativeHighlightedAndSelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterDiscontinuousLineSeries.CachedNullHandlingMode">
      <summary>
            The cached Null Handling Mode property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterDiscontinuousLineSeries.CachedAlternativeDefaultStyle">
      <summary>
            The cached Alternative Default Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterDiscontinuousLineSeries.CachedAlternativeHighlightedStyle">
      <summary>
            The cached Alternative Highlighted Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterDiscontinuousLineSeries.CachedAlternativeSelectedStyle">
      <summary>
            The cached Alternative Selected Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterDiscontinuousLineSeries.CachedAlternativeHighlightedAndSelectedStyle">
      <summary>
            The cached Alternative Highlighted and Selected Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterDiscontinuousLineSeries.SkipNullPoints">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterDiscontinuousLineSeries.NullHandlingMode">
      <summary>
            Gets or sets the null handling mode. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterDiscontinuousLineSeries.AlternativeDefaultStyle">
      <summary>
            Gets or sets the alternative default style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterDiscontinuousLineSeries.AlternativeHighlightedStyle">
      <summary>
            Gets or sets the alternative highlighted style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterDiscontinuousLineSeries.AlternativeSelectedStyle">
      <summary>
            Gets or sets the alternative selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterDiscontinuousLineSeries.AlternativeHighlightedAndSelectedStyle">
      <summary>
            Gets or sets the alternative highlighted and selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RasterDrawingHelpers">
      <summary>
            A static class containing some common raster drawing functions.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterDrawingHelpers.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester,Visiblox.Charts.IDataPoint,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Draws a line between x1, y1 and x2, y2.
            </summary>
      <param name="x1">The first point's x co-ordinate.</param>
      <param name="y1">The first point's y co-ordinate.</param>
      <param name="x2">The second point's x co-ordinate.</param>
      <param name="y2">The second point's y co-ordinate.</param>
      <param name="bitmap">The Writeable bitmap to draw the point onto.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The item that should be set in the selection testing array for positions as appropriate.</param>
      <param name="colour">The colour to draw the line.</param>
      <param name="thickness">The thickness to draw the line.</param>
      <param name="antiAliased">If the line should be drawn anti-aliased.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterDrawingHelpers.FillInnerPolygon(System.Int32,System.Int32,System.Int32,System.Int32,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester,Visiblox.Charts.IDataPoint,System.Int32,System.Int32,System.Int32)">
      <summary>
            Fills a polygon between two points sandwiched between two bounding lines
            on a thicker line.
            </summary>
      <param name="x1">The x co-ordinate of the first point.</param>
      <param name="y1">The y co-ordinate of the first point.</param>
      <param name="x2">The x co-ordinate of the second point.</param>
      <param name="y2">The y co-ordinate of the second point.</param>
      <param name="bitmap">The writeable bitmap to draw the line onto.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The datapoint to be used in the selection locations array.</param>
      <param name="upperOffset">The amount above the initial points to draw.</param>
      <param name="lowerOffset">The amount below the initial points to draw.</param>
      <param name="colour">The colour to draw the line.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterDrawingHelpers.DrawBoundingLine(System.Int32,System.Int32,System.Int32,System.Int32,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester,Visiblox.Charts.IDataPoint,System.Int32,System.Boolean)">
      <summary>
            Draws a line between two given points using either a specialised DDA algorithm
            or using an anti-aliased algorithm with Cohen-Sutherland line intersection.
            </summary>
      <param name="x1">The x co-ordinate of the first point.</param>
      <param name="y1">The y co-ordinate of the first point.</param>
      <param name="x2">The x co-ordinate of the second point.</param>
      <param name="y2">The y co-ordinate of the second point.</param>
      <param name="bitmap">The writeable bitmap to draw the line onto.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The datapoint to be used in the selection locations array.</param>
      <param name="colour">The colour to draw the line.</param>
      <param name="antiAliased">If the line should be drawn anti aliased or not.</param>
    </member>
    <member name="T:Visiblox.Charts.BandSeriesRenderPoint">
      <summary>
            Utility class for storing the information relating to a particular datapoint
            which needs to be rendered on a band series.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeriesRenderPoint.IsSeriesSelected">
      <summary>
            If the whole series is selected.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeriesRenderPoint.DataPoint">
      <summary>
            The datapoint associated with this render point.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeriesRenderPoint.RenderPoint">
      <summary>
            The render co-ordinates where this render point should be placed.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeriesRenderPoint.Style">
      <summary>
            The style to render this point with.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BandSeriesRenderPoint.#ctor(Visiblox.Charts.IDataPoint,Visiblox.Charts.BandPoint,Visiblox.Charts.BandSeriesStyle)">
      <summary>
            Constructor.
            </summary>
      <param name="dataPoint">The datapoint associated with this render point.</param>
      <param name="renderPoint">The render point to be drawn.</param>
      <param name="style">The style to render his point with.</param>
    </member>
    <member name="M:Visiblox.Charts.BandSeriesRenderPoint.#ctor(Visiblox.Charts.IDataPoint,Visiblox.Charts.BandPoint,Visiblox.Charts.BandSeriesStyle,System.Boolean)">
      <summary>
            Constructor with additional series selected property.
            </summary>
      <param name="dataPoint">The datapoint associated with this render point.</param>
      <param name="renderPoint">The render point to be drawn.</param>
      <param name="style">The style to render his point with.</param>
      <param name="isSeriesSelected">If the series is selected.</param>
    </member>
    <member name="T:Visiblox.Charts.LineSeriesRenderPoint">
      <summary>
            Utility class for storing the information relating to a particular datapoint
            which needs to be rendered on a line series.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeriesRenderPoint.IsSeriesSelected">
      <summary>
            If the whole series is selected.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeriesRenderPoint.IsPointSelected">
      <summary>
            If this specific point is selected.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeriesRenderPoint.DataPoint">
      <summary>
            The datapoint associated with this render point.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeriesRenderPoint.RenderPoint">
      <summary>
            The render co-ordinates where this render point should be placed.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeriesRenderPoint.Style">
      <summary>
            The style to render this point with.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LineSeriesRenderPoint.#ctor(Visiblox.Charts.IDataPoint,Visiblox.Charts.CartesianPoint,Visiblox.Charts.LineSeriesStyle,System.Boolean)">
      <summary>
            Constructor.
            </summary>
      <param name="dataPoint">The datapoint associated with this render point.</param>
      <param name="renderPoint">The render point to be drawn.</param>
      <param name="style">The style to render his point with.</param>
      <param name="isPointSelected">If the individual point is selected.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeriesRenderPoint.#ctor(Visiblox.Charts.IDataPoint,Visiblox.Charts.CartesianPoint,Visiblox.Charts.LineSeriesStyle,System.Boolean,System.Boolean)">
      <summary>
            Constructor with additional series selected property.
            </summary>
      <param name="dataPoint">The datapoint associated with this render point.</param>
      <param name="renderPoint">The render point to be drawn.</param>
      <param name="style">The style to render his point with.</param>
      <param name="isPointSelected">If the individual point is selected.</param>
      <param name="isSeriesSelected">If the series is selected.</param>
    </member>
    <member name="T:Visiblox.Charts.BandSeriesStyle">
      <summary>
            A wrapper around the style for a band series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BandSeriesStyle.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeriesStyle.UpperLineStrokeProperty">
      <summary>
            Identifies the UpperLineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeriesStyle.UpperLineStrokeThicknessProperty">
      <summary>
            Identifies the UpperLineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeriesStyle.LowerLineStrokeProperty">
      <summary>
            Identifies the LowerLineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeriesStyle.LowerLineStrokeThicknessProperty">
      <summary>
            Identifies the LowerLineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeriesStyle.AreaFillProperty">
      <summary>
            Identifies the AreaFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeriesStyle.InvertedAreaFillProperty">
      <summary>
            Identifies the InvertedAreaFill Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BandSeriesStyle.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.BandSeriesStyle.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.BandSeriesStyle.CachedUpperLineStroke">
      <summary>
            The cached Upper Line Stroke property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeriesStyle.CachedUpperLineStrokeThickness">
      <summary>
            The cached Upper Line Stroke Thickness property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeriesStyle.CachedLowerLineStroke">
      <summary>
            The cached Lower Line Stroke property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeriesStyle.CachedLowerLineStrokeThickness">
      <summary>
            The cached Lower Line Stroke Thickness property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeriesStyle.CachedAreaFill">
      <summary>
            The cached Area Fill property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeriesStyle.CachedInvertedAreaFill">
      <summary>
            The cached Inverted Area Fill property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeriesStyle.UpperLineStroke">
      <summary>
            Gets or sets the line colour for the upper line of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeriesStyle.UpperLineStrokeThickness">
      <summary>
            Gets or sets the thickness of the upper drawn line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeriesStyle.LowerLineStroke">
      <summary>
            Gets or sets the line colour for the lower line of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeriesStyle.LowerLineStrokeThickness">
      <summary>
            Gets or sets the thickness of the lower drawn line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeriesStyle.AreaFill">
      <summary>
            Gets or sets the brush used for filling the area on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeriesStyle.InvertedAreaFill">
      <summary>
            Gets or sets the brush used for filling the area on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.BandSeriesStyle.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ContourSeriesStyle">
      <summary>
            A wrapper around the style for a contour series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ContourSeriesStyle.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ContourSeriesStyle.MajorLineStrokeProperty">
      <summary>
            Identifies the MajorLineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ContourSeriesStyle.MajorLineStrokeThicknessProperty">
      <summary>
            Identifies the MajorLineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ContourSeriesStyle.MinorLineStrokeProperty">
      <summary>
            Identifies the MinorLineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ContourSeriesStyle.MinorLineStrokeThicknessProperty">
      <summary>
            Identifies the MinorLineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ContourSeriesStyle.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.ContourSeriesStyle.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.ContourSeriesStyle.CachedMajorLineStroke">
      <summary>
            The cached Major Line Stroke property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ContourSeriesStyle.CachedMajorLineStrokeThickness">
      <summary>
            The cached Major Line Stroke Thickness property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ContourSeriesStyle.CachedMinorLineStroke">
      <summary>
            The cached Minor Line Stroke property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ContourSeriesStyle.CachedMinorLineStrokeThickness">
      <summary>
            The cached Line Stroke Thickness property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ContourSeriesStyle.MajorLineStroke">
      <summary>
            Gets or sets the line colour for major contours. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ContourSeriesStyle.MajorLineStrokeThickness">
      <summary>
            Gets or sets the thickness of major contours. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ContourSeriesStyle.MinorLineStroke">
      <summary>
            Gets or sets the line colour for minor contours. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ContourSeriesStyle.MinorLineStrokeThickness">
      <summary>
            Gets or sets the thickness of minor contours. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.ContourSeriesStyle.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DiscreteHeatPlotSeriesStyle">
      <summary>
            A wrapper around the style for a discrete heat plot series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DiscreteHeatPlotSeriesStyle.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DiscreteHeatPlotSeriesStyle.PointStrokeProperty">
      <summary>
            Identifies the PointStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DiscreteHeatPlotSeriesStyle.PointStrokeThicknessProperty">
      <summary>
            Identifies the PointStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DiscreteHeatPlotSeriesStyle.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.DiscreteHeatPlotSeriesStyle.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeriesStyle.CachedPointStroke">
      <summary>
            The cached Point Stroke property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeriesStyle.CachedPointStrokeThickness">
      <summary>
            The cached Point Stroke Thickness property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeriesStyle.PointStroke">
      <summary>
            Gets or sets the stroke colour to be used on the outline of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscreteHeatPlotSeriesStyle.PointStrokeThickness">
      <summary>
            Gets or sets the stroke thickness to be used on the outline of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.DiscreteHeatPlotSeriesStyle.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.HeatPlotSeriesStyle">
      <summary>
            A wrapper around the style for a heat plot series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.HeatPlotSeriesStyle.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.WriteableBitmapAdapter">
      <summary>
            An adapter for the writeable bitmap object to manage the different implementations
            in WPF and Silverlight.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapAdapter.#ctor(System.Int32,System.Int32)">
      <summary>
            Default constructor.
            </summary>
      <param name="height">The height of the writeable bitmap to create.</param>
      <param name="width">The width of the writeable bitmap to create.</param>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapAdapter.CreateNewImage">
      <summary>
            Creates a new image.
            </summary>
      <returns>An image of the correct dimensions containing the bitmap to be rendered.</returns>
    </member>
    <member name="M:Visiblox.Charts.WriteableBitmapAdapter.CommitChanges">
      <summary>
            Update the wrapped writeable bitmap with any changes that
            have been made to the pixel array.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.WriteableBitmapAdapter.PixelWidth">
      <summary>
            The width of the wrapped bitmap in pixels.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.WriteableBitmapAdapter.PixelHeight">
      <summary>
            The height of the wrapped bitmap in pixels.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.WriteableBitmapAdapter.Pixels">
      <summary>
            An integer array comprising of one entry for each pixel on the wrapped bitmap.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AutoSeriesGenerator">
      <summary>
            AutoSeriesGenerator defines attached properties to allow for an IEnumerable holding collections of business objects to be bound to a
            <see cref="T:Visiblox.Charts.Chart" />, and have appropriate <see cref="T:Visiblox.Charts.IChartSeries" /> instances automatically generated and managed
            upon changes to this collection.
            </summary>
      <remarks>
        <para>
            The XValuePath and YValuePath define binding paths to the properties on the business objects to use for the X and Y values of data points.
            The ChartSeriesProvider property is responsible for creating the <see cref="T:Visiblox.Charts.IChartSeries" /> instances for each collection.
            By default, this functionality is provided by <see cref="T:Visiblox.Charts.DefaultChartSeriesProvider" />, which accepts a string representation of the <see cref="T:Visiblox.Charts.IChartSeries" /> subclass to use.
            The TitlePath property identifies the binding path to the property to use for the title of a created series.
            </para>
        <para>
            If the IEnumerable declared as the <c>ItemsSource</c> implements INotifyCollectionChanged, then AutoSeriesGenerator will subscribe to the CollectionChanged events
            fired and update the Chart series accordingly.
            </para>
        <para>
            Rather than specifying X and Y bindings, one can alternatively provide a source collection which directly contains <see cref="T:Visiblox.Charts.IDataSeries" /> instances.
            Data points will thus not be created automatically, but one can still benefit from generation of <see cref="T:Visiblox.Charts.IChartSeries" />.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.IChartSeriesProvider" />
      <seealso cref="T:Visiblox.Charts.DefaultChartSeriesProvider" />
    </member>
    <member name="F:Visiblox.Charts.AutoSeriesGenerator.XValuePathProperty">
      <summary>
            Identifies the path to the property to use as the X value for the auto-generated data points.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.GetXValuePath(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the XValuePath property.
            </summary>
      <param name="property">The object from which to get the path.</param>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.SetXValuePath(System.Windows.DependencyObject,System.String)">
      <summary>
            Sets the value of the XValuePath property.
            </summary>
      <param name="property">The object on which to set the path.</param>
      <param name="value">The x value path to set.</param>
    </member>
    <member name="F:Visiblox.Charts.AutoSeriesGenerator.YValuePathProperty">
      <summary>
            Identifies the path to the property to use as the Y value for the auto-generated data points.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.GetYValuePath(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the YValuePath property.
            </summary>
      <param name="property">The object from which to get the path.</param>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.SetYValuePath(System.Windows.DependencyObject,System.String)">
      <summary>
            Sets the value of the YValuePath property.
            </summary>
      <param name="property">The object on which to set the path.</param>
      <param name="value">The y value path to set.</param>
    </member>
    <member name="F:Visiblox.Charts.AutoSeriesGenerator.YValuePathsProperty">
      <summary>
            Identifies the YValuePaths attached property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.GetYValuePaths(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the YValuePaths property.
            </summary>
      <param name="property">The object from which to get the paths.</param>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.SetYValuePaths(System.Windows.DependencyObject,Visiblox.Charts.YValuePathsCollection)">
      <summary>
            Sets the value of the YValuePaths property.
            </summary>
      <param name="property">The object on which to set the paths.</param>
      <param name="value">The y value paths to set.</param>
    </member>
    <member name="F:Visiblox.Charts.AutoSeriesGenerator.ChartSeriesProviderProperty">
      <summary>
            Identifies the ChartSeriesProvider responsible for creating the IChartSeries instances.
            By default, passing a string of the series name will instantiate that IChartSeries type.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.GetChartSeriesProvider(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the ChartSeriesProvider property.
            </summary>
      <param name="property">The object from which to get the provider.</param>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.SetChartSeriesProvider(System.Windows.DependencyObject,Visiblox.Charts.IChartSeriesProvider)">
      <summary>
            Sets the value of the ChartSeriesProvider property.
            </summary>
      <param name="property">The object on which to set the provider.</param>
      <param name="value">The provider to set.</param>
    </member>
    <member name="F:Visiblox.Charts.AutoSeriesGenerator.ItemsSourceProperty">
      <summary>
            Identifies the binding to the data to auto-generate IChartSeries for. In an MVVM context, specifies the binding to the view model holding the data.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.GetItemsSource(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the ItemsSource property.
            </summary>
      <param name="property">The object from which to get the source.</param>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.SetItemsSource(System.Windows.DependencyObject,System.Collections.IEnumerable)">
      <summary>
            Sets the value of the ItemsSource property.
            </summary>
      <param name="property">The object on which to set the source.</param>
      <param name="value">The items source to set.</param>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.ReleaseItemsSource(Visiblox.Charts.Chart)">
      <summary>
            Stop listening to INotifyCollectionChanged events on ItemsSource.
            </summary>
      <param name="chart">Chart</param>
    </member>
    <member name="F:Visiblox.Charts.AutoSeriesGenerator.TitlePathProperty">
      <summary>
            Identifies the path to the property to use as the title for the auto-generated IChartSeries.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.GetTitlePath(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the TitlePath property.
            </summary>
      <param name="property">The object from which to get the title.</param>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.SetTitlePath(System.Windows.DependencyObject,System.String)">
      <summary>
            Sets the value of the TitlePath property.
            </summary>
      <param name="property">The object on which to set the title.</param>
      <param name="value">The title to set.</param>
    </member>
    <member name="F:Visiblox.Charts.AutoSeriesGenerator.ItemsSourcePathProperty">
      <summary>
            In an MVVM context, identifies the property on the ItemsSource View Model which holds the data to auto-generate IChartSeries for.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.GetItemsSourcePath(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the ItemsSourcePath property.
            </summary>
      <param name="property">The object from which to get the path.</param>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.SetItemsSourcePath(System.Windows.DependencyObject,System.String)">
      <summary>
            Sets the value of the ItemsSourcePath property.
            </summary>
      <param name="property">The object on which to set the path.</param>
      <param name="value">The items source path to set.</param>
    </member>
    <member name="M:Visiblox.Charts.AutoSeriesGenerator.GetPropertyValue``1(System.Object,System.String)">
      <summary>
            Gets the value of the named property.
            </summary>
      <param name="source">The source of the extension method on which to call the method.</param>
      <param name="propertyName">The name of the property to retrieve the value for.</param>
      <returns>The value for the specified property or the default value if not set.</returns>
    </member>
    <member name="T:Visiblox.Charts.BindableDataPoint">
      <summary>
            Represents a data point with binding support, which is stored in the <see cref="T:Visiblox.Charts.BindableDataSeries" /> class.
            </summary>
      <remarks>
        <para>
            Rather than being created directly, a BindableDataPoint is created by a <see cref="T:Visiblox.Charts.BindableDataSeries" /> 
            automatically based on its source data collection.</para>
        <para>The data point may be single or multiple-valued, as required.</para>
        <para>When binding to a BindableDataPoint, it is possible to bind to properties of the source item via its DataContext.</para>
        <para>
            If the bound source item does not implement IComparable, it will be wrapped
            in the <see cref="T:Visiblox.Charts.BindableDataPointValueAdapter" /> adapter class which implements IComparable.
            </para>
      </remarks>
    </member>
    <member name="F:Visiblox.Charts.BindableDataPoint.XValueProperty">
      <summary>
            Identifies the XValue Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BindableDataPoint.YValueProperty">
      <summary>
            Identifies the YValue Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BindableDataPoint.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.BindableDataPoint.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.BindableDataPoint.Model">
      <summary>
            Gets the model it represents.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BindableDataPoint.DataSeries">
      <summary>
            The data series containing this data point.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BindableDataPoint.X">
      <summary>
            Gets the X value for this data point.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BindableDataPoint.Y">
      <summary>
            Gets the Y value for this data point.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BindableDataPoint.YValueMaximum">
      <summary>
            Gets the maximum of the Y values.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BindableDataPoint.YValueMinimum">
      <summary>
            Gets the maximum of the Y values.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BindableDataPoint.Item(System.Object)">
      <summary>
             Indexes the Y Value data range.
             For single value Y points this is just the Y Point itself.
            </summary>
      <param name="indexer">The index (or key) for a Y value.</param>
      <returns>The Y value at the given <paramref name="indexer" />.</returns>
    </member>
    <member name="P:Visiblox.Charts.BindableDataPoint.Item(System.String)">
      <summary>
            Gets or sets indexer for the Y Axis values.
            </summary>
      <param name="indexer">The Y Value description.</param>
      <returns>The indexed Y value.</returns>
    </member>
    <member name="P:Visiblox.Charts.BindableDataPoint.XValue">
      <summary>
            Gets or sets the XValue property. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BindableDataPoint.YValue">
      <summary>
            Gets or sets the YValue property. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.BindableDataPoint.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BindableDataPointValueAdapter">
      <summary>
            Used by <see cref="T:Visiblox.Charts.BindableDataPoint" /> to wrap an object which doesn't implement 
            IComparable into an IComparable interface using the adapter pattern.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BindableDataPointValueAdapter.#ctor(System.Object)">
      <summary>
            Constructor.
            </summary>
      <param name="adapted">The adaptee object.</param>
    </member>
    <member name="M:Visiblox.Charts.BindableDataPointValueAdapter.CompareTo(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BindableDataPointValueAdapter.ToString">
      <summary>
            Returns the adaptee object as a string.
            </summary>
      <returns>The string representation of the adapter.</returns>
    </member>
    <member name="M:Visiblox.Charts.BindableDataPointValueAdapter.Equals(System.Object)">
      <summary>
            Returns whether the adaptee object is equal to the passed object.
            </summary>
      <param name="obj">The object to compare to.</param>
      <returns>True if the objects are considered equal and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.BindableDataPointValueAdapter.GetHashCode">
      <summary>
            Returns the hash code of the adaptee object.
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:Visiblox.Charts.BindableDataPointValueAdapter.op_Inequality(Visiblox.Charts.BindableDataPointValueAdapter,Visiblox.Charts.BindableDataPointValueAdapter)">
      <summary>
            Overload for the != operator based on the Equals of the adapted point.
            </summary>
      <param name="left">The left hand point to compare.</param>
      <param name="right">The right hand point to compare.</param>
      <returns>True if the points are not equal and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.BindableDataPointValueAdapter.op_Equality(Visiblox.Charts.BindableDataPointValueAdapter,Visiblox.Charts.BindableDataPointValueAdapter)">
      <summary>
            Overload for the == operator based on the Equals of the adapted point.
            </summary>
      <param name="left">The left hand point to compare.</param>
      <param name="right">The right hand point to compare.</param>
      <returns>True if the points are equal and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.BindableDataPointValueAdapter.op_LessThan(Visiblox.Charts.BindableDataPointValueAdapter,Visiblox.Charts.BindableDataPointValueAdapter)">
      <summary>
            Overload for the &lt; operator based on the Equals of the adapted point.
            </summary>
      <param name="left">The left hand point to compare.</param>
      <param name="right">The right hand point to compare.</param>
      <returns>True if the left hand is less than right hand operand and false otherwise. Nulls are considered smallest.</returns>
    </member>
    <member name="M:Visiblox.Charts.BindableDataPointValueAdapter.op_GreaterThan(Visiblox.Charts.BindableDataPointValueAdapter,Visiblox.Charts.BindableDataPointValueAdapter)">
      <summary>
            Overload for the &gt; operator based on the Equals of the adapted point.
            </summary>
      <param name="left">The left hand point to compare.</param>
      <param name="right">The right hand point to compare.</param>
      <returns>True if the left hand is greater than right hand operand and false otherwise. Nulls are considered smallest.</returns>
    </member>
    <member name="P:Visiblox.Charts.BindableDataPointValueAdapter.Adapted">
      <summary>
            Gets the wrapped object.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BindableDataSeries">
      <summary>
             Represents a data series with data binding support.
             </summary>
      <remarks>
        <para>
             To create a BindableDataSeries set the <see cref="P:Visiblox.Charts.BindableDataSeries.XValueBinding" />, <see cref="P:Visiblox.Charts.BindableDataSeries.YValueBinding" /> and the <see cref="P:Visiblox.Charts.BindableDataSeries.ItemsSource" />.
             BindableDataSeries can support binding to multiple Y values. In this case use the <see cref="P:Visiblox.Charts.BindableDataSeries.YValueBindings" /> instead of <see cref="P:Visiblox.Charts.BindableDataSeries.YValueBinding" /> to specify Y bindings.
             BindableDataSeries consists of <see cref="T:Visiblox.Charts.BindableDataPoint" /> objects. It creates and manages this collection automatically.
             </para>
        <para>If you do not require the ability to bind to an existing data source, <see cref="T:Visiblox.Charts.DataSeries`2" /> provides an 
             alternate <see cref="T:Visiblox.Charts.IDataSeries" /> implementation constructing a list of data points directly.</para>
        <para>BindableDataSeries implements a read-only IList of <see cref="T:Visiblox.Charts.IDataPoint" /> to allow for direct access to the BindableDataPoints.</para>
        <para>If the XValueBinding or YValueBinding (and YValueBindings) are null at the time of rendering, an InvalidOperationException is thrown.</para>
      </remarks>
      <example>
            Create a BindableDataSeries bound to a dictionary:
             <code source="Help\Charts\IncludedCode\CreateSimpleBindingExample.cs" /></example>
      <seealso cref="T:Visiblox.Charts.BindableDataPoint" />
      <seealso cref="T:Visiblox.Charts.DataSeries`2" />
    </member>
    <member name="T:Visiblox.Charts.IChartSeriesAwareDataSeries">
      <summary>
            A specialisation of <see cref="T:Visiblox.Charts.IDataSeries" /> which is aware of the <see cref="T:Visiblox.Charts.IChartSeries" /> it is attached to.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IChartSeriesAwareDataSeries.ChartSeries">
      <summary>
            Gets or sets the <see cref="T:Visiblox.Charts.IChartSeries" /> to which this data series is attached.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BindableDataSeries.ItemsSourceProperty">
      <summary>
            Identifies the ItemsSource Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BindableDataSeries.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BindableDataSeries.#ctor(System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Default constructor that provides the SortedDataSeries with the given <paramref name="comparison" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BindableDataSeries.#ctor(System.String)">
      <summary>
            Constructor creating a series with the given <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series</param>
    </member>
    <member name="M:Visiblox.Charts.BindableDataSeries.#ctor(System.String,System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating a series with the given <paramref name="title" />. 
            Also adds the given <paramref name="comparison" /> delegate to the SortedDataSeries.
            </summary>
      <param name="title">
      </param>
      <param name="comparison">A Comparison{IDataPoint} delegate to be used by the SortedDataSeries.</param>
    </member>
    <member name="M:Visiblox.Charts.BindableDataSeries.#ctor(System.Boolean)">
      <summary>
            Construct a Bindable series that allows for maintenance of a sorted series to be declared.
            </summary>
      <param name="maintainSortedPoints">Indicate if this series should maintain a sorted list of its points.</param>
    </member>
    <member name="M:Visiblox.Charts.BindableDataSeries.#ctor(System.String,System.Boolean)">
      <summary>
            Constructor creating a series with the given <paramref name="title" /> and allows for
            maintenance of a sorted series to be declared.
            </summary>
      <param name="title">Title of the data series</param>
      <param name="maintainSortedPoints">Indicate if this series should maintain a sorted list of its points.</param>
    </member>
    <member name="M:Visiblox.Charts.BindableDataSeries.Refresh">
      <summary>
            Invoke this method to force the series to update its bound items.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BindableDataSeries.Contains(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BindableDataSeries.CopyTo(Visiblox.Charts.IDataPoint[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BindableDataSeries.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BindableDataSeries.IndexOf(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BindableDataSeries.GetSearchableSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BindableDataSeries.GetSearchableSeries(System.Comparison{Visiblox.Charts.IDataPoint})">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.BindableDataSeries.TitleProperty">
      <summary>
            Identifies the Title Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BindableDataSeries.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.BindableDataSeries.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.BindableDataSeries.ChartSeries">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BindableDataSeries.MaintainSortedDataSeries">
      <summary>
            Determines whether the inner SortedDataSeries will be maintained, allowing for
            optimal searching.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BindableDataSeries.ItemsSource">
      <summary>
            Gets or sets the ItemsSource property. This is the source data for the BindableDataSeries, it will be converted into a list of BindableDataPoints. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BindableDataSeries.YValueBindings">
      <summary>
            Gets or sets bindings for the Y points
            For single valued data points a single <see cref="T:Visiblox.Charts.YValueBinding" /> is used, 
            for multi Y-value data points multiple ones are used.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BindableDataSeries.XValueBinding">
      <summary>
            Gets or sets the binding for the X point.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BindableDataSeries.YValueBinding">
      <summary>
            Gets or sets the binding for the Y point.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.BindableDataSeries.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.BindableDataSeries.PropertyChangedRelay">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BindableDataSeries.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The selected element.</returns>
    </member>
    <member name="P:Visiblox.Charts.BindableDataSeries.Count">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BindableDataSeries.Title">
      <summary>
            Gets or sets the title of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.BindableDataSeries.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DataSeries`2">
      <summary>
            An <see cref="T:Visiblox.Charts.IDataSeries" /> consisting of a collection of <see cref="T:Visiblox.Charts.DataPoint`2">DataPoint</see> objects.
            </summary>
      <remarks>
            DataSeries fires PropertyChanged and CollectionChanged notifications when its data points are changed.
            DataSeries does not support binding. For a series with binding support see <see cref="T:Visiblox.Charts.BindableDataSeries" />.
            DataSeries contains a SortedDataSeries by default. On construction, a DataSeries can be provided with a Comparison{IDataPoint} delegate that will be
            passed through to the SortedDataSeries. If there is no requirement to have a SortedDataSeries, the DataSeries can be constructed with a false parameter
            which will disable the maintenance of the SortedDataSeries. In this scenario, there is no need to provide the Comparison{IDataPoint} delegate.
            </remarks>
      <typeparam name="TX">The X axis value type.</typeparam>
      <typeparam name="TY">The Y axis value type.</typeparam>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.#ctor">
      <summary>
            Constructor creating an empty data series with no title set.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.#ctor(System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating an empty data series with no title set and the given <paramref name="comparison" /> to be used by the SortedDataSeries.
            </summary>
      <param name="comparison">A Comparison{IDataPoint} delegate to be used by the SortedDataSeries.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.#ctor(System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint{`0,`1}})">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and no title set.
            </summary>
      <param name="points">Collection of data points that the series consists of.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.#ctor(System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint{`0,`1}},System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and no title set.
            </summary>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to be used by the SortedDataSeries.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.#ctor(System.String)">
      <summary>
            Constructor creating an empty DataSeries with the given <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.#ctor(System.String,System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating an empty DataSeries with the given <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to be used by the SortedDataSeries.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.#ctor(System.String,System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint{`0,`1}})">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and the title <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="points">Collection of data points that the series consists of.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.#ctor(System.String,System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint{`0,`1}},System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and the title <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to be used by the SortedDataSeries.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.#ctor(System.Boolean)">
      <summary>
            Constructor creating an empty data series with no title set and no SortedDataSeries.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.#ctor(System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint{`0,`1}},System.Boolean)">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and no title set and no SortedDataSeries.
            </summary>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="maintainSortedDataSeries">Indicate if a SortedDataSeries should be kept in sync.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.#ctor(System.String,System.Boolean)">
      <summary>
            Constructor creating an empty DataSeries with the given <paramref name="title" /> and no SortedDataSeries.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="maintainSortedDataSeries">Indicate if a SortedDataSeries should be kept in sync.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.#ctor(System.String,System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint{`0,`1}},System.Boolean)">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and the title <paramref name="title" /> and no SortedDataSeries.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="maintainSortedDataSeries">Indicate if a SortedDataSeries should be kept in sync.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.Add(`0,`1)">
      <summary>
            Convenience method for adding data points to the data series.
            </summary>
      <param name="x">The x value of the new data point.</param>
      <param name="y">The y value of the new data point.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.InsertItem(System.Int32,Visiblox.Charts.DataPoint{`0,`1})">
      <inheritdoc />
      <remarks>Maintain the sorted data if it is in use.</remarks>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.SetItem(System.Int32,Visiblox.Charts.DataPoint{`0,`1})">
      <inheritdoc />
      <remarks>Maintain the sorted data if it is in use.</remarks>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.RemoveAt(System.Int32)">
      <summary>
            Remove the point at the given index. Pass this removal through to the SortedDataSeries if it is being maintained.
            </summary>
      <param name="index">The index at which the point is to be removed.</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.RemoveItem(System.Int32)">
      <inheritdoc />
      <remarks>Maintain the sorted data if it is in use.</remarks>
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.ClearItems">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.GetSearchableSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DataSeries`2.GetSearchableSeries(System.Comparison{Visiblox.Charts.IDataPoint})">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DataSeries`2.MaintainSortedDataSeries">
      <summary>
            Determines whether the inner SortedDataSeries will be maintained, allowing for
            optimal searching.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DataSeries`2.Title">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.DataSeriesWithRanges">
      <summary>
            Extends DataSeries with Range support
            Automatically re-calculates X and Y ranges when DataSeries is changed
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IDataSeriesWithRanges">
      <summary>
            Extends <see cref="T:Visiblox.Charts.IDataSeries" /> with range support.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IDataSeriesWithRanges.UnsubscribeFromEvents">
      <summary>
            Un-sets the wrapped data series by de-registering events
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IDataSeriesWithRanges.XValueRange">
      <summary>
            X value range of the wrapped data series
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IDataSeriesWithRanges.YValueRange">
      <summary>
            Y value range of the wrapped data series
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DataSeriesWithRanges.#ctor(Visiblox.Charts.IRange,Visiblox.Charts.IRange,Visiblox.Charts.IDataSeries)">
      <summary>
            Constructor
            </summary>
      <param name="xAxisRange">Range for the X axis</param>
      <param name="yAxisRange">Range for the Y axis</param>
      <param name="adaptee">The data series to be wrapped</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeriesWithRanges.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.DataSeriesWithRanges.CollectionChanged" /> event if defined.  
            </summary>
      <param name="e">The args specified for the raised event</param>
    </member>
    <member name="M:Visiblox.Charts.DataSeriesWithRanges.UnsubscribeFromEvents">
      <summary>
            Un-sets the wrapped data series by de-registering events
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DataSeriesWithRanges.GetEnumerator">
      <summary>
            Returns the enumerator of the adaptee
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.DataSeriesWithRanges.GetSearchableSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DataSeriesWithRanges.GetSearchableSeries(System.Comparison{Visiblox.Charts.IDataPoint})">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DataSeriesWithRanges.XValueRange">
      <summary>
            X value range of the wrapped data series
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DataSeriesWithRanges.YValueRange">
      <summary>
            Y value range of the wrapped data series
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DataSeriesWithRanges.Title">
      <summary>
            The title of the adaptee
            </summary>
    </member>
    <member name="E:Visiblox.Charts.DataSeriesWithRanges.CollectionChanged">
      <summary>
        <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> implementation
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DefaultChartSeriesProvider">
      <summary>
            A default implementation of <see cref="T:Visiblox.Charts.IChartSeriesProvider" />, which always provides instances of the
            <see cref="T:Visiblox.Charts.IChartSeries" /> type passed upon instantiation.
            </summary>
      <remarks>
        <para>
            Given a collection containing collections of business objects, this implementation of IChartSeriesProvider
            ensures that each collection will be represented by the same chart series type. If this is not the desired behaviour, it is suggested to
            define a custom implementation of IChartSeriesProvider.
            </para>
      </remarks>
    </member>
    <member name="T:Visiblox.Charts.IChartSeriesProvider">
      <summary>
            An interface for providing instances of IChartSeries to a Chart via an attached behaviour on <see cref="T:Visiblox.Charts.AutoSeriesGenerator" />.
            Strings representing IChartSeries types are automatically converted into a type using <see cref="T:Visiblox.Charts.DefaultChartSeriesProvider" />.
            </summary>
      <seealso cref="T:Visiblox.Charts.DefaultChartSeriesProvider" />
      <seealso cref="T:Visiblox.Charts.Primitives.StringToChartSeriesProviderConverter" />
    </member>
    <member name="M:Visiblox.Charts.IChartSeriesProvider.CreateSeries(System.Object,System.Object)">
      <summary>
            Creates an appropriate IChartSeries instance for a bound object.
            </summary>
      <param name="targetParent">The target calling this method. When targetParent is an <see cref="T:Visiblox.Charts.IChartMultipleSeries" />,
            CreateSeries should enforce any type constraints upon the IChartMultipleSeries.Series property.</param>
      <param name="boundObject">The data bound object to wrap in an IChartSeries instance.</param>
      <returns>An instance of the appropriate IChartSeries.</returns>
    </member>
    <member name="M:Visiblox.Charts.DefaultChartSeriesProvider.#ctor(System.Type)">
      <summary>
            Constructor.
            </summary>
      <param name="seriesType">The <see cref="T:System.Type" /> of series to create.</param>
    </member>
    <member name="M:Visiblox.Charts.DefaultChartSeriesProvider.CreateSeries(System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.PropertyChangedRelayerEventHandler">
      <summary>
            Handles relayed PropertyChanged events.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.MultiValuedDataPoint`2">
      <summary>
            Represents a multi Y valued data point.
            </summary>
      <remarks>
        <para>Multiple Y values are stored in a <see cref="T:System.Collections.Generic.Dictionary`2" />, which is provided at
            construction time.</para>
        <para>For data points which only have a single Y value, use <see cref="T:Visiblox.Charts.DataPoint`2" />.</para>
      </remarks>
      <typeparam name="TX">The X axis value type.</typeparam>
      <typeparam name="TY">The Y axis value type.</typeparam>
    </member>
    <member name="M:Visiblox.Charts.MultiValuedDataPoint`2.#ctor(`0,System.Collections.Generic.Dictionary{System.Object,`1})">
      <summary>
            Constructs a new instance of a multi-valued data point.  If used, the data point will not have a value for its
            Y property.
            </summary>
      <param name="xValue">The X value for this data point.</param>
      <param name="yValues">Collection of Y values for this data point.</param>
    </member>
    <member name="M:Visiblox.Charts.MultiValuedDataPoint`2.#ctor(`0,`1,System.Collections.Generic.Dictionary{System.Object,`1})">
      <summary>
            Constructs a new instance of a multi-valued data point.
            </summary>
      <param name="xValue">The X value for this data point.</param>
      <param name="yValue">The Y value for this data point.</param>
      <param name="yValues">Collection of additional Y values for this data point.</param>
    </member>
    <member name="P:Visiblox.Charts.MultiValuedDataPoint`2.Y">
      <summary>
            Gets or sets the Y value for this data point. If no Y value has been set, YValueMinimum will be returned.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.MultiValuedDataPoint`2.Item(System.Object)">
      <summary>
            Gets or sets indexer for the Y Axis values.
            </summary>
      <param name="indexer">The Y Value description.</param>
      <returns>The indexed Y value or null if index doesn't exist.</returns>
    </member>
    <member name="P:Visiblox.Charts.MultiValuedDataPoint`2.Item(System.String)">
      <summary>
            Gets or sets indexer for the Y Axis values.
            </summary>
      <param name="indexer">The Y Value description.</param>
      <returns>The indexed Y value.</returns>
    </member>
    <member name="P:Visiblox.Charts.MultiValuedDataPoint`2.YValueMaximum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.MultiValuedDataPoint`2.YValueMinimum">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.PropertyChangedRelayerEventArgs">
      <summary>
            Contains state information and event data associated with a PropertyChangedRelay event.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PropertyChangedRelayerEventArgs.#ctor(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Constructor.
            </summary>
      <param name="originalSource">Object raising the original PropertyChanged event.</param>
      <param name="e">Arguments of the original PropertyChanged event.</param>
    </member>
    <member name="P:Visiblox.Charts.PropertyChangedRelayerEventArgs.PropertyName">
      <summary>
            Gets the name of the property that changed.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PropertyChangedRelayerEventArgs.OriginalSource">
      <summary>
            The original source of the PropertyChanged event.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RelayingSortedDataSeries`1">
      <summary>
            Provides a simple, searchable data series with data points that support NotifyPropertyChanged. Null points are silently ignored. Maintains an ascending sort order.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.ISearchableSeries">
      <summary>
            An interface that provides a number of search based methods. This interface should be implemented by any data series that
            wishes to maintain an order and wants efficient search capabilities.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.ISortable">
      <summary>
            A simple interface for marking DataSeries as sortable.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ISortable.Sort">
      <summary>
            Sort the series in a given order.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.ISortable.Comparison">
      <summary>
            Stores the key comparison function.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ISearchableSeries.GetItemsOfValue(Visiblox.Charts.IDataPoint)">
      <summary>
            Gets a sequence of all the items in the list with value equal to the given value, in ascending order.
            </summary>
      <param name="itemValue">The value to be matched for items.</param>
      <returns>Sequence of all values.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ISearchableSeries.GetItemsAfterValue(Visiblox.Charts.IDataPoint)">
      <summary>
            Get a sequence of all the items in the list with value greater than the given value, in ascending order.
            </summary>
      <param name="itemValue">The value to be matched.</param>
      <returns>Sequence of found values.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ISearchableSeries.GetItemsBeforeValue(Visiblox.Charts.IDataPoint)">
      <summary>
            Gets a sequence of all the items in the list with value less than the given value, in descending order.
            </summary>
      <param name="itemValue">The value to be matched.</param>
      <returns>Sequence of found values.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ISearchableSeries.GetItemsAfterValueInclusive(Visiblox.Charts.IDataPoint)">
      <summary>
            Gets a sequence of all the items in the list with value greater than or equal to the given value, in ascending order.
            </summary>
      <param name="itemValue">The value to be matched.</param>
      <returns>Sequence of found values.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ISearchableSeries.GetItemsBeforeValueInclusive(Visiblox.Charts.IDataPoint)">
      <summary>
            Get a sequence of all the items in the list with value less than or equal to the given value, in descending order.
            </summary>
      <param name="itemValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ISearchableSeries.GetItemBeforeValue(Visiblox.Charts.IDataPoint)">
      <summary>
            Get the first item that appears in the collection before the given value.
            </summary>
      <param name="itemValue">The value to find an item before.</param>
      <returns>The IDataPoint item that appears immediately before the given value.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ISearchableSeries.GetItemAfterValue(Visiblox.Charts.IDataPoint)">
      <summary>
            Get the first item that appears in the collection after the given value.
            </summary>
      <param name="itemValue">The value to find an item after.</param>
      <returns>The IDataPoint item that appears immediately after the given value.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.ISearchableSeries.FindIndexToInsertItem(Visiblox.Charts.IDataPoint)">
      <summary>
            Search the list for the index at which the given item should be added to maintain order.
            </summary>
      <param name="itemValue">The item value to be inserted.</param>
      <returns>Index at which item should be inserted.</returns>
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.GetSearchableSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.GetSearchableSeries(System.Comparison{Visiblox.Charts.IDataPoint})">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.#ctor(System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Default constructor which takes a Comparison delegate.
            </summary>
      <param name="comparison">A Comparison{IDataPoint} delegate to use in the sorting algorithm</param>
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating a SortedDataSeries with the given <paramref name="points" />, and no title set.
            </summary>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to use in the sorting algorithm</param>
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.#ctor(System.String,System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating an empty SortedDataSeries with the given <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to use in the sorting algorithm</param>
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0},System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and the title <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to use in the sorting algorithm</param>
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Overrides OnCollectionChanged in order to suppress <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> 
            notifications when adding a range.
            </summary>
      <param name="e">Arguments of the event being raised.</param>
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.Add(`0)">
      <summary>
            Add the given point to the data series.
            </summary>
      <remarks>
            As this is a <see cref="T:Visiblox.Charts.SortedDataSeries`2" /> the point will actually be inserted into the correct location
            in the series to avoid having to unnecessarily sorting the series.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Add a range of values to the collection and perform a Sort operation.
            </summary>
      <param name="items">The range of DataPoint items to add to the collection.</param>
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.Insert(System.Int32,`0)">
      <summary>
            Insert the item at the given index, then sort the collection
            </summary>
      <param name="index">
      </param>
      <param name="dataPoint">
      </param>
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.Sort">
      <summary>
            Peforms a quick sort on the data. Only supports ascending sort order. Override to add support of Descending SortOrder.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.GetItemsOfValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.GetItemsAfterValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.GetItemsBeforeValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.GetItemsAfterValueInclusive(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.GetItemsBeforeValueInclusive(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.GetItemAfterValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.GetItemBeforeValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.FindIndexToInsertItem(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`1.PointIsValid(Visiblox.Charts.IDataPoint)">
      <summary>
            Decide if the given <paramref name="dataPoint" /> is valid for use by this series.
            </summary>
      <param name="dataPoint">The data point to evaluate.</param>
      <returns>True if point can be used by the series; false otherwise.</returns>
    </member>
    <member name="P:Visiblox.Charts.RelayingSortedDataSeries`1.SuppressINCC">
      <summary>
      </summary>
    </member>
    <member name="P:Visiblox.Charts.RelayingSortedDataSeries`1.Title">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RelayingSortedDataSeries`1.Comparison">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.RelayingSortedDataSeries`2">
      <summary>
            An implementation of SortedDataseriesNPC whose API more closely resembles the DataSeries{TX,TY} API.
            </summary>
      <typeparam name="TX">An IComparable.</typeparam>
      <typeparam name="TY">An IComparable.</typeparam>
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`2.#ctor(System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Simple constructor that provides a comparison delegate used in sorting.
            </summary>
      <param name="comparison">
      </param>
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`2.#ctor(System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint{`0,`1}},System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating a SortedDataSeries with the given <paramref name="points" />, and no title set.
            </summary>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to use in the sorting algorithm</param>
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`2.#ctor(System.String,System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating an empty SortedDataSeries with the given <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to use in the sorting algorithm</param>
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`2.#ctor(System.String,System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint{`0,`1}},System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and the title <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to use in the sorting algorithm</param>
    </member>
    <member name="M:Visiblox.Charts.RelayingSortedDataSeries`2.Add(`0,`1)">
      <summary>
            Convenience method for adding data points to the data series.
            </summary>
      <param name="x">The x value of the new data point.</param>
      <param name="y">The y value of the new data point.</param>
    </member>
    <member name="T:Visiblox.Charts.SearchableSortedDataPointList">
      <summary>
            A list of data points, sorted by value according to a supplied comparison method, with provision for searching.
            </summary>
      <seealso cref="T:Visiblox.Charts.Primitives.ISearchableSeries" />
    </member>
    <member name="T:Visiblox.Charts.SearchableSortedList`1">
      <summary>
            A list of data points, sorted by value according to a supplied comparison method, with provision for searching. For use by
            <see cref="T:Visiblox.Charts.SearchableSortedDataPointList" />.
            </summary>
      <typeparam name="T">List item type</typeparam>
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.#ctor(Visiblox.Charts.Primitives.SortedList{`0})">
      <summary>
            Constructor from existing list.
            </summary>
      <param name="sortedList">Existing list</param>
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.#ctor(System.Comparison{`0})">
      <summary>
            Constructor specifying comparison.
            </summary>
      <param name="comparison">Comparison function</param>
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.Add(`0)">
      <summary>
            Add item to the list
            </summary>
      <param name="item">Item to add</param>
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Add range of items to the list
            </summary>
      <param name="collection">Items to add</param>
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.Remove(`0)">
      <summary>
            Remove an item from the list
            </summary>
      <param name="item">Item to remove</param>
      <returns>Whether item was removed</returns>
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.Clear">
      <summary>
            Clear the list
            </summary>
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.GetItemsOfValue(`0)">
      <inheritdoc cref="M:Visiblox.Charts.Primitives.ISearchableSeries.GetItemsOfValue(Visiblox.Charts.IDataPoint)" />
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.GetItemsAfterValue(`0)">
      <inheritdoc cref="M:Visiblox.Charts.Primitives.ISearchableSeries.GetItemsAfterValue(Visiblox.Charts.IDataPoint)" />
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.GetItemsBeforeValue(`0)">
      <inheritdoc cref="M:Visiblox.Charts.Primitives.ISearchableSeries.GetItemsBeforeValue(Visiblox.Charts.IDataPoint)" />
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.GetItemsAfterValueInclusive(`0)">
      <inheritdoc cref="M:Visiblox.Charts.Primitives.ISearchableSeries.GetItemsAfterValueInclusive(Visiblox.Charts.IDataPoint)" />
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.GetItemsBeforeValueInclusive(`0)">
      <inheritdoc cref="M:Visiblox.Charts.Primitives.ISearchableSeries.GetItemsBeforeValueInclusive(Visiblox.Charts.IDataPoint)" />
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.GetItemBeforeValue(`0)">
      <inheritdoc cref="M:Visiblox.Charts.Primitives.ISearchableSeries.GetItemBeforeValue(Visiblox.Charts.IDataPoint)" />
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.GetItemAfterValue(`0)">
      <inheritdoc cref="M:Visiblox.Charts.Primitives.ISearchableSeries.GetItemAfterValue(Visiblox.Charts.IDataPoint)" />
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.FindIndexToInsertItem(`0)">
      <inheritdoc cref="M:Visiblox.Charts.Primitives.ISearchableSeries.FindIndexToInsertItem(Visiblox.Charts.IDataPoint)" />
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.GetEnumerator">
      <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator" />
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedList`1.Sort">
      <inheritdoc cref="M:Visiblox.Charts.Primitives.ISortable.Sort" />
    </member>
    <member name="P:Visiblox.Charts.SearchableSortedList`1.Item(System.Int32)">
      <summary>
            Indexer
            </summary>
      <param name="index">Index</param>
      <returns>Item</returns>
    </member>
    <member name="P:Visiblox.Charts.SearchableSortedList`1.Count">
      <summary>
            Gets the number of items in the list
            </summary>
    </member>
    <member name="P:Visiblox.Charts.SearchableSortedList`1.Comparison">
      <inheritdoc cref="P:Visiblox.Charts.Primitives.ISortable.Comparison" />
    </member>
    <member name="M:Visiblox.Charts.SearchableSortedDataPointList.#ctor(System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor.
            </summary>
      <param name="comparison">Comparison to use</param>
    </member>
    <member name="T:Visiblox.Charts.SortedDataSeries`1">
      <summary>
            Provides a simple, searchable data series. Null points are silently ignored. Maintains an ascending sort order
            based on the provided Comparison delegate.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.GetSearchableSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.GetSearchableSeries(System.Comparison{Visiblox.Charts.IDataPoint})">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.#ctor(System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Default constructor which takes a Comparison delegate.
            </summary>
      <param name="comparison">A Comparison{IDataPoint} delegate to use in the sorting algorithm</param>
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating a SortedDataSeries with the given <paramref name="points" />, and no title set.
            </summary>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to use in the sorting algorithm</param>
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.#ctor(System.String,System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating an empty SortedDataSeries with the given <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to use in the sorting algorithm</param>
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0},System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and the title <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to use in the sorting algorithm</param>
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Overrides OnCollectionChanged in order to suppress <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> 
            notifications when adding a range.
            </summary>
      <param name="e">Arguments of the event being raised.</param>
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.Add(`0)">
      <summary>Add a datapoint to the series</summary>
      <remarks>
            As this is a <see cref="T:Visiblox.Charts.SortedDataSeries`2" /> the point will actually be inserted into the correct location
            in the series to avoid having to unnecessarily sorting the series.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Add a range of values to the collection and perform a Sort operation.
            </summary>
      <param name="items">The range of DataPoint items to add to the collection.</param>
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.Insert(System.Int32,`0)">
      <summary>
            Insert the item at the given index, then sort the collection
            </summary>
      <param name="index">
      </param>
      <param name="dataPoint">
      </param>
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.GetItemsOfValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.GetItemsAfterValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.GetItemsBeforeValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.GetItemsAfterValueInclusive(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.GetItemsBeforeValueInclusive(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.GetItemAfterValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.GetItemBeforeValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.FindIndexToInsertItem(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.Sort">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`1.PointIsValid(Visiblox.Charts.IDataPoint)">
      <summary>
            Decide if the given <paramref name="dataPoint" /> is valid for use by this series.
            </summary>
      <param name="dataPoint">The data point to evaluate.</param>
      <returns>True if point can be used by the series; false otherwise.</returns>
    </member>
    <member name="P:Visiblox.Charts.SortedDataSeries`1.SuppressINCC">
      <summary>
      </summary>
    </member>
    <member name="P:Visiblox.Charts.SortedDataSeries`1.Title">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.SortedDataSeries`1.Comparison">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.SortedDataSeries`2">
      <summary>
            An implementation of SortedDataseries whose API more closely resembles the DataSeries{TX,TY} API.
            </summary>
      <typeparam name="TX">An IComparable.</typeparam>
      <typeparam name="TY">An IComparable.</typeparam>
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`2.#ctor(System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Simple constructor that provides a comparison delegate used in sorting.
            </summary>
      <param name="comparison">
      </param>
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`2.#ctor(System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint{`0,`1}},System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating a SortedDataSeries with the given <paramref name="points" />, and no title set.
            </summary>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to use in the sorting algorithm</param>
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`2.#ctor(System.String,System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating an empty SortedDataSeries with the given <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to use in the sorting algorithm</param>
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`2.#ctor(System.String,System.Collections.Generic.IEnumerable{Visiblox.Charts.DataPoint{`0,`1}},System.Comparison{Visiblox.Charts.IDataPoint})">
      <summary>
            Constructor creating a DataSeries with the given <paramref name="points" />, and the title <paramref name="title" />.
            </summary>
      <param name="title">Title of the data series.</param>
      <param name="points">Collection of data points that the series consists of.</param>
      <param name="comparison">A Comparison{IDataPoint} delegate to use in the sorting algorithm</param>
    </member>
    <member name="M:Visiblox.Charts.SortedDataSeries`2.Add(`0,`1)">
      <summary>
            Convenience method for adding data points to the data series.
            </summary>
      <param name="x">The x value of the new data point.</param>
      <param name="y">The y value of the new data point.</param>
    </member>
    <member name="T:Visiblox.Charts.YValueBinding">
      <summary>
            Represents a value object used to indicate the binding for a Y-value.
            </summary>
      <remarks>
            This class is used in <see cref="T:Visiblox.Charts.BindableDataSeries" /> to store multiple Y value bindings.
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.YValueBinding.Binding">
      <summary>
            Gets or sets the binding for a Y value.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.YValueBinding.YValueKey">
      <summary>
            Gets or sets the name of the Y-value to which the binding relates.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.YValueBindingsCollection">
      <summary>
            Represents a collection of <see cref="T:Visiblox.Charts.YValueBinding" /> objects used to identify bindings to Y-values for a multi-Y value data point.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.YValueBindingSlave">
      <summary>
            Represents a class which is used to evaluate a binding. 
            </summary>
      <remarks>
            An instance of this class is created for each of the Y Value bindings in a <see cref="T:Visiblox.Charts.BindableDataPoint" />.
            A YValueBindingSlave need never be manually created to use a <see cref="T:Visiblox.Charts.BindableDataSeries" />,
            this is taken care of automatically.
            </remarks>
    </member>
    <member name="F:Visiblox.Charts.YValueBindingSlave.ValueProperty">
      <summary>
            Identifies the Value Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.YValueBindingSlave.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.YValueBindingSlave.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.YValueBindingSlave.Value">
      <summary>
            Gets or sets the Value property. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.YValueBindingSlave.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.YValuePath">
      <summary>
            Represents a value object used to indicate the binding for a Y-value on a multi-Y-valued data point.
            </summary>
      <remarks>
        <para>
            A YValuePath object holds a path to a property to bind to the given key value on a multi-Y-valued data point. Multiple YValuePaths are held within a
            YValuePathsCollection, and are supplied to the AutoSeriesGenerator.YValuePaths attached property to automatically create multi-Y-valued chart series.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.YValuePathsCollection" />
      <seealso cref="T:Visiblox.Charts.AutoSeriesGenerator" />
    </member>
    <member name="P:Visiblox.Charts.YValuePath.Path">
      <summary>
            Gets or sets the path to a Y value.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.YValuePath.Key">
      <summary>
            Gets or sets the name of the Y-value to which the binding relates.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.YValuePathsCollection">
      <summary>
            Represents a collection of <see cref="T:Visiblox.Charts.YValuePath" /> objects used to identify the paths to Y-values for a multi-Y value data point.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ExtendedLegendPosition">
      <summary>
            Determines where the legend should be displayed within the <see cref="T:Visiblox.Charts.Chart" />.
            Supports inside and outside legend positioning.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ExtendedLegendPosition.LeftOutside">
      <summary>
            On the left, outside of the the plot area
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ExtendedLegendPosition.LeftInside">
      <summary>
            On the left, inside the the plot area
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ExtendedLegendPosition.RightInside">
      <summary>
            On the right, inside the the plot area
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ExtendedLegendPosition.RightOutside">
      <summary>
            On the right, outside of the the plot area
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ExtendedLegendPosition.TopOutside">
      <summary>
            Above the the plot area
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ExtendedLegendPosition.TopInside">
      <summary>
            On the top of the plot area
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ExtendedLegendPosition.BottomInside">
      <summary>
            On the bottom of the plot area
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ExtendedLegendPosition.BottomOutside">
      <summary>
            Below the plot area
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Legend">
      <summary>
            Represents a chart legend rendered as a collection of <see cref="T:Visiblox.Charts.LegendItem" />
            instances each bound to a series.
            </summary>
      <remarks>
            Each <see cref="T:Visiblox.Charts.Chart" /> has one legend, represented as a Legend object. The legend is never created nor
            modified by the chart user, but instead the chart adds and removes items to the legend based upon the
            series in the chart. The <see cref="P:Visiblox.Charts.ChartBase.LegendVisibility" />,
            <see cref="P:Visiblox.Charts.ChartBase.LegendStyle" />, and
            <see cref="P:Visiblox.Charts.ChartBase.LegendOrdering" /> properties of the <see cref="T:Visiblox.Charts.Chart" /> may be used to 
            alter the presentation of the legend.
            </remarks>
      <example>
            The legend appearance may be customised by changing its template (by setting the <see cref="P:Visiblox.Charts.ChartBase.LegendTemplate" />
                property). The default template applied to the Legend is the following:
            <code source="Help\Charts\IncludedCode\LegendTemplate.xml" lang="XAML" /></example>
    </member>
    <member name="M:Visiblox.Charts.Legend.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Legend.OnApplyTemplate">
      <summary>
            Sets up the visual representation of the Legend.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Legend.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.Legend.TitleProperty">
      <summary>
            Identifies the Title Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Legend.TitleStyleProperty">
      <summary>
            Identifies the TitleStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Legend.OrderingProperty">
      <summary>
            Identifies the Ordering Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Legend.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.Legend.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.Legend.LegendItems">
      <summary>
            The <see cref="T:Visiblox.Charts.LegendItem" />s that have already been added to this <see cref="T:Visiblox.Charts.Legend" /></summary>
    </member>
    <member name="P:Visiblox.Charts.Legend.Title">
      <summary>
            Gets or sets the legend title. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Legend.TitleStyle">
      <summary>
            Gets or sets the style applied to the legend title. The Style should have a TargetType of TextBlock. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Legend.Ordering">
      <summary>
            Gets or sets the ordering of legend items. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.Legend.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.LegendItem">
      <summary>
            An item within the legend, bound to a series.
            </summary>
      <remarks>
            Legend items are automatically created and added to the chart, see <see cref="T:Visiblox.Charts.Legend" /> and <see cref="T:Visiblox.Charts.ILegendItemProvider" /> for more information.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.LegendItem.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.LegendLayoutContainer">
      <summary>
            The <c>LegendLayoutContainer</c> manages the layout of the various chart components, including the chart
            plot-area, axes and legend.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LegendLayoutContainer.#ctor">
      <summary>
            Creates a LegendLayoutContainer.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LegendLayoutContainer.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.LegendLayoutContainer.UpdateLegendPosition">
      <summary>Update the position of the legend according to <see cref="P:Visiblox.Charts.Primitives.LegendLayoutContainer.LegendPosition" />.</summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LegendLayoutContainer.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.Primitives.LegendLayoutContainer.ChartContentProperty">
      <summary>
            Identifies the ChartContent Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.LegendLayoutContainer.XAxisSecondaryContainerProperty">
      <summary>
            Identifies the XAxisSecondaryContainer Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.LegendLayoutContainer.XAxisPrimaryContainerProperty">
      <summary>
            Identifies the XAxisPrimaryContainer Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.LegendLayoutContainer.YAxisSecondaryContainerProperty">
      <summary>
            Identifies the YAxisSecondaryContainer Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.LegendLayoutContainer.YAxisPrimaryContainerProperty">
      <summary>
            Identifies the YAxisPrimaryContainer Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.LegendLayoutContainer.LegendContentProperty">
      <summary>
            Identifies the LegendContent Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.LegendLayoutContainer.LegendPositionProperty">
      <summary>
            Identifies the LegendPosition Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LegendLayoutContainer.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.Primitives.LegendLayoutContainer.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.Primitives.LegendLayoutContainer.ChartContent">
      <summary>
            Gets or sets the chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.LegendLayoutContainer.XAxisSecondaryContainer">
      <summary>
            Gets or sets the X axis secondary container. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.LegendLayoutContainer.XAxisPrimaryContainer">
      <summary>
            Gets or sets the X axis primary container. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.LegendLayoutContainer.YAxisSecondaryContainer">
      <summary>
            Gets or sets the Y axis secondary container. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.LegendLayoutContainer.YAxisPrimaryContainer">
      <summary>
            Gets or sets the Y axis primary container. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.LegendLayoutContainer.LegendContent">
      <summary>
            Gets or sets the legend. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.LegendLayoutContainer.LegendPosition">
      <summary>
            Gets or sets the position of the legend. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.Primitives.LegendLayoutContainer.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.LegendOrdering">
      <summary>
            Defines ordering modes for legend items.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendOrdering.Normal">
      <summary>
            The order in which the items were added to the legend.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendOrdering.Reversed">
      <summary>
            The reverse of the order in which the items were added to the legend.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendOrdering.Alphabetical">
      <summary>
            Ordered alphabetically by title.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.LegendPosition">
      <summary>
            Determines where the legend should be displayed within the <see cref="T:Visiblox.Charts.Chart" />.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.OutsideTopLeft">
      <summary>
            Place the legend outside the plot area in the top left corner.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.OutsideTopCenter">
      <summary>
            Place the legend outside and above the plot area.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.OutsideTopRight">
      <summary>
            Place the legend outside the plot area in the top right corner.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.OutsideMiddleLeft">
      <summary>
            Place the legend outside and to the left of the plot area.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.OutsideMiddleRight">
      <summary>
            Place the legend outside and to the right of the plot area.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.OutsideBottomLeft">
      <summary>
            Place the legend outside the plot area in the bottom left corner.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.OutsideBottomCenter">
      <summary>
            Place the legend outside and below the plot area.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.OutsideBottomRight">
      <summary>
            Place the legend outside the plot area in the bottom right corner.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.InsideTopLeft">
      <summary>
            Place the legend inside the plot area in the top left corner.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.InsideTopCenter">
      <summary>
            Place the legend inside the top edge of the plot area.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.InsideTopRight">
      <summary>
            Place the legend inside the plot area in the top right corner.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.InsideMiddleLeft">
      <summary>
            Place the legend inside the left edge of the plot area.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.InsideMiddleRight">
      <summary>
            Place the legend inside the right edge of the plot area.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.InsideBottomLeft">
      <summary>
            Place the legend inside the plot area in the bottom left corner.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.InsideBottomCenter">
      <summary>
            Place the legend inside the bottom edge of the plot area.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LegendPosition.InsideBottomRight">
      <summary>
            Place the legend inside the plot area in the bottom right corner.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.AlignmentConverter">
      <summary>
            A Converter that converts a <see cref="T:System.Windows.HorizontalAlignment" /> to a <see cref="T:System.Windows.TextAlignment" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.AlignmentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Left, Right and Center <see cref="T:System.Windows.HorizontalAlignment" />s are converted to corresponding <see cref="T:System.Windows.TextAlignment" />s.  HorizontalAlignment.Stretch is converted to TextAlignment.Center.
            </summary>
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.AlignmentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Left, Right and Center <see cref="T:System.Windows.TextAlignment" />s are converted back to corresponding <see cref="T:System.Windows.HorizontalAlignment" />s.  
            </summary>
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.Primitives.BoolToSignConverter">
      <summary>
            Converter to change the sign of the provided decimal parameter
            when bound to a Boolean value.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.BoolToSignConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Return the parameter value by multiplying by -1 if the bound to
            Boolean property is true.
            </summary>
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.BoolToSignConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Not Implemented
            </summary>
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.Primitives.BoolToVisibilityConverter">
      <summary>
            Converts true to <see cref="F:System.Windows.Visibility.Visible" /> and false
            to <see cref="F:System.Windows.Visibility.Collapsed" />.
            </summary>
      <remarks>
            The conversion only works from bool to <see cref="T:System.Windows.Visibility" />, not the other way round.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.Primitives.BoolToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts true to <see cref="F:System.Windows.Visibility.Visible" /> and false to <see cref="F:System.Windows.Visibility.Collapsed" />.
            </summary>
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.BoolToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.Primitives.Clip">
      <summary>
            Defines an attached property which clips a framework element to be bounded by its actual size.
            </summary>
      <remarks>This class defines an attached property <c>Clip.ToBounds</c>. Attaching this property to a 
            <see cref="T:System.Windows.FrameworkElement" /> causes its <see cref="P:System.Windows.UIElement.Clip" /> 
            property to be set to its actual size (and resized accordingly when the element is resized).
            This results in the <see cref="T:System.Windows.FrameworkElement" /> clipping its children at its boundaries.
            </remarks>
    </member>
    <member name="F:Visiblox.Charts.Primitives.Clip.ToBoundsProperty">
      <summary>
            Identifies the ToBounds Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.Clip.GetToBounds(System.Windows.DependencyObject)">
      <summary>
            Gets the ToBounds Dependency Property.
            </summary>
      <param name="target">Object from which to retrieve the property.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.Clip.SetToBounds(System.Windows.DependencyObject,System.Boolean)">
      <summary>
            Sets the ToBounds dependency Property.
            </summary>
      <param name="target">Object on which to set the property.</param>
      <param name="value">Value to set.</param>
    </member>
    <member name="T:Visiblox.Charts.Primitives.DataPointCollectionSearch">
      <summary>
            DataPointCollectionSearch provides reusable search functionality for default ISearchableSeries implementations.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointCollectionSearch.GetItemsOfValue(System.Collections.Generic.IEnumerable{Visiblox.Charts.IDataPoint},Visiblox.Charts.IDataPoint)">
      <summary>
            Get any items in the given <paramref name="collection" /> that match the supplied <paramref name="itemValue" />.
            </summary>
      <param name="collection">The collection to search.</param>
      <param name="itemValue">The item to match.</param>
      <returns>An enumeration of items that match the given value; if there are no matches, returns an empty list.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointCollectionSearch.GetItemsAfterValue(System.Collections.Generic.IEnumerable{Visiblox.Charts.IDataPoint},Visiblox.Charts.IDataPoint)">
      <summary>
            Get any items in the given <paramref name="collection" /> that appear after the supplied <paramref name="itemValue" />.
            </summary>
      <param name="collection">The collection to search.</param>
      <param name="itemValue">The item to match.</param>
      <returns>An enumeration of items that appear after the given value; if there are no matches, returns an empty list.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointCollectionSearch.GetItemsBeforeValue(System.Collections.Generic.IEnumerable{Visiblox.Charts.IDataPoint},Visiblox.Charts.IDataPoint)">
      <summary>
            Get any items in the given <paramref name="collection" /> that appear before the supplied <paramref name="itemValue" />.
            </summary>
      <param name="collection">The collection to search.</param>
      <param name="itemValue">The item to match.</param>
      <returns>An enumeration of items that appear before the given value; if there are no matches, returns an empty list.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointCollectionSearch.GetItemsAfterValueInclusive(System.Collections.Generic.IEnumerable{Visiblox.Charts.IDataPoint},Visiblox.Charts.IDataPoint)">
      <summary>
            Get any items in the given <paramref name="collection" /> that appear after the supplied <paramref name="itemValue" />
            (inclusive of the value).
            </summary>
      <param name="collection">The collection to search.</param>
      <param name="itemValue">The item to match.</param>
      <returns>An enumeration of items that appear after the given value, including any that match the value; if there are no matches, returns an empty list.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointCollectionSearch.GetItemsBeforeValueInclusive(System.Collections.Generic.IEnumerable{Visiblox.Charts.IDataPoint},Visiblox.Charts.IDataPoint)">
      <summary>
            Get any items in the given <paramref name="collection" /> that appear before the supplied <paramref name="itemValue" />
            (inclusive of the value).
            </summary>
      <param name="collection">The collection to search.</param>
      <param name="itemValue">The item to match.</param>
      <returns>An enumeration of items that appear before the given value, including any that match the value; if there are no matches, returns an empty list.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointCollectionSearch.GetItemAfterValue(System.Collections.Generic.IEnumerable{Visiblox.Charts.IDataPoint},Visiblox.Charts.IDataPoint)">
      <summary>
            Get the single item in the given <paramref name="collection" /> that appears after the supplied <paramref name="itemValue" />.
            </summary>
      <param name="collection">The collection to search.</param>
      <param name="itemValue">The item to match.</param>
      <returns>The data point that appears after the given value; null if none exist</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointCollectionSearch.GetItemBeforeValue(System.Collections.Generic.IEnumerable{Visiblox.Charts.IDataPoint},Visiblox.Charts.IDataPoint)">
      <summary>
            Get the single item in the given <paramref name="collection" /> that appears before the supplied <paramref name="itemValue" />.
            </summary>
      <param name="collection">The collection to search.</param>
      <param name="itemValue">The item to match.</param>
      <returns>The data point that appears before the given value; null if none exist.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointCollectionSearch.IndexOfFirstValueGreaterOrEqual(System.Collections.Generic.IEnumerable{Visiblox.Charts.IDataPoint},Visiblox.Charts.IDataPoint,System.Int32,System.Int32)">
      <summary>
            Find the index in the given <paramref name="collection" /> of the first item that either matches or appears after the
            supplied <paramref name="itemValue" />. Search between the <paramref name="start" /> and <paramref name="end" /> points in the
            collection.
            </summary>
      <param name="collection">The collection to search.</param>
      <param name="itemValue">The item to match.</param>
      <param name="start">The index to start searching from.</param>
      <param name="end">The index to search up to.</param>
      <returns>The index of the first found item equal to or greater than the supplied value; 0 if supplied value is before the start; collection.Count is supplied value is after the end.</returns>
    </member>
    <member name="P:Visiblox.Charts.Primitives.DataPointCollectionSearch.Comparison">
      <summary>
            Comparison routine used to sort and search the given collection
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.DataPointComparison">
      <summary>
            A collection of Comparison delegates that can be used on SortedDataSeries.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointComparison.CompareByX">
      <summary>
            Sort based purely on the X value of the IDataPoint.
            </summary>
      <returns>0 if values are deemed equal; -1 if first point is less than second, +1 otherwise.  Nulls are treated as being greater than any X value.  </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointComparison.CompareByY">
      <summary>
            Sort based purely on the Y value of the IDataPoint.
            </summary>
      <returns>0 if values are deemed equal; -1 if first point is less than second, +1 otherwise.  Nulls are treated as being greater than any Y value.  </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointComparison.CompareByZ">
      <summary>
            Sort based purely on the Z value of the IDataPoint3D.
            </summary>
      <returns>0 if values are deemed equal; -1 if first point is less than second, +1 otherwise.  Nulls are treated as being greater than any Z value.  </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointComparison.CompareByXThenY">
      <summary>
            Sort first by X, then, if they are equal, sort by Y.
            </summary>
      <returns>0 if values are deemed equal; -1 if first point is less than second, +1 otherwise.  Nulls are treated as being greater than any value.  </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointComparison.CompareByXThenYThenZ">
      <summary>
            Sort first by X, then, if they are equal, sort by Y, then, if they are equal, sort by Z.
            </summary>
      <returns>0 if values are deemed equal; -1 if first point is less than second, +1 otherwise.  Nulls are treated as being greater than any value.  </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointComparison.CompareByYThenX">
      <summary>
            Sort first by Y, then, if they are equal, sort by X.
            </summary>
      <returns>0 if values are deemed equal; -1 if first point is less than second, +1 otherwise.  Nulls are treated as being greater than any value.  </returns>
    </member>
    <member name="T:Visiblox.Charts.Primitives.DataPointYValuesConverter">
      <summary>
            Gets a named Y value from an <see cref="T:Visiblox.Charts.IDataPoint" /> by indexing it 
            with the given converter parameter.
            </summary>
      <remarks>
            This converter works around the limitation that in Silverlight 3, it is not possible to bind to an 
            expression using an arbitrary indexer, and in Silverlight 4, there are still limitations on indexers
            in binding (must be an int or string, and no multiple indexers allowed). It may be useful to 
            use a DataPointYValuesConverter when binding to a multi-valued data point, such as when defining a tooltip template.
            </remarks>
      <example>
            The following XAML demonstrates the use of a DataPointYValuesConverter to access the High value of a multi-value data point.
            <code source="Help\Charts\IncludedCode\DataPointYValuesExample.xml" lang="XAML" /></example>
      <seealso cref="T:Visiblox.Charts.IDataPoint" />
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointYValuesConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Gets a named Y value from <paramref name="value" /> by indexing it with <paramref name="parameter" />.
            </summary>
      <param name="value">An <see cref="T:Visiblox.Charts.IDataPoint" /> to index.</param>
      <param name="targetType">The target type (ignored).</param>
      <param name="parameter">The key for the Y value.</param>
      <param name="culture">The culture to use for this conversion (ignored).</param>
      <returns>The resulting Y value.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DataPointYValuesConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>See <see cref="T:System.Windows.Data.IValueConverter" />, not implemented.</summary>
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.Primitives.DateTimeConverter">
      <summary>
            A type converter that can convert from a string to a <see cref="T:System.DateTime" /> and vice versa.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
             Determines whether this type converter can convert from a particular source type.
            </summary>
      <param name="context">The type descriptor context.</param>
      <param name="sourceType">The source type.</param>
      <returns>True if this can convert from the source type to a <see cref="T:System.DateTime" /> and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Determines whether this type converter can convert from a <see cref="T:System.DateTime" /> to the destination type.
            </summary>
      <param name="context">The type descriptor context.</param>
      <param name="destinationType">The destination type.</param>
      <returns>True if this can convert from <see cref="T:System.DateTime" /> to string and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
             Converts from a string representation to a <see cref="T:System.DateTime" />.
            </summary>
      <param name="context">The type descriptor context.</param>
      <param name="culture">The culture to use.</param>
      <param name="value">The value to convert.</param>
      <returns>The converted <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
             Converts from a <see cref="T:System.DateTime" /> to the destination type.
            </summary>
      <param name="context">The type descriptor context.</param>
      <param name="culture">The culture to use during conversion.</param>
      <param name="value">The value to convert.</param>
      <param name="destinationType">The destination type to convert to.</param>
      <returns>The converted <paramref name="value" />, e.g. a string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="T:Visiblox.Charts.Primitives.DaysOfWeekConverter">
      <summary>
            Converts a string containing space separated days of the week into a collection of DaysOfWeek enumeration values.
            For example, the string "Saturday Sunday" is converted to the collection containing those two enumeration values.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.DaysOfWeekConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.DaysOfWeekConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.DaysOfWeekConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.DaysOfWeekConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.Primitives.EmptyEnumerator">
      <summary>
            This is an empty implementation of an enumerator which always returns 0 elements.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.EmptyEnumerator.MoveNext">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.EmptyEnumerator.Reset">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.Primitives.EmptyEnumerator.Current">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.Primitives.EnumHelpers">
      <summary>
            Helper class for Enumerations.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.EnumHelpers.CoerceEnum``1(System.Object)">
      <summary>
            Coerces the given value, which can be an integer, string or enum instance
            </summary>
      <remarks>
            Style setters which set enumeration property values may be stored as an integer index, a string or
            an enum instance depending on the platform (WPF / Silverlight WP7 / WP7.1). This method handles
            each of the possible values, coercing to the desired enumeration instance.
            </remarks>
      <typeparam name="TEnumType">The enumeration type</typeparam>
      <param name="value">The value to coerce</param>
      <returns>The coerced value</returns>
    </member>
    <member name="T:Visiblox.Charts.Primitives.IdentityValueConverter">
      <summary>
            A value converter that simply forwards the passed value without performing any conversion.
            </summary>
      <remarks>
            Used to fixed a WPF binding bug.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.Primitives.IdentityValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Returns the passed <paramref name="value" /> without further conversion.
            </summary>
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.IdentityValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Returns the passed <paramref name="value" /> without further conversion.
            </summary>
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.Primitives.IInteractable">
      <summary>
            Defines an element that supports selection and highlighting interactions.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.IInteractable.IsSelected">
      <summary>
            Gets or sets whether the element is selected.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.IInteractable.IsHighlighted">
      <summary>
            Gets or sets whether the element is highlighted.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.IInteractable.IsInteractionEnabled">
      <summary>
            Gets or sets whether interaction with the element is enabled.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.InvalidatableCollectionBase`1">
      <summary>
            An observable collection with the notion of a shadowed collection and invalidation. 
            Does not allow duplicate object references or null values.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:Visiblox.Charts.Primitives.UniqueAndNotNullShadowedObservableCollection`1">
      <summary>
            An observable collection that doesn't allow duplicate or null values to be stored.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.UniqueAndNotNullShadowedObservableCollection`1.ShadowedCollection">
      <summary>
            Shadowed collection of items. Stored to enable correct handling of clear event (the old items aren't 
                passed on when ObservableCollection is cleared).
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.UniqueAndNotNullShadowedObservableCollection`1.InsertItem(System.Int32,`0)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.UniqueAndNotNullShadowedObservableCollection`1.RemoveItem(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.UniqueAndNotNullShadowedObservableCollection`1.SetItem(System.Int32,`0)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.UniqueAndNotNullShadowedObservableCollection`1.ClearItems">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.InvalidatableCollectionBase`1.DoInvalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.InvalidatableCollectionBase`1.Invalidate">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.Primitives.InvalidatableCollectionBase`1.Rendered">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.Primitives.InvalidatableCollectionBase`1.InvalidationEnded">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.Primitives.InvalidationHandler">
      <summary>
            This class deals with the invalidation of <see cref="T:Visiblox.Charts.Primitives.IInvalidatable" /> objects and the en- and de-queuing of invalidation requests.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.InvalidationHandler.RequestInvalidation(Visiblox.Charts.Primitives.IInvalidatable,System.Boolean)">
      <summary>
            Request that the <paramref name="requester" /> is invalidated at the next opportunity - note that this request will not be
            honoured if there is already a request pending for this requester.
            </summary>
      <param name="requester">The object to be invalidated.</param>
      <param name="checkForDuplicates">If true requests from an already queued object will not be requeued, if false they are always
            requeued.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.InvalidationHandler.CancelInvalidationRequest(Visiblox.Charts.Primitives.IInvalidatable)">
      <summary>
            Cancel any pending invalidation requests for <paramref name="toCancel" />.
            </summary>
      <param name="toCancel">The object to have its invalidation request cancelled.</param>
    </member>
    <member name="P:Visiblox.Charts.Primitives.InvalidationHandler.InvalidationsSuspended">
      <summary>
            Determines whether invalidations are suspended.  If set to true, no invalidations will occur until it is set to false again, at which point
            the invalidations will resume and occur at the next opportunity.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.InvalidationHandler.ForceImmediateInvalidate">
      <summary>
            If set to true invalidations will be executed immediately rather than being en-queued for later execution.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.InvalidationHandler.ForceLayoutUpdateBeforeRendered">
      <summary>
            If set to true LayoutUpdate will be invoked on any IInvalidatable which has not been rendered
            immediately after an element had has been invalidated via DoInvalidate.
            </summary>
      <remarks>
            One issue with the concept of deferred invalidation is that it can stall the layout mechanism, in that
            if an invalidation of an IInvalidatable results in an Invalidation of another IInvalidatable instance
            when layout is performed (e.g. a SizeChange is handler resulting in the invalidation of a related element),
            the invalidation of the related IInvalidatable occurs after the next Rendering event. As a result, the visuals
            are briefly rendered in an intermediate state. This property, when set to true, ensures that IInvalidatable instances
            have their layout updated immediately after invalidation until their Rendering property is set to true.
            The Rendering property is set to true on the first Rendering event after their initial invalidation request is made.
            </remarks>
    </member>
    <member name="T:Visiblox.Charts.Primitives.LRUDictionary`2">
      <summary>
            Implementation of Least Recently Used dictionary.
            Note: this class has not been designed to be thread safe.
            The LRUDictionary does not support adding null keys.
            </summary>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LRUDictionary`2.#ctor(System.Int32)">
      <summary>
            Initialises a LRU Dictionary with the given maximum capacity.
            </summary>
      <param name="MaxSize">
      </param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LRUDictionary`2.#ctor">
      <summary>
            Initialises a LRU Dictionary with the default maximum capacity.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LRUDictionary`2.Add(`0,`1)">
      <summary>
            Adds the given key and value.
            </summary>
      <param name="key">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LRUDictionary`2.ContainsKey(`0)">
      <summary>
            Gets whether the dictionary contains the given key.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LRUDictionary`2.Clear">
      <summary>
            Clears the collection
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LRUDictionary`2.Remove(`0)">
      <summary>
            Removes element with given key.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LRUDictionary`2.TryGetValue(`0,`1@)">
      <summary>
            Attempts to get the value of the given key.
            </summary>
      <param name="key">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LRUDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
            Adds a key value pair.
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LRUDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
            Returns whether the dictionary contains the key value pair.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LRUDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>
            Copies to an array.
            </summary>
      <param name="array">
      </param>
      <param name="arrayIndex">
      </param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LRUDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
            Removes key value pair.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.LRUDictionary`2.GetEnumerator">
      <summary>
            Returns enumerator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Visiblox.Charts.Primitives.LRUDictionary`2.Capacity">
      <summary>
            The maximum number of elements to store in the dictionary.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.LRUDictionary`2.Item(`0)">
      <summary>
            Gets value at given index.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Visiblox.Charts.Primitives.LRUDictionary`2.Count">
      <summary>
            Number of elements.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.LRUDictionary`2.Keys">
      <summary>
            Collection of keys.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.LRUDictionary`2.Values">
      <summary>
            List of values.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.LRUDictionary`2.IsReadOnly">
      <summary>
            Whether or not is read only.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.NullableConverter`1">
      <summary>
            Converts a string or base value to a <see cref="T:System.Nullable" /> value.
            </summary>
      <typeparam name="T">The type should be value type.</typeparam>
      <QualityBand>Preview</QualityBand>
    </member>
    <member name="M:Visiblox.Charts.Primitives.NullableConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
      <param name="context">An object that provides a format context.
            </param>
      <param name="sourceType">The type you want to convert from.</param>
      <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.NullableConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
      <param name="context">An object that provides a format context.
            </param>
      <param name="destinationType">The type you want to convert to.
            </param>
      <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.NullableConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts from the specified value to the type of this converter.
            </summary>
      <param name="context">An object that provides a format context.
            </param>
      <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo" /> to use as the 
            current culture.</param>
      <param name="value">The value to convert to the type of this 
            converter.</param>
      <returns>The converted value.</returns>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
    </member>
    <member name="M:Visiblox.Charts.Primitives.NullableConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts from the specified value to the a specified type from the
            type of this converter.
            </summary>
      <param name="context">An object that provides a format context.
            </param>
      <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo" /> to use as the 
            current culture.</param>
      <param name="value">The value to convert to the type of this 
            converter.</param>
      <param name="destinationType">The type of convert the value to
            .</param>
      <returns>The converted value.</returns>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
    </member>
    <member name="T:Visiblox.Charts.Primitives.PixelSnapper">
      <summary>
            A utility class that is responsible for pixel snapping UI elements.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.PixelSnapper.HalfPixelOffset">
      <summary>
            Used to shift one-pixel lines onto half-pixel boundaries to prevent anti-aliasing effects.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PixelSnapper.SnapTickMark(System.Windows.Shapes.Line,System.Windows.Controls.Orientation,Visiblox.Charts.AxisLocation)">
      <summary>
            Pixel Snap a tick mark according to its Orientation.
            </summary>
      <param name="line">The tick mark to pixel snap.</param>
      <param name="orientation">The orientation of the tick mark.</param>
      <param name="location">The location of the axis this tick mark is to be plotted onto.</param>
      <returns>The snapped tick mark.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PixelSnapper.SnapGridLine(System.Windows.Shapes.Line,System.Windows.Controls.Orientation)">
      <summary>
            Pixel Snap a gridline according to its Orientation.
            </summary>
      <param name="line">The gridline to pixel snap.</param>
      <param name="orientation">The orientation of the gridline.</param>
      <returns>The snapped gridline.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PixelSnapper.SnapAxisLine(System.Windows.Shapes.Line,System.Windows.Controls.Orientation)">
      <summary>
            Pixel Snap a axis line according to its Orientation.
            </summary>
      <param name="line">The axis line to pixel snap.</param>
      <param name="orientation">The orientation of the axis line.</param>
      <returns>The snapped axis line.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PixelSnapper.SnapPoint(System.Windows.Point)">
      <summary>
            Pixel Snap a Point.
            </summary>
      <param name="point">The point to pixel snap.</param>
      <returns>The snapped point.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PixelSnapper.SnapLine(System.Windows.Shapes.Line)">
      <summary>
            Pixel Snap a Line.
            </summary>
      <param name="line">The line to pixel snap.</param>
      <returns>The snapped line.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PixelSnapper.SnapValue(System.Double)">
      <summary>
            Pixel Snap a value.
            </summary>
      <param name="value">The value to pixel snap.</param>
      <returns>The snapped value.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PixelSnapper.SnapValueAndClampAboveZero(System.Double)">
      <summary>
            Pixel Snap a value, clamping the returned value to 0 such that it is non-negative.
            </summary>
      <param name="value">The value to pixel snap.</param>
      <returns>The snapped value.</returns>
    </member>
    <member name="T:Visiblox.Charts.Primitives.PointSnapper">
      <summary>
            A utility class that has methods to return the nearest IDataPoint to the point supplied.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PointSnapper.FindClosestPointOnX(Visiblox.Charts.IDataPoint,Visiblox.Charts.IChartSeries,Visiblox.Charts.IAxis,Visiblox.Charts.TrackingSnapPattern)">
      <summary>
            Find the closest point to the mouse in the X direction only; for category axis 
             or series which don't have a searchable data series version, the generic (slow) implementation below is used.
            </summary>
      <param name="targetPoint">Represents the reference point to find points closest to</param>
      <param name="series">The series to search for points.</param>
      <param name="axis">Axis to search on.</param>
      <param name="snapMode">The snap mode to use, either nearest point by data value or screen position.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PointSnapper.FindClosestPointOnXorY(Visiblox.Charts.IDataPoint,Visiblox.Charts.IChartSeries,Visiblox.Charts.Primitives.PointSnapper.PointToRenderPosition,Visiblox.Charts.IAxis,Visiblox.Charts.TrackingSnapPattern,System.Boolean)">
      <summary>
            Find the closest point to the supplied target point in the X or Y direction; for category axis 
             or series which don't have a searchable data series version, the generic (slow) implementation below is used.
            </summary>
      <param name="targetPoint">Represents the reference point to find points closest to</param>
      <param name="series">The series collection to search for points.</param>
      <param name="pointToRenderPosition">Method to retrieve the render position of the x or y coordinate from a point.</param>
      <param name="axis">Axis to search on.</param>
      <param name="snapMode">The snap mode to use, either nearest point by data value or screen position.</param>
      <param name="forceFilter">Force filter (optional).</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PointSnapper.FindClosestPointOnXandY(System.Windows.Point,System.Collections.Generic.IEnumerable{Visiblox.Charts.IChartSeries},Visiblox.Charts.IAxis,Visiblox.Charts.IAxis)">
      <summary>
            Finds the render positions of the closest data point in all of the series in <paramref name="seriesCollection" /> to <paramref name="targetPoint" />.
            </summary>
      <param name="targetPoint">Represents the reference point to find points closest to.</param>
      <param name="seriesCollection">The collection of series to search for points.</param>
      <param name="xAxis">The x axis to find the closest point on.</param>
      <param name="yAxis">The y axis to find the closest point on.</param>
      <returns>A point containing the render positions of the closest data point to <paramref name="targetPoint" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PointSnapper.FindClosestPointOnXandY(System.Windows.Point,System.Collections.Generic.IEnumerable{Visiblox.Charts.IChartSeries},Visiblox.Charts.IAxis,Visiblox.Charts.IAxis,System.Boolean,System.Boolean)">
      <summary>
            Finds the render positions of the closest data point in all of the series in <paramref name="seriesCollection" /> to <paramref name="targetPoint" />.
            </summary>
      <param name="targetPoint">Represents the reference point to find points closest to.</param>
      <param name="seriesCollection">The collection of series to search for points.</param>
      <param name="xAxis">The x axis to find the closest point on.</param>
      <param name="yAxis">The y axis to find the closest point on.</param>
      <param name="ignoreXValues">A bool indicating whether or not to ignore the X values - i.e. Find the point with the closest Y value.</param>
      <param name="ignoreYValues">A bool indicating whether or not to ignore the Y values - i.e. Find the point with the closest X value.</param>
      <returns>A point containing the render positions of the closest data point to <paramref name="targetPoint" />.</returns>
    </member>
    <member name="T:Visiblox.Charts.Primitives.PointSnapper.PointToRenderPosition">
      <summary>
            A delegate which returns the x or y value from an IDataPoint.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.PrintToOutput.FindNamedElement``1(System.Windows.FrameworkElement,System.String)">
      <summary>
            Find an element with the given name within the namescope of the containing element. If the
            element is not found a Debug message is written.
            </summary>
      <typeparam name="T">The type of the element</typeparam>
      <param name="containingElement">The element containing the named element</param>
      <param name="elementName">The name of the element to search for.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Visiblox.Charts.Primitives.RenderPointAdapter">
      <summary>
            Adapts an <see cref="T:Visiblox.Charts.IDataPoint" /> to display coordinates based on the axes of a given series, 
            including the possibility of multiple Y values.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.RenderPointAdapter.#ctor(Visiblox.Charts.IDataPoint,Visiblox.Charts.IChartSeries)">
      <summary>
            Constructs a new RenderPointAdapter instance.
            </summary>
      <param name="dataPoint">Data point to adapt.</param>
      <param name="series">Series to use to get axes for conversion.</param>
    </member>
    <member name="P:Visiblox.Charts.Primitives.RenderPointAdapter.Model">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.Primitives.RenderPointAdapter.X">
      <summary>
            The x coordinate at which to render the point.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.RenderPointAdapter.Y">
      <summary>
            The y coordinate at which to render the point.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.RenderPointAdapter.Item(System.Object)">
      <summary>
            Indexer for multiple Y values in render coordinates.
            </summary>
      <param name="indexer">The key with which to look up the Y value to render.</param>
      <returns>Render coordinate for given Y value.</returns>
    </member>
    <member name="P:Visiblox.Charts.Primitives.RenderPointAdapter.YValueMaximum">
      <summary>
            Gets the maximum of the Y values.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.RenderPointAdapter.YValueMinimum">
      <summary>
            Gets the minimum of the Y values.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.ShapeType">
      <summary>
            An enumeration of shape types to be used for indicating which shape to render, for example, as points on a <see cref="T:Visiblox.Charts.LineSeries" />.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.ShapeType.Ellipse">
      <summary>
            Indicates points should be rendered as circles/ellipses.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.ShapeType.Rectangle">
      <summary>
            Indicates points should be rendered as squares/rectangles.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.ShapeType.Diamond">
      <summary>
            Indicates points should be rendered as diamonds.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.ShapeType.Cross">
      <summary>
            Indicates points should be rendered as crosses.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.ShapeType.Triangle">
      <summary>
            Indicates points should be rendered as triangles.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.ShapeType.Plus">
      <summary>
            Indicates points should be rendered as "+" signs.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.SortableObservableCollection`1">
      <summary>
            Extends ObservableCollection with the SortAscending and SortDescending methods.
            </summary>
      <typeparam name="T">The type of object contained in the collection.</typeparam>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SortableObservableCollection`1.SortAscending">
      <summary>
            Sorts members of the collection and triggers the CollectionChanged event if the order of items is changed.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SortableObservableCollection`1.SortDescending">
      <summary>
            Sorts members of the collection and triggers the CollectionChanged event if the order of items is changed.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.SortedList`1">
      <summary>
            A list of data points, sorted by value according to a supplied comparison method
            </summary>
      <typeparam name="T">The type of the list item</typeparam>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SortedList`1.#ctor(System.Comparison{`0})">
      <summary>
            Constructor
            </summary>
      <param name="comparison">The comparison function</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SortedList`1.#ctor(System.Comparison{`0},System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="comparison">The comparison function</param>
      <param name="capacity">Initial list capacity</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SortedList`1.Add(`0)">
      <summary>
            Adds an entry to the list
            </summary>
      <remarks>Use this method in a loop IF your data is already sorted (performance)</remarks>
      <param name="item">
      </param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SortedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds a collection of items
            </summary>
      <remarks>Use this method if your data is unsorted (performance)</remarks>
      <param name="collection">A collection of data items</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SortedList`1.GetItemsOfValue(`0)">
      <summary>
            Gets a sequence of all the items in the list with value equal to the given value, in ascending order.
            </summary>
      <returns>Sequence of all values.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SortedList`1.GetItemsAfterValueInclusive(`0)">
      <summary>
            Gets a sequence of all the items in the list with value greater than or equal to the given value, in ascending order.
            </summary>
      <returns>Sequence of all values.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SortedList`1.GetItemsBeforeValue(`0)">
      <summary>
            Gets a sequence of all the items in the list with value less than the given value, in descending order.
            </summary>
      <returns>Sequence of all values.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SortedList`1.Remove(`0)">
      <summary>
            Remove an item from the list
            </summary>
      <param name="item">The item to remove</param>
      <remarks>The item must actually be in the list - not just identical by value to an item in the list</remarks>
      <returns>True if the item was removed</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SortedList`1.Contains(`0)">
      <summary>
            Determines whether an item is in the list
            </summary>
      <param name="item">The item to check</param>
      <remarks>The item must actually be in the list - not just identical by value to an item in the list</remarks>
      <returns>True if the item exists in the list</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SortedList`1.GetEnumerator">
      <summary>
            Gets an enumerator for the entire list
            </summary>
      <returns>An enumerator for the entire list</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SortedList`1.Clear">
      <summary>
            Removes all items from the list
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SortedList`1.Sort">
      <summary>
            Signals that the list contents have changed such that resort is required
            </summary>
      <remarks>Note that this method does not sort the list immediately. It's deferred until anyone actually calls public API that gets data from the list</remarks>
    </member>
    <member name="M:Visiblox.Charts.Primitives.SortedList`1.RemoveDuplicates">
      <summary>
            Removes duplicate items from the list.  
            </summary>
      <returns>Returns true if a duplicate was removed, false otherwise.  </returns>
    </member>
    <member name="P:Visiblox.Charts.Primitives.SortedList`1.Count">
      <summary>
            The number of items in the list
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.SortedList`1.Item(System.Int32)">
      <summary>
            Accessor to the item in the index position.
            </summary>
      <param name="index">Index into the sorted list.</param>
      <returns>Item at the index position</returns>
    </member>
    <member name="T:Visiblox.Charts.Primitives.StringToChartSeriesProviderConverter">
      <summary>
            A type converter that converts a string into an <see cref="T:Visiblox.Charts.IChartSeriesProvider" />. For example "LineSeries" is converted into a
            <see cref="T:Visiblox.Charts.DefaultChartSeriesProvider" /> which always returns <see cref="T:Visiblox.Charts.LineSeries" /> instances.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StringToChartSeriesProviderConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.StringToChartSeriesProviderConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.Primitives.StringToColorCollectionConverter">
      <summary>
            Converts a comma-separated of color strings (using either #RRGGBB or #AARRGGBB or the pre-defined colors) to Color instances stored in a ColorCollection instance.  
            If conversion fails that color will be omitted.  If all conversions fail, an empty list is returned.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StringToColorCollectionConverter.#ctor">
      <summary>
            Constructs and new color converter.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StringToColorCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts string to <see cref="T:System.Windows.Media.SolidColorBrush" />.
            </summary>
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.StringToColorCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.StringToColorCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            See <see cref="T:System.Windows.Data.IValueConverter" />, not implemented.
            </summary>
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.Primitives.StringToDataSeriesConverter">
      <summary>
            A type converter that converts a string into an <see cref="T:Visiblox.Charts.DataSeries`2" />.
            </summary>
      <remarks>
        <para>
            The type of the x and y values are determined by the first valid point that is
            parsed. Any points that do not match these types will be ignored.
            </para>
        <para>
            The type of points (DataPoint or MultiValuedDataPoint) are also determined by the first valid point that is
            parsed. Any points that do not match this type will be ignored.
            </para>
        <para>
          <see cref="T:Visiblox.Charts.DataPoint`2" />s should be enclosed in round brackets '(data values)'
            and separated with a comma ','; (point1),(point2),(point3).
            </para>
        <para>
            The X and Y values should be separated by a comma; x,y.
            </para>
        <para>
            For <see cref="T:Visiblox.Charts.MultiValuedDataPoint`2" />s the Y values can be enclosed in square
            brackets '[data values]' and separated by a comma; (x,[y1,y2,y3,y4]).
            </para>
        <para>
          <b>The Characters '(),[]' should not be used as part of a data value.</b>
        </para>
        <para>
            Some valid examples are given below;
            <ul><li>(1,1),(2,2),(3,3)</li><li>(2011-12-01,1),(2011-12-02,2),(2011-12-03,3)</li><li>(Category A,1),(Category B,2),(Category C,3)</li><li>(1,[1,2,3,4]),(2,[2,4,6,8]),(3,[3,6,9,10])</li><li>(Category A,[1,10]),(Category B,[2,20]),(Category C,[3,60])</li></ul></para>
        <para>
            To specify the title of the <see cref="T:Visiblox.Charts.DataSeries`2" /> you should place the title at
            beginning of the string. The title should start with 'title=' and end with a colon ':'.
            There is no requirement to provide a title for a <see cref="T:Visiblox.Charts.DataSeries`2" />. 
            Some valid examples are given below;
            <ul><li>title=Series A:(1,1),(2,2),(3,3)</li><li>title=Product C Sales:(2011-12-01,1),(2011-12-02,2),(2011-12-03,3)</li></ul></para>
        <para>
            If the string to be parsed does not conform the the expected format the class will try to parse
            any valid points it can. For example the data points (10,40), (50,30) and (60,90) will be parsed from
            the string:'(qwe)ert(10,40)(50,30)(0,3,5,7,9)(3,foo)(bar,3),,(60,90)'.
            </para>
      </remarks>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StringToDataSeriesConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.StringToDataSeriesConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.Primitives.StringToSolidColorBrushConverter">
      <summary>
            Converts string to <see cref="T:System.Windows.Media.SolidColorBrush" />. 
            If a <see cref="T:System.Windows.Media.Brush" /> is passed, it does no conversion, just returns it.
            </summary>
      <remarks>
            The conversion only works from string to <see cref="T:System.Windows.Media.SolidColorBrush" />, not the other way round.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StringToSolidColorBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts string to <see cref="T:System.Windows.Media.SolidColorBrush" />.
            </summary>
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.StringToSolidColorBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            See <see cref="T:System.Windows.Data.IValueConverter" />, not implemented.
            </summary>
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.Primitives.StyleBindingBugFixer">
      <summary>
            Fixes bugs that would occur when binding styles in Silverlight 3:
            Clones the style, otherwise style setters would be set to null in Silverlight 3.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StyleBindingBugFixer.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Primitives.StyleBindingBugFixer.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.Primitives.StyleManager">
      <summary>
            Style Manager for resolving of styles for caching.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StyleManager.#ctor(System.Windows.DependencyObject)">
      <summary>
            Create new style manager for the given dependency object.
            </summary>
      <param name="obj">The dependency object that will be using this StyleManager.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StyleManager.CreateShapeStyle(System.Windows.Style,System.Windows.Media.Brush,System.Windows.Media.Brush,System.Double)">
      <summary>
            Creates a style for a Shape type using the passed arguments.
            </summary>
      <param name="style">Style of the point. If null, it will not be applied.</param>
      <param name="fill">Fill of the point. If null, it will not be applied.</param>
      <param name="stroke">Stroke of the point. If null, it will not be applied.</param>
      <param name="strokeThickness">Stroke thickness of the point. If null, it will not be applied.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StyleManager.GetElementState(System.Boolean,System.Boolean)">
      <summary>
            Determine the 'state' of an element.
            </summary>
      <param name="isHighlighted">Indicates if the element is highlighted.</param>
      <param name="isSelected">Indicates is the element is selected.</param>
      <returns>Normal, Highlighted, Selected or SelectedHighlighted state value.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StyleManager.ResolvePropertyValue``1(System.Windows.Style,System.Windows.DependencyProperty)">
      <summary>
            Resolve the appropriate property value for the specified <paramref name="property" /> on this series, considering
            any explicitly set property value as top precedence, followed by a setter in the given <paramref name="style" />
            (generally highlighted or selected style), and last the normal computed value of <paramref name="property" /> on this series
            (i.e. a styled value).
            </summary>
      <typeparam name="T">Type of the property.</typeparam>
      <param name="style">Style whose setters are checked for a property matching <paramref name="property" />.</param>
      <param name="property">Property to resolve the value for.</param>
      <returns>Resolved value as described.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StyleManager.ResolvePropertyValue``1(System.Windows.Style,System.Windows.DependencyProperty,System.Func{System.Object,``0})">
      <summary>
            Resolve the appropriate property value for the specified <paramref name="property" /> on this series, considering
            any explicitly set property value as top precedence, followed by a setter in the given <paramref name="style" />
            (generally highlighted or selected style), and last the normal computed value of <paramref name="property" /> on this series
            (i.e. a styled value).
            </summary>
      <typeparam name="T">Type of the property.</typeparam>
      <param name="style">Style whose setters are checked for a property matching <paramref name="property" />.</param>
      <param name="property">Property to resolve the value for.</param>
      <param name="setterConverter">Function to use to convert a setter value to a resolved value of type <typeparamref name="T" />.</param>
      <returns>Resolved value as described.</returns>
    </member>
    <member name="T:Visiblox.Charts.Primitives.StateSpecificStyle">
      <summary>
            Contains all the styling information a series needs to style its elements based on one of its highlighted/selected states.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StateSpecificStyle.#ctor(Visiblox.Charts.Primitives.StyleDictionary)">
      <summary>
            Constructor.
            </summary>
      <param name="styles">The style dictionary to use for this state's styles.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StateSpecificStyle.#ctor(System.Boolean,System.Double,Visiblox.Charts.Primitives.StyleDictionary)">
      <summary>
            Constructor.
            </summary>
      <param name="centred">Indicates if centering of elements has taken place for this style.  Its use is optional.</param>
      <param name="size">Indicates the size of visual points for this style.  Its use is optional.</param>
      <param name="styles">The style dictionary to use for this state's styles.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StateSpecificStyle.GetElementStyle(System.String)">
      <summary>
            Get the <paramref name="element" /> style.
            </summary>
      <param name="element">The key of the style to retrieve.</param>
      <returns>The style object.</returns>
    </member>
    <member name="P:Visiblox.Charts.Primitives.StateSpecificStyle.StyleCentred">
      <summary>
            Indicates that a RenderTransform has been applied to center any points using this style.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.StateSpecificStyle.PointSize">
      <summary>
            The size of points used in this style.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.StateSpecificStyle.Styles">
      <summary>
            A dictionary of style objects, with an entry for each style type a series needs.  It is recommended not to modify individual
            Styles within the StyleDictionary, preferring instead to replace the entire StyleDictionary with a new instance if required.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.ElementState">
      <summary>
            Possible states of a series' elements.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.ElementState.Normal">
      <summary>
            Unselected, un-highlighted.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.ElementState.Highlighted">
      <summary>
            Unselected, highlighted.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.ElementState.Selected">
      <summary>
            Selected, un-highlighted.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.ElementState.SelectedHighlighted">
      <summary>
            Selected, highlighted.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.StyleDictionary">
      <summary>
            A dictionary type used to store the styles for a given series elements.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.StyleDictionary.PointStyle">
      <summary>
            Point style.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.StyleDictionary.LineStyle">
      <summary>
            Line style.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.StyleDictionary.UpperLineStyle">
      <summary>
            Upper line style.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.StyleDictionary.LowerLineStyle">
      <summary>
            Lower line style.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.StyleDictionary.AreaStyle">
      <summary>
            Area style.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.StyleDictionary.InvertedAreaStyle">
      <summary>
            Inverted area style.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.StyleDictionary.RisingStyle">
      <summary>
            Rising style.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.StyleDictionary.FallingStyle">
      <summary>
            Falling style.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.StyleDictionary.LabelStyle">
      <summary>
            Label style.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.StyleDictionary.UpperLabelStyle">
      <summary>
            Upper label style.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.StyleDictionary.LowerLabelStyle">
      <summary>
            Lower label style.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StyleDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            The Serializable constructor for Dictionary.
            </summary>
      <param name="info">Serialization information object.</param>
      <param name="context">Streaming context object.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StyleDictionary.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.StyleDictionary.RequiresCloning(System.String)">
      <summary>
            Determines whether the style matching the specified key, requires to be cloned before use.
            </summary>
      <param name="key">The key to look up.</param>
      <returns>True if the style needs to be cloned and false otherwise.</returns>
    </member>
    <member name="T:Visiblox.Charts.TrackingSnapPattern">
      <summary>
            Indicates what algorithm should be used to calculate the nearest point(s) on the chart to the cursor.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TrackingSnapPattern.SnapByValue">
      <summary>
            Determine the nearest point by data value
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TrackingSnapPattern.SnapByPosition">
      <summary>
            Determine the nearest point by screen position
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.TransposePanel">
      <summary>
            This panel will transpose its children's width / height measurements if its
            <see cref="P:Visiblox.Charts.Primitives.TransposePanel.Rotate" /> property is set to true.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Primitives.TransposePanel.RotateProperty">
      <summary>
            Identifies the Rotate Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.TransposePanel.MeasureOverride(System.Windows.Size)">
      <summary>
            Returns the maximum size of any of the children, given an available size.
            </summary>
      <param name="availableSize">The available size.</param>
      <returns>The maximum child size.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.TransposePanel.ArrangeOverride(System.Windows.Size)">
      <summary>
             Given a final size, this will arrange the child elements to fit.
            </summary>
      <param name="finalSize">The final size</param>
      <returns>The final size parameter</returns>
    </member>
    <member name="P:Visiblox.Charts.Primitives.TransposePanel.Rotate">
      <summary>
            Indicates whether the panel should transpose the
            widths / height of its child elements.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.TwoWayDictionary`2">
      <summary>
            A class for storing bi-directional links between two objects.
            </summary>
      <remarks>
            The class ensures that two-way association between the linked objects are constantly maintained. In the case that one of the objects
            has altered in such a way that its hash code has changed, <see cref="M:Visiblox.Charts.Primitives.TwoWayDictionary`2.RebuildDictionary" /> should be called before further operations
            are carried out.
            </remarks>
      <typeparam name="T1">Type of the 1st elements.</typeparam>
      <typeparam name="T2">Type of the 2nd elements.</typeparam>
    </member>
    <member name="M:Visiblox.Charts.Primitives.TwoWayDictionary`2.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.TwoWayDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>
            Constructor taking equality comparers to use for both constituent dictionaries.
            </summary>
      <param name="comparer1">Comparer for first type (<typeparamref name="T1" />).</param>
      <param name="comparer2">Comparer for second type (<typeparamref name="T2" />).</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.TwoWayDictionary`2.AddItem(`0,`1)">
      <summary>
            Add these items to both dictionaries.
            </summary>
      <param name="value1">Value 1</param>
      <param name="value2">Value 2</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.TwoWayDictionary`2.RetrieveItem(`0)">
      <summary>
            Retrieve the item with the provided key.
            </summary>
      <param name="key">Item to retrieve.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.TwoWayDictionary`2.RebuildDictionary">
      <summary>
            Rebuilds the dictionaries. Call this after a change to an element's hash code in order to maintain correct operation of the dictionary.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.TwoWayDictionary`2.RetrieveItem(`1)">
      <summary>
            Retrieve the item with the provided key.
            </summary>
      <param name="key">Item to retrieve.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.TwoWayDictionary`2.GetEnumerator">
      <summary>
            Enumerator over the key-value pairs of this TwoWayDictionary.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.TwoWayDictionary`2.UpdateItems(`0,`1)">
      <summary>
            Sets <paramref name="obj1" /> linked to <paramref name="obj2" /> 
            and removes any previous links to other elements from both of them.
            </summary>
      <param name="obj1">Object to be linked with obj2.</param>
      <param name="obj2">Object to be linked with obj1.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.TwoWayDictionary`2.RemoveItem(`0)">
      <summary>
            Removes the associations for the item <paramref name="obj1" />.
            </summary>
      <param name="obj1">Object to be removed.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.TwoWayDictionary`2.RemoveItem(`1)">
      <summary>
            Removes the associations for the item <paramref name="obj2" />.
            </summary>
      <param name="obj2">Object to be removed.</param>
    </member>
    <member name="M:Visiblox.Charts.Primitives.TwoWayDictionary`2.Clear">
      <summary>
            Clear both dictionaries.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.TwoWayDictionary`2.Item(`1)">
      <summary>
            Indexer.
            </summary>
      <param name="index">Value to lookup.</param>
      <returns>Associated value.</returns>
    </member>
    <member name="P:Visiblox.Charts.Primitives.TwoWayDictionary`2.Item(`0)">
      <summary>
            Indexer.
            </summary>
      <param name="index">Value to lookup.</param>
      <returns>Associated value.</returns>
    </member>
    <member name="P:Visiblox.Charts.Primitives.TwoWayDictionary`2.Values1">
      <summary>
            Enumerator over the 1st position values in this TwoWayDictionary.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Primitives.TwoWayDictionary`2.Values2">
      <summary>
            Enumerator over the 2nd position values in this TwoWayDictionary.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Primitives.UIPointConverter">
      <summary>
            Converter to translate an <see cref="T:Visiblox.Charts.IDataPoint" /> containing display positional coordinates to a 
            <see cref="T:System.Windows.Point" /> based upon a specified Y-value index parameter.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Primitives.UIPointConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Convert a display-coordinate <paramref name="value" /> into a <see cref="T:System.Windows.Point" /> 
            based upon a specified Y-value index <paramref name="parameter" />. 
            The returned point consists of the <paramref name="value" /> point's X value and the Y value indicated 
            by <paramref name="parameter" />.
            </summary>
      <param name="value">An <see cref="T:Visiblox.Charts.IDataPoint" /> to be converted.</param>
      <param name="targetType">The target type (should be <see cref="T:System.Windows.Point" />).</param>
      <param name="parameter">Chosen y value key (or Y if null).</param>
      <param name="culture">Culture for the conversion (unused).</param>
      <returns>A Point representing the location of the data point within the plot area.</returns>
    </member>
    <member name="M:Visiblox.Charts.Primitives.UIPointConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            See <see cref="T:System.Windows.Data.IValueConverter" />, not implemented.
            </summary>
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.CategoryRangeWithEffectiveLimits">
      <summary>
            Represent a discrete range consisting of categories, bounded by a a <see cref="P:Visiblox.Charts.IRange.Maximum" />, <see cref="P:Visiblox.Charts.IRange.Minimum" />, 
            <see cref="P:Visiblox.Charts.CategoryRangeWithEffectiveLimits.EffectiveMaximum" /> and <see cref="P:Visiblox.Charts.CategoryRangeWithEffectiveLimits.EffectiveMinimum" /> value, categories defined
                by <see cref="P:Visiblox.Charts.CategoryRange.Categories" />.
            </summary>
      <remarks>
        <para>
            The purpose of this range is to serve as the list of categories on a <see cref="T:Visiblox.Charts.CategoryAxis" />.
            </para>
        <para>
          <see cref="P:Visiblox.Charts.CategoryRange.Minimum" /> and <see cref="P:Visiblox.Charts.CategoryRange.Maximum" /> are defined here to be the index bounds of <see cref="P:Visiblox.Charts.CategoryRange.Categories" /> collection.
            <see cref="P:Visiblox.Charts.CategoryRangeWithEffectiveLimits.EffectiveMinimum" /> and <see cref="P:Visiblox.Charts.CategoryRangeWithEffectiveLimits.EffectiveMaximum" /> however are double values (as these values need to be selected 
            from a continuous value range to fully support the zoom functionality). 
            <see cref="M:Visiblox.Charts.CategoryRangeWithEffectiveLimits.ToContinuousValueRange(System.IComparable)" /> and <see cref="M:Visiblox.Charts.CategoryRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)" /> does the conversion 
            between the discrete categories and the double values.
            </para>
        <para>
            The <see cref="P:Visiblox.Charts.CategoryRange.Maximum" /> and <see cref="P:Visiblox.Charts.CategoryRange.Minimum" /> are always the last or first members of the 
            <see cref="P:Visiblox.Charts.CategoryRange.Categories" /> collection. Setting them will therefore behave differently than in case of 
            continuous ranges: if the value is not yet contained in<see cref="P:Visiblox.Charts.CategoryRange.Categories" />, it will be added to 
            the first/last position appropriately, otherwise the value will not be added and 
            <see cref="P:Visiblox.Charts.CategoryRange.Maximum" /> / <see cref="P:Visiblox.Charts.CategoryRange.Minimum" /> will be left unchanged.
            </para>
        <para>
            Categories can have a sort order of unsorted, ascending or descending, using <see cref="T:Visiblox.Charts.SortOrder" /> 
            and based on the natural ordering of <see cref="P:Visiblox.Charts.CategoryRange.Categories" />’ IComparable members.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.CategoryAxis" />
    </member>
    <member name="T:Visiblox.Charts.CategoryRange">
      <summary>
            Represent a discrete range consisting of categories, bounded by a <see cref="P:Visiblox.Charts.CategoryRange.Maximum" /> and <see cref="P:Visiblox.Charts.CategoryRange.Minimum" />, categories defined
                by <see cref="P:Visiblox.Charts.CategoryRange.Categories" />.
            </summary>
      <remarks>
        <para>
            The purpose of this range is to serve as the list of categories on a <see cref="T:Visiblox.Charts.CategoryAxis" />.
            </para>
        <para>
          <see cref="P:Visiblox.Charts.CategoryRange.Minimum" /> and <see cref="P:Visiblox.Charts.CategoryRange.Maximum" /> are defined here to be the index bounds of <see cref="P:Visiblox.Charts.CategoryRange.Categories" /> collection.
            </para>
        <para>
            The <see cref="P:Visiblox.Charts.CategoryRange.Maximum" /> and <see cref="P:Visiblox.Charts.CategoryRange.Minimum" /> are always the last or first members of the 
            <see cref="P:Visiblox.Charts.CategoryRange.Categories" /> collection. Setting them will therefore behave differently than in case of 
            continuous ranges: if the value is not yet contained in<see cref="P:Visiblox.Charts.CategoryRange.Categories" />, it will be added to 
            the first/last position appropriately, otherwise the value will not be added and 
            <see cref="P:Visiblox.Charts.CategoryRange.Maximum" /> / <see cref="P:Visiblox.Charts.CategoryRange.Minimum" /> will be left unchanged.
            </para>
        <para>
            Categories can have a sort order of unsorted, ascending or descending, using <see cref="P:Visiblox.Charts.CategoryRange.SortOrder" /> 
            and based on the natural ordering of <see cref="P:Visiblox.Charts.CategoryRange.Categories" />’ IComparable members.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.CategoryAxis" />
    </member>
    <member name="M:Visiblox.Charts.CategoryRange.#ctor">
      <summary>
             Default constructor, creating an empty range.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CategoryRange.#ctor(Visiblox.Charts.CategoryRange)">
      <summary>
            Constructs the category range, copying from the given <paramref name="categoryRange" />.
            </summary>
      <param name="categoryRange">The existing category range to construct this range from.</param>
    </member>
    <member name="M:Visiblox.Charts.CategoryRange.GrowAtBeginning(System.IComparable)">
      <summary>
            Expands the category range to include the supplied value at the beginning of the range.
            If it isn't in the list of categories then it will be added, otherwise the range will remain unchanged.
            </summary>
      <param name="value">The value to grow the range by.</param>
    </member>
    <member name="M:Visiblox.Charts.CategoryRange.Grow(System.IComparable)">
      <summary>
            Expands the category range to include the supplied value. 
            If it isn't in the list of categories then it will be added, otherwise the range will remain unchanged.
            </summary>
      <param name="value">The value to grow the range by.</param>
    </member>
    <member name="M:Visiblox.Charts.CategoryRange.GrowByRange(Visiblox.Charts.IRange)">
      <summary>
             Causes the range to expand to include <paramref name="range" />.
            </summary>
      <remarks>After an invocation of GrowByRange, this range will be the union of its previous value and <paramref name="range" />.
            Categories not previously present in this range will be added to the end of the range in the order given by <paramref name="range" />.</remarks>
      <param name="range">The range to grow the range to include.</param>
    </member>
    <member name="M:Visiblox.Charts.CategoryRange.GrowByFactor(System.Double,System.Boolean,System.Boolean)">
      <summary>
            This operation is not supported by the CategoryRange and does nothing.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CategoryRange.Sort">
      <summary>
            Sorts the range members.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CategoryRange.IsValueValid(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CategoryRange.OnPropertyChanged(System.String)">
      <summary>
            Raise the property changed event for this range.
            </summary>
      <param name="propertyName">The name of the property that's changed.</param>
    </member>
    <member name="M:Visiblox.Charts.CategoryRange.Equals(System.Object)">
      <summary>
            Determine if this category range is equal to <paramref name="obj" /> (i.e. <paramref name="obj" /> is a category range containing the same categories).
            </summary>
      <param name="obj">Object to check equality with.</param>
      <returns>Whether <paramref name="obj" /> is a category range equal to this one.</returns>
    </member>
    <member name="M:Visiblox.Charts.CategoryRange.GetHashCode">
      <summary>
            Serves as a hash function for this <see cref="T:Visiblox.Charts.CategoryRange" />.
            </summary>
      <returns>A suitable hash for this object.</returns>
    </member>
    <member name="E:Visiblox.Charts.CategoryRange.PropertyChanged">
      <summary>
            Event implementing <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CategoryRange.Categories">
      <summary>
            Gets or sets the categories in the category range.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CategoryRange.Maximum">
      <summary>
        <para>
             Gets or sets the first value in the list of <see cref="P:Visiblox.Charts.CategoryRange.Categories" />.
             </para>
        <para>
              When set, this grows the categories by the set value. If the value set is already the member of 
              <see cref="P:Visiblox.Charts.CategoryRange.Categories" />, nothing will happen.
             </para>
      </summary>
    </member>
    <member name="P:Visiblox.Charts.CategoryRange.Minimum">
      <summary>
        <para>
             Gets or sets the first value in the list of <see cref="P:Visiblox.Charts.CategoryRange.Categories" />.
             </para>
        <para>
              When set, this grows the categories by the set value. If the value set is already the member of 
              <see cref="P:Visiblox.Charts.CategoryRange.Categories" />, nothing will happen.
             </para>
      </summary>
    </member>
    <member name="P:Visiblox.Charts.CategoryRange.IsValid">
      <summary>
             Returns true if the range is valid and can be used.
             A category range is considered valid if it has at least one category defined.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CategoryRange.SortOrder">
      <summary>
            Gets or sets whether the category items should be sorted according to their CompareTo method.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IRangeWithEffectiveLimits`1">
      <summary>
            Defines a range of values bounded by a <see cref="P:Visiblox.Charts.IRange.Maximum" /> and <see cref="P:Visiblox.Charts.IRange.Minimum" />. 
            <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits`1.EffectiveMaximum" /> and <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits`1.EffectiveMinimum" /> values are used to define the range with zoom applied.
            </summary>
      <remarks>This is a more strongly typed version of the non-generic <see cref="T:Visiblox.Charts.IRangeWithEffectiveLimits" /> interface.</remarks>
      <typeparam name="T">The type of the values within this range.</typeparam>
    </member>
    <member name="T:Visiblox.Charts.IRangeWithEffectiveLimits">
      <summary>
            Defines a range of values bounded by a <see cref="P:Visiblox.Charts.IRange.Maximum" /> and <see cref="P:Visiblox.Charts.IRange.Minimum" />. 
            <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMaximum" /> and <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMinimum" /> values are used to define the range with zoom applied.
            </summary>
      <remarks>
        <para>
            Defines a range used by <see cref="T:Visiblox.Charts.IAxis" /> to define its <see cref="P:Visiblox.Charts.IAxis.ActualRange" />.
            <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMaximum" /> and <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMinimum" /> give the maximum and minimum data values within the range
            with the range applied.
            </para>
        <para>
          <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMaximum" /> and <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMinimum" /> define an additional window within
                the boundaries representing the zoom on a continuous range.
            </para>
        <para>
            The value range of ranges can be continuous or discrete.
                <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMaximum" /> and <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMinimum" /> represent the zoom within the continuous range.
                <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMaximum" /> and <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMinimum" /> represent the zoom within the discrete range and are converted from
                the <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMaximum" /> and <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMinimum" /> using <see cref="M:Visiblox.Charts.IRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)" />.
                Since zooming happens on a continuous scale, we need a value which is in a continuous scale, for ease of use a discrete version of this value
                is also supplied.
             Other values can be mapped from continuous to discrete and vice versa in the <see cref="M:Visiblox.Charts.IRangeWithEffectiveLimits.ToContinuousValueRange(System.IComparable)" /> and <see cref="M:Visiblox.Charts.IRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)" /> methods.
            </para>
        <para>
            For continuous ranges these methods (<see cref="M:Visiblox.Charts.IRangeWithEffectiveLimits.ToContinuousValueRange(System.IComparable)" /> and <see cref="M:Visiblox.Charts.IRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)" />) do not contain extra 
                logic as this conversion only has to be done for discrete ranges.
            </para>
      </remarks>
    </member>
    <member name="M:Visiblox.Charts.IRangeWithEffectiveLimits.SetContinuousRange(System.IComparable,System.IComparable)">
      <summary>
            Sets the applied continuous minimum/maximum for the range which will be retrieved via <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMinimum" /> 
            and <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMaximum" />. Set together to ensure these are updated "atomically" in the sense that 
            no property change event will be fired when the effective range is in an interim invalid state.
            </summary>
      <param name="minimum">Range minimum</param>
      <param name="maximum">Range maximum</param>
    </member>
    <member name="M:Visiblox.Charts.IRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)">
      <summary>
            Maps <paramref name="continuousValue" /> (which value is from a continuous value range) to the value range of the range itself, which includes:
            <see cref="P:Visiblox.Charts.IRange.Minimum" />, <see cref="P:Visiblox.Charts.IRange.Maximum" />, <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMinimum" /> and <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMaximum" />.
            For discrete ranges this means mapping the continuous value range used by to the discrete value range of the range itself.
            For continuous ranges no such conversion is needed - the continuous value can act as a discrete value and vice versa.
            </summary>
      <param name="continuousValue">A value in the continuous value range.</param>
    </member>
    <member name="M:Visiblox.Charts.IRangeWithEffectiveLimits.ToContinuousValueRange(System.IComparable)">
      <summary>
            Maps <paramref name="discreteValue" /> (which value is from the value range of the range itself) to the continuous value
            range used, which includes: <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMinimum" /> and <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMaximum" />. 
            For discrete ranges this means mapping the discrete value range of the range itself to the continuous value range. 
            For continuous ranges no such conversion is needed - the discrete value can act as a continuous value and vice versa.
            </summary>
      <param name="discreteValue">A value in the discrete value range.</param>
    </member>
    <member name="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMaximum">
      <summary>
            Gets or sets the applied maximum for the range.
            This value will be in the discrete range - i.e. a data value. See documentation for implementation notes.
            </summary>
      <remarks>
            This value should either use <see cref="M:Visiblox.Charts.IRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)" /> in its getter or be privately set using <see cref="M:Visiblox.Charts.IRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)" /> 
            in <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMinimum" />. <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMinimum" /> is also responsible for firing a property changed
            event for this property if binding is required.
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.IRangeWithEffectiveLimits.EffectiveMinimum">
      <summary>
            Gets or sets the applied minimum for the range.
            This value will be in the discrete range - i.e. a data value. See documentation for implementation notes.
            </summary>
      <remarks>
            This value should either use <see cref="M:Visiblox.Charts.IRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)" /> in its getter or be privately set using <see cref="M:Visiblox.Charts.IRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)" /> 
            in <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMinimum" />. <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMinimum" /> is also responsible for firing a property changed
            event for this property if binding is required.
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMaximum">
      <summary>
            Gets or sets the applied continuous maximum for the range.
            Its value must always be on a continuous value range, even in the range itself is discrete.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRangeWithEffectiveLimits.ContinuousEffectiveMinimum">
      <summary>
            Gets or sets the applied continuous minimum for the range.
            Its value must always be on a continuous value range, even in the range itself is discrete.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IRangeWithEffectiveLimits`1.SetContinuousRange(`0,`0)">
      <summary>
            Sets the applied continuous minimum/maximum for the range which will be retrieved via <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits`1.ContinuousEffectiveMinimum" /> 
            and <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits`1.ContinuousEffectiveMaximum" />. Set together to ensure these are updated "atomically" in the sense that 
            no property change event will be fired when the effective range is in an interim invalid state.
            </summary>
      <param name="minimum">Range minimum</param>
      <param name="maximum">Range maximum</param>
    </member>
    <member name="P:Visiblox.Charts.IRangeWithEffectiveLimits`1.EffectiveMaximum">
      <summary>
            Gets or sets the applied maximum for the range.
            This value will be in the discrete range - i.e. a data value. See documentation for implementation notes.
            </summary>
      <remarks>
            This value should either use <see cref="M:Visiblox.Charts.IRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)" /> in its getter or be privately set using 
            <see cref="M:Visiblox.Charts.IRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)" /> in <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits`1.ContinuousEffectiveMaximum" />. <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits`1.ContinuousEffectiveMaximum" /> 
            is also responsible for firing a property changed event for this property if binding is required.
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.IRangeWithEffectiveLimits`1.EffectiveMinimum">
      <summary>
            Gets the applied minimum for the range.
            This value will be in the discrete range - i.e. a data value. See documentation for implementation notes.
            </summary>
      <remarks>
            This value should either use <see cref="M:Visiblox.Charts.IRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)" /> in its getter or be privately set using 
            <see cref="M:Visiblox.Charts.IRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)" />  in <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits`1.ContinuousEffectiveMinimum" />. <see cref="P:Visiblox.Charts.IRangeWithEffectiveLimits`1.ContinuousEffectiveMinimum" /> 
            is also responsible for firing a property changed event for this property if binding is required.
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.IRangeWithEffectiveLimits`1.ContinuousEffectiveMaximum">
      <summary>
            Gets the applied continuous maximum for the range.
            Its value must always be on a continuous value range, even if the range itself is discrete.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRangeWithEffectiveLimits`1.ContinuousEffectiveMinimum">
      <summary>
            Gets the applied continuous minimum for the range.
            Its value must always be on a continuous value range, even if the range itself is discrete.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CategoryRangeWithEffectiveLimits.SetContinuousRange(System.IComparable,System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CategoryRangeWithEffectiveLimits.#ctor">
      <summary>
             Default constructor, creating an empty range.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CategoryRangeWithEffectiveLimits.#ctor(Visiblox.Charts.CategoryRange)">
      <summary>
            Constructs the category range, copying from the given <paramref name="categoryRange" />.
            </summary>
      <param name="categoryRange">The existing category range to construct this range from.</param>
    </member>
    <member name="M:Visiblox.Charts.CategoryRangeWithEffectiveLimits.Equals(System.Object)">
      <summary>
            Determine if this category range is equal to <paramref name="obj" /> (i.e. <paramref name="obj" /> is a category range containing the same categories).
            </summary>
      <param name="obj">Object to check equality with.</param>
      <returns>Whether <paramref name="obj" /> is a category range equal to this one.</returns>
    </member>
    <member name="M:Visiblox.Charts.CategoryRangeWithEffectiveLimits.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CategoryRangeWithEffectiveLimits.ToContinuousValueRange(System.IComparable)">
      <summary>
            Maps <paramref name="discreteValue" />, which is a value within <see cref="P:Visiblox.Charts.CategoryRange.Categories" />
            to a double value.
            </summary>
      <param name="discreteValue">The value in the discrete space to map into the continuous space.</param>
      <returns>The continuous range value corresponding to the specified discrete range value.</returns>
    </member>
    <member name="M:Visiblox.Charts.CategoryRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)">
      <summary>
            Maps the double value <paramref name="continuousValue" /> to a value in <see cref="P:Visiblox.Charts.CategoryRange.Categories" />.
            </summary>
      <param name="continuousValue">The continuous range value to map into the discrete space.</param>
      <returns>The discrete value corresponding to the specified continuous range value.</returns>
    </member>
    <member name="P:Visiblox.Charts.CategoryRangeWithEffectiveLimits.EffectiveMaximum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.CategoryRangeWithEffectiveLimits.EffectiveMinimum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.CategoryRangeWithEffectiveLimits.ContinuousEffectiveMaximum">
      <summary>
             Gets or sets the applied continuous maximum for the range. This is a double value (as it needs to have a 
                continuous value range). This value is continuously being re-calculated by the axis, thus setting
                it externally is not recommended as it will have no effect.
            </summary>
      <remarks>
            The type of EffectiveMaximum used by this range is a double. Mapping is done by assigning 1.0 length to
                all categories and mapping the double value to the closest category. E.g. EffectiveMaximum set to 0.6 would
                mean it's mapped to the 2nd category (as [-0.5,0.5) is mapped to the 1st category and [0.5, 1.5) is mapped
                to the 2nd category).
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.CategoryRangeWithEffectiveLimits.ContinuousEffectiveMinimum">
      <summary>
             Gets or sets the applied continuous minimum for the range. This is a double value (as it needs to have a 
                continuous value range). This value is continuously being re-calculated by the axis, thus setting
                it externally is not recommended as it will have no effect.
            </summary>
      <remarks>
            The type of EffectiveMinimum used by this range is a double. Mapping is done by assigning 1.0 length to
                all categories and mapping the double value to the closest category. E.g. EffectiveMinimum set to 0.6 would
                mean it's mapped to the 2nd category (as [-0.5,0.5) is mapped to the 1st category and [0.5, 1.5) is mapped
                to the 2nd category).
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.CategoryRangeWithEffectiveLimits.IsValid">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.DateTimeRangeWithEffectiveLimits">
      <summary>
            Represents a range of DateTimes bounded by a <see cref="P:Visiblox.Charts.IRange.Minimum" /> and <see cref="P:Visiblox.Charts.IRange.Maximum" /> value.  This class is also
            aware of the effective range based on the chart's current zoom.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DateTimeRange">
      <summary>
            Represents a range of DateTimes bounded by a <see cref="P:Visiblox.Charts.DateTimeRange.Minimum" /> and <see cref="P:Visiblox.Charts.DateTimeRange.Maximum" /> value.
            </summary>
      <seealso cref="T:Visiblox.Charts.RangeBase`1" />
    </member>
    <member name="M:Visiblox.Charts.DateTimeRange.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DateTimeRange.#ctor(System.DateTime,System.DateTime)">
      <summary>
            Constructs a <see cref="T:Visiblox.Charts.DateTimeRange" /> with the given <paramref name="minimum" /> and <paramref name="maximum" /> values.
            </summary>
      <param name="minimum">The minimum <see cref="T:System.DateTime" /> in the range.</param>
      <param name="maximum">The maximum <see cref="T:System.DateTime" /> in the range.</param>
    </member>
    <member name="M:Visiblox.Charts.DateTimeRange.GrowByFactor(System.Double,System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DateTimeRange.Maximum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DateTimeRange.Minimum">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DateTimeRangeWithEffectiveLimits.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DateTimeRangeWithEffectiveLimits.#ctor(System.DateTime,System.DateTime)">
      <summary>
            Constructs a <see cref="T:Visiblox.Charts.DateTimeRange" /> with the given <paramref name="minimum" /> and <paramref name="maximum" /> values.
            </summary>
      <param name="minimum">The minimum <see cref="T:System.DateTime" /> in the range.</param>
      <param name="maximum">The maximum <see cref="T:System.DateTime" /> in the range.</param>
    </member>
    <member name="M:Visiblox.Charts.DateTimeRangeWithEffectiveLimits.SetContinuousRange(System.DateTime,System.DateTime)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DateTimeRangeWithEffectiveLimits.ToContinuousValueRange(System.DateTime)">
      <summary>
            Because the value range is continuous, this method contains no logic.
            It just returns the value without conversion (as it is already is selected from a continuous value range).
            </summary>
      <param name="discreteValue">The input value.</param>
      <returns>The continuous range value.  This will always be equal to the <paramref name="discreteValue" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeRangeWithEffectiveLimits.ToDiscreteValueRange(System.DateTime)">
      <summary>
            Because the value range is continuous, this method contains no logic.
            It returns the value without conversion (as the value range of the range itself is continuous, not discrete).
            </summary>
      <param name="continuousValue">The input value.</param>
      <returns>The discrete range value.  This will always be equal to the <paramref name="continuousValue" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeRangeWithEffectiveLimits.GrowByFactor(System.Double,System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DateTimeRangeWithEffectiveLimits.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /><paramref name="obj" /> is equal to this <see cref="T:Visiblox.Charts.DateTimeRangeWithEffectiveLimits" /> 
            (is a range deriving from <see cref="T:Visiblox.Charts.DateTimeRangeWithEffectiveLimits" /> whose <see cref="P:Visiblox.Charts.IRange.Maximum" /> and <see cref="P:Visiblox.Charts.IRange.Minimum" /> are equal to this range, 
            and both ranges have the same value of <see cref="P:Visiblox.Charts.IRange.IsValid" />).
            </summary>
      <remarks>Does not check that effective minimum and maximum are equal, this would have negative performance implications on the chart:
            it should be assumed that if both ranges have their effective min/max recalculated, they would be equal if the ranges are equal.</remarks>
      <param name="obj">The object to test for range equality.</param>
      <returns>True if <paramref name="obj" /> is equal to this range and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeRangeWithEffectiveLimits.GetHashCode">
      <summary>
            Serves as a hash function for this <see cref="T:Visiblox.Charts.DateTimeRangeWithEffectiveLimits" />.
            </summary>
      <returns>A suitable hash for this object.</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeRangeWithEffectiveLimits.ToContinuousValueRange(System.IComparable)">
      <summary>
            Because the value range is continuous, this method contains no logic.
            It just returns the value without conversion (as it is already is selected from a continuous value range).
            </summary>
      <param name="discreteValue">The input value.</param>
      <returns>The continuous range value.  This will always be equal to the <paramref name="discreteValue" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.DateTimeRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)">
      <summary>
            Because the value range is continuous, this method contains no logic.
            It returns the value without conversion (as the value range of the range itself is continuous, not discrete).
            </summary>
      <param name="continuousValue">The input value.</param>
      <returns>The discrete range value.  This will always be equal to the <paramref name="continuousValue" />.</returns>
    </member>
    <member name="P:Visiblox.Charts.DateTimeRangeWithEffectiveLimits.EffectiveMaximum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DateTimeRangeWithEffectiveLimits.EffectiveMinimum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DateTimeRangeWithEffectiveLimits.ContinuousEffectiveMaximum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DateTimeRangeWithEffectiveLimits.ContinuousEffectiveMinimum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DateTimeRangeWithEffectiveLimits.IsValid">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.DoubleRangeWithEffectiveLimits">
      <summary>
            Represents a range of doubles bounded by a <see cref="P:Visiblox.Charts.RangeBase`1.Minimum" /> 
            and <see cref="P:Visiblox.Charts.RangeBase`1.Maximum" /> value.
            </summary>
      <seealso cref="T:Visiblox.Charts.IRangeWithEffectiveLimits`1" />
      <seealso cref="T:Visiblox.Charts.DoubleRange" />
    </member>
    <member name="T:Visiblox.Charts.DoubleRange">
      <summary>
            Represents a range of doubles bounded by a <see cref="P:Visiblox.Charts.RangeBase`1.Minimum" /> 
            and <see cref="P:Visiblox.Charts.RangeBase`1.Maximum" /> value.
            </summary>
      <seealso cref="T:Visiblox.Charts.RangeBase`1" />
    </member>
    <member name="M:Visiblox.Charts.DoubleRange.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DoubleRange.#ctor(System.Double,System.Double)">
      <summary>
            Creates a range with the given values.
            </summary>
      <param name="min">The range minimum.</param>
      <param name="max">The range maximum.</param>
    </member>
    <member name="M:Visiblox.Charts.DoubleRange.GrowByFactor(System.Double,System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DoubleRange.IntersectsWith(Visiblox.Charts.DoubleRange)">
      <summary>
            Calculates whether this range intersects with <paramref name="range" />.
            </summary>
      <param name="range">The range to calculate intersection with.</param>
      <returns>True if this range intersects with <paramref name="range" /> and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.DoubleRange.IsValueValid(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DoubleRangeWithEffectiveLimits.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DoubleRangeWithEffectiveLimits.#ctor(System.Double,System.Double)">
      <summary>
            Creates a range with the given values.
            </summary>
      <param name="min">The range minimum.</param>
      <param name="max">The range maximum.</param>
    </member>
    <member name="M:Visiblox.Charts.DoubleRangeWithEffectiveLimits.GrowByFactor(System.Double,System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DoubleRangeWithEffectiveLimits.SetContinuousRange(System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DoubleRangeWithEffectiveLimits.ToContinuousValueRange(System.Double)">
      <summary>
            Because the value range is continuous, this method contains no logic.
            It just returns the value without conversion (as it is already is selected from a continuous value range).
            </summary>
      <param name="discreteValue">The input value.</param>
      <returns>The unmodified input value.</returns>
    </member>
    <member name="M:Visiblox.Charts.DoubleRangeWithEffectiveLimits.ToDiscreteValueRange(System.Double)">
      <summary>
            Because the value range is continuous, this method contains no logic.
            It returns the value without conversion (as the value range of the range itself is continuous, not discrete).
            </summary>
      <param name="continuousValue">The input value.</param>
      <returns>The unmodified input value.</returns>
    </member>
    <member name="M:Visiblox.Charts.DoubleRangeWithEffectiveLimits.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /><paramref name="obj" /> is equal to this <see cref="T:Visiblox.Charts.DoubleRangeWithEffectiveLimits" /> 
            (is a range deriving from <see cref="T:Visiblox.Charts.DoubleRangeWithEffectiveLimits" /> whose <see cref="P:Visiblox.Charts.IRange.Maximum" /> and <see cref="P:Visiblox.Charts.IRange.Minimum" /> are equal to this range, 
            and both ranges have the same value of <see cref="P:Visiblox.Charts.IRange.IsValid" />).
            </summary>
      <remarks>Does not check that effective minimum and maximum are equal, this would have negative performance implications on the chart:
            it should be assumed that if both ranges have their effective min/max recalculated, they would be equal if the ranges are equal.</remarks>
      <param name="obj">The object to test for range equality.</param>
      <returns>True if <paramref name="obj" />is equal to this range and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.DoubleRangeWithEffectiveLimits.GetHashCode">
      <summary>
            Serves as a hash function for this <see cref="T:Visiblox.Charts.IRangeWithEffectiveLimits`1" />.
            </summary>
      <returns>A suitable hash for this object.</returns>
    </member>
    <member name="M:Visiblox.Charts.DoubleRangeWithEffectiveLimits.ToContinuousValueRange(System.IComparable)">
      <summary>
            Because the value range is continuous, this method contains no logic.
            It just returns the value without conversion (as it is already is selected from a continuous value range).
            </summary>
      <param name="discreteValue">The input value.</param>
      <returns>The unmodified input value.</returns>
    </member>
    <member name="M:Visiblox.Charts.DoubleRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)">
      <summary>
            Because the value range is continuous, this method contains no logic.
            It returns the value without conversion (as the value range of the range itself is continuous, not discrete).
            </summary>
      <param name="continuousValue">The input value.</param>
      <returns>The unmodified input value.</returns>
    </member>
    <member name="P:Visiblox.Charts.DoubleRangeWithEffectiveLimits.EffectiveMaximum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DoubleRangeWithEffectiveLimits.EffectiveMinimum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DoubleRangeWithEffectiveLimits.ContinuousEffectiveMaximum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DoubleRangeWithEffectiveLimits.ContinuousEffectiveMinimum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DoubleRangeWithEffectiveLimits.IsValid">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.RangeWithEffectiveLimitsBase`1">
      <summary>
            A base class to be used when creating a new IRangeWithEffectiveLimits. This is only required when implementing a new IAxis where 
            none of the offered IRangeWithEffectiveLimits implementations are applicable.
            </summary>
      <typeparam name="T">The type of the values within this range.</typeparam>
      <seealso cref="T:Visiblox.Charts.CategoryRangeWithEffectiveLimits" />
      <seealso cref="T:Visiblox.Charts.DateTimeRangeWithEffectiveLimits" />
      <seealso cref="T:Visiblox.Charts.DoubleRangeWithEffectiveLimits" />
    </member>
    <member name="M:Visiblox.Charts.RangeWithEffectiveLimitsBase`1.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RangeWithEffectiveLimitsBase`1.#ctor(`0,`0)">
      <summary>
            Constructs a range with the passed <paramref name="minimum" /> and <paramref name="maximum" />.
            </summary>
      <param name="minimum">Minimum value of range.</param>
      <param name="maximum">Maximum value of range.</param>
    </member>
    <member name="M:Visiblox.Charts.RangeWithEffectiveLimitsBase`1.SetContinuousRange(`0,`0)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RangeWithEffectiveLimitsBase`1.ToDiscreteValueRange(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RangeWithEffectiveLimitsBase`1.ToContinuousValueRange(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RangeWithEffectiveLimitsBase`1.EffectiveMaximum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RangeWithEffectiveLimitsBase`1.EffectiveMinimum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RangeWithEffectiveLimitsBase`1.ContinuousEffectiveMaximum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RangeWithEffectiveLimitsBase`1.ContinuousEffectiveMinimum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RangeWithEffectiveLimitsBase`1.IsValid">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.PieChart">
      <summary>
            Represents a pie chart. A PieChart has one DataSeries (which must be a DataSeries{IComparable, double}), a Title and a Legend. PieCharts are made up
            of a number of <see cref="T:Visiblox.Charts.PiePiece" />s.
            </summary>
      <remarks>
        <para>
            The <see cref="P:Visiblox.Charts.PieChart.DataSeries" /> must be of type DataSeries{IComparable, double}, this is because a percentage must be calculated for each <see cref="T:Visiblox.Charts.PiePiece" /> 
            of the PieChart. It is only offered as <see cref="T:Visiblox.Charts.IDataSeries" /> to support binding. 
            </para>
        <para>
            Customizing the look of the PieChart can be done either by supplying a new <see cref="T:Visiblox.Charts.Palette" /> or by specifying a completely new template for the pie pieces against 
            <see cref="P:Visiblox.Charts.PieChart.PiePieceTemplate" />. When setting a palette, that will contain a list of styles which will be cycled through for each pie piece created. 
            The Palette allows for a list of styles to be created (with target type of <see cref="T:Visiblox.Charts.PiePiece" />), specifying <see cref="P:Visiblox.Charts.PiePiece.Fill" />, 
            <see cref="P:Visiblox.Charts.PiePiece.Stroke" /> and <see cref="P:Visiblox.Charts.PiePiece.StrokeThickness" />. It is also possible to set these properties for
            <see cref="P:Visiblox.Charts.PiePiece.HighlightedStyle" /> and <see cref="P:Visiblox.Charts.PiePiece.SelectedStyle" />.  If using the template approach
            the template must contain a Grid named LayoutRoot and a Path named PiePiecePath.  The Data and the RenderTransform properties 
            for the PiePiecePath will be set by the render mechanism to render the correct shape with the correct rotation.
            </para>
      </remarks>
    </member>
    <member name="F:Visiblox.Charts.PieChart.SelectedEvent">
      <summary>
            The RoutedEvent to be raised when selection happens
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PieChart.PalettePropertyChanged">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.PieChart.#ctor">
      <summary>
            Default Constructor
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PieChart.DisposeInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.PieChart.OnApplyTemplateInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.PieChart.InvalidateInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.PieChart.AddToolTip(Visiblox.Charts.PiePiece,Visiblox.Charts.IDataPoint)">
      <summary>
            Adds a tooltip to the given PiePiece (if tooltips are enabled).
            </summary>
      <remarks>If tooltips are disabled, AddToolTip ensures the given element does not have a tooltip.</remarks>
      <param name="piece">The pie piece to add a tooltip to.</param>
      <param name="point">The data point to provide as the DataContext of the <see cref="P:Visiblox.Charts.PieChart.ToolTipTemplate" />. 
            If the point is a BindableDataPoint, it's DataContext will be used.</param>
    </member>
    <member name="M:Visiblox.Charts.PieChart.UpdateLegend">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.PieChart.PlotAreaSizeChanged(System.Windows.SizeChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.PieChart.DataSeriesProperty">
      <summary>
            Identifies the DataSeries Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.HighlightingEnabledProperty">
      <summary>
            Identifies the HighlightingEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.IsExplodingProperty">
      <summary>
            Identifies the IsExploding Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.AnimationEnabledProperty">
      <summary>
            Identifies the AnimationEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.AnimationDurationProperty">
      <summary>
            Identifies the AnimationDuration Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.ShowLabelsProperty">
      <summary>
            Identifies the ShowLabels Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.LabelStyleProperty">
      <summary>
            Identifies the LabelStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.SelectionModeProperty">
      <summary>
            Identifies the SelectionMode Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.SelectedItemProperty">
      <summary>
            Identifies the SelectedItem Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.SelectedItemsProperty">
      <summary>
            Identifies the SelectedItems Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.PiePieceTemplateProperty">
      <summary>
            Identifies the PiePieceTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.ToolTipEnabledProperty">
      <summary>
            Identifies the ToolTipEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.ToolTipTemplateProperty">
      <summary>
            Identifies the ToolTipTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.ToolTipPositionProperty">
      <summary>
            Identifies the ToolTipPosition Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.ToolTipStyleProperty">
      <summary>
            Identifies the ToolTipStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.LegendPositionProperty">
      <summary>
            Identifies the LegendPosition Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.BevelDepthProperty">
      <summary>
            Identifies the BevelDepth Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChart.PiePieceFillRatioProperty">
      <summary>
            Identifies the PiePieceFillRatio Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.ValidationKey">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.PieChart.DataSeriesCollectionChanged">
      <summary>
            Occurs when the DataSeries collection changes, or a point within the collection
            raises a PropertyChanged event.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.PieChart.SelectionChanged">
      <summary>
            Selected pie pieces changed.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.DefaultPaletteKey">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.PieChart.DataSeries">
      <summary>
            Gets or sets the DataSeries for this Chart. This must be a DataSeries{IComparable, double}, IDataSeries is offered for binding purposes only. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.HighlightingEnabled">
      <summary>
            Gets or sets whether highlighting of the chart is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.IsExploding">
      <summary>
            Gets or sets whether the highlight mode is Exploding. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.AnimationEnabled">
      <summary>
            Gets or sets whether animation is enabled when exploding pieces. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.AnimationDuration">
      <summary>
            Gets or sets the duration of the exploding animation in seconds. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.ShowLabels">
      <summary>
            Gets or set whether the pie piece labels are visible. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.LabelStyle">
      <summary>
            Gets or sets the style used for the label. This should have a TargetType of TextBlock. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.SelectionMode">
      <summary>
            Gets or sets the selection mode of the chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.SelectedItem">
      <summary>
            Gets or sets the selected item. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.SelectedItems">
      <summary>
            Gets or sets the selected items. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.PiePieceTemplate">
      <summary>
            Gets or sets the ControlTemplate to apply to the individual pie pieces.  The template should have a TargetType of PiePiece. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.ToolTipEnabled">
      <summary>
            Gets or sets whether to display tooltips on data points. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.ToolTipTemplate">
      <summary>
            Gets or sets the control template for data point tooltips. The control template should have a TargetType of ToolTip. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.ToolTipPosition">
      <summary>
            Gets or sets the placement mode of the tooltips. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.ToolTipStyle">
      <summary>
            Gets or sets the style used to display data point tooltips. The Style should have a TargetType of ToolTip. See <see cref="T:Visiblox.Charts.ChartSeriesBase" /> for an example. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.LegendPosition">
      <summary>
            Gets or sets the position of the legend. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.BevelDepth">
      <summary>
            Gets or sets the depth of the bevel to apply. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PieChart.PiePieceFillRatio">
      <summary>
            Gets or sets the ratio (between 0 and 1) of the radius to fill with the segments.  E.g. a 1 will create a pie chart, a 0.5 will create a donut/ring chart with the rings half the width of the chart's total radius. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.PieChartSelectionMode">
      <summary>
            Defines supported selection modes for <see cref="T:Visiblox.Charts.PieChart" />.
            </summary>
      <seealso cref="T:Visiblox.Charts.PieChart" />
    </member>
    <member name="F:Visiblox.Charts.PieChartSelectionMode.None">
      <summary>
            Chart does not allow any form of selection.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChartSelectionMode.Single">
      <summary>
            Chart allows selection of a single  pie piece.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PieChartSelectionMode.Multiple">
      <summary>
            Chart allows selection of a multiple pie pieces.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.PiePiece">
      <summary>
            A PiePiece which represents a slice of a <see cref="T:Visiblox.Charts.PieChart" />. The PiePiece has a notion of it's <see cref="P:Visiblox.Charts.PiePiece.DataPoint" /> and 
            it's <see cref="P:Visiblox.Charts.PiePiece.Element" /> which it uses to render.
            </summary>
      <remarks>
            Currently the only way to change the colour of the PiePieces within the <see cref="T:Visiblox.Charts.PieChart" /> is to use the <see cref="P:Visiblox.Charts.ChartBase.Palette" />. This is
            because the list of Pie Pieces is not available through the public API.
            </remarks>
      <remarks>
            The notion of interaction is offered for individual pieces as well as the entire chart through <see cref="P:Visiblox.Charts.PieChart.HighlightingEnabled" /> and
            <see cref="P:Visiblox.Charts.PieChart.SelectionMode" />. When hovered over, the <see cref="P:Visiblox.Charts.PiePiece.HighlightedStyle" /> will be applied to this piece and
            <see cref="P:Visiblox.Charts.PiePiece.IsHighlighted" /> will be set to true. When clicked on, the <see cref="P:Visiblox.Charts.PiePiece.SelectedStyle" /> will be applied to this piece and 
            <see cref="P:Visiblox.Charts.PiePiece.IsSelected" /> will be set to true.
            </remarks>
      <remarks>
        <see cref="P:Visiblox.Charts.PiePiece.LegendItemStyle" /> and <see cref="P:Visiblox.Charts.PiePiece.LegendItemTemplate" /> are offered to allow for easy manipulation of the pie piece representation within
            the <see cref="T:Visiblox.Charts.PieChart" />.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.PiePiece.SetNormalStyle">
      <summary>
            Set normal style.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PiePiece.SetSelectedStyle">
      <summary>
            Set selected style.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PiePiece.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PiePiece.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.PiePiece.Invalidate">
      <summary>
            Sends a request to the InvalidationHandler to be invalidated
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PiePiece.DoInvalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.PiePiece.GetLegendItems">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.PiePiece.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.PercentProperty">
      <summary>
            Identifies the Percent Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.RotationAngleProperty">
      <summary>
            Identifies the RotationAngle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.StrokeProperty">
      <summary>
            Identifies the Stroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.StrokeThicknessProperty">
      <summary>
            Identifies the StrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.FillProperty">
      <summary>
            Identifies the Fill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.NormalStyleProperty">
      <summary>
            Identifies the NormalStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.SelectedStyleProperty">
      <summary>
            Identifies the SelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.HighlightedStyleProperty">
      <summary>
            Identifies the HighlightedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.IsSelectedProperty">
      <summary>
            Identifies the IsSelected Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.IsHighlightedProperty">
      <summary>
            Identifies the IsHighlighted Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.HighlightingEnabledProperty">
      <summary>
            Identifies the HighlightingEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.LegendItemStyleProperty">
      <summary>
            Identifies the LegendItemStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.LegendItemTemplateProperty">
      <summary>
            Identifies the LegendItemTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.IsExplodingProperty">
      <summary>
            Identifies the IsExploding Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.AnimationEnabledProperty">
      <summary>
            Identifies the AnimationEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.AnimationDurationProperty">
      <summary>
            Identifies the AnimationDuration Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.ExplodePercentProperty">
      <summary>
            Identifies the ExplodePercent Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.ShowLabelsProperty">
      <summary>
            Identifies the ShowLabels Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.LabelStyleProperty">
      <summary>
            Identifies the LabelStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.PiePiece.BevelDepthProperty">
      <summary>
            Identifies the BevelDepth Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PiePiece.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.PiePiece.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.Rendered">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.PiePiece.InvalidationEnded">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.PiePiece.LegendItemsChanged">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.PiePiece.Element">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.PiePiece.DataPoint">
      <summary>
            Gets the DataPoint associated with this Pie Piece. This is set by the PieChart when it is created.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.Percent">
      <summary>
            Gets or sets the percentage value this PiePiece represents. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.RotationAngle">
      <summary>
            Gets or sets the amount to rotate the PiePiece by so that it fits in the correct 'slot' in the pie. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.Stroke">
      <summary>
            Gets or sets the brush used to draw around the PiePiece. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.StrokeThickness">
      <summary>
            Gets or sets the thickness of the brush used to draw around the PiePiece. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.Fill">
      <summary>
            Gets or sets the brush used to fill the area of the PiePiece. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.NormalStyle">
      <summary>
            Gets or sets the style used to create the PiePiece. Use this setter to set the style of the chart instead of the Style property on <see cref="T:System.Windows.FrameworkElement" /> objects. This should have a TargetType of FrameworkElement. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.SelectedStyle">
      <summary>
            Gets or sets the style applied to the PiePiece when it's selected. This style is combined with <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" /> when rendering the series.  Properties defined in this style take precedence over the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" /> during that merge. This should have a TargetType of FrameworkElement. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.HighlightedStyle">
      <summary>
            Gets or sets the style applied to the PiePiece when it's highlighted. This style is merged with <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" /> and, if selected, the <see cref="P:Visiblox.Charts.PiePiece.SelectedStyle" /> when rendering the series in a selected state.  Properties defined in this style take precedence over the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" /> and <see cref="P:Visiblox.Charts.PiePiece.SelectedStyle" /> during that merge. This should have a TargetType of FrameworkElement. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.IsSelected">
      <summary>Gets or sets whether the series is selected.</summary>
      <remarks>This value can only be true if selection is enabled on the series, that is <see cref="T:Visiblox.Charts.SelectionMode" /> is set to <see cref="F:Visiblox.Charts.SelectionMode.Series" />.Generally clicking on the series will select it, if it is selectable, but this property can also be manipulated programmatically.</remarks>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.IsHighlighted">
      <summary>Gets or sets whether the series is highlighted.</summary>
      <remarks> This value can only be true if highlighting is enabled on the series, that is <see cref="P:Visiblox.Charts.PiePiece.HighlightingEnabled" /> set to true. This property can be manipulated programmatically.</remarks>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.HighlightingEnabled">
      <summary>
            Gets or sets whether highlighting of the series is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.LegendItemStyle">
      <summary>
            Gets or sets LegendItemStyle. This property is used to style the legend item belonging to this series. The Style should have a TargetType of LegendItem. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.LegendItemTemplate">
      <summary>
            Gets or sets LegendItemTemplate. This property defines the template of the legend item belonging to this series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.IsExploding">
      <summary>
            Gets or sets whether the highlight mode is Exploding. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.AnimationEnabled">
      <summary>
            Gets or sets whether animation is enabled when exploding pieces. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.AnimationDuration">
      <summary>
            Gets or sets the duration of the exploding animation in seconds. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.ExplodePercent">
      <summary>
            Gets or sets the percentage of the radius used to move pieces on interaction. A value of 1 represents 100%. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.ShowLabels">
      <summary>
            Gets or set whether the pie piece label is visible. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.LabelStyle">
      <summary>
            Gets or sets the style used for the label. This should have a TargetType of TextBlock. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PiePiece.BevelDepth">
      <summary>
            Gets or sets the depth of the bevel to apply. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.PiePiece.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BandSeries">
      <summary>
            Represents a band series where each point has a higher and lower value.
            </summary>
      <remarks>
        <para>
            A band series by default consists of a straight line connecting all higher values in the series and a straight
            line connecting all lower values in the series. An area is present between these lines which may be styled. 
            </para>
        <para>
            When the lines cross, an InvertedAreaStyle is used to represent the inversion. When they re-cross, the normal AreaStyle
            is used again. By default the area fill is not visible, but can be enabled using the ShowArea property.
            </para>
      </remarks>
    </member>
    <member name="T:Visiblox.Charts.ChartSingleSeriesBase">
      <summary>
            ChartSeriesBase is an specialisation of <see cref="T:Visiblox.Charts.ChartSeriesCommonBase" />, to define a singular chart series.
            </summary>
      <remarks>
        <para>
            Selection is supported on a singular chart series. The <see cref="P:Visiblox.Charts.ChartSingleSeriesBase.SelectionMode" /> dependency property identifies the different
            selection modes available - such as selection of an entire series, a data point or multiple points.
            As such, the <see cref="P:Visiblox.Charts.ChartSingleSeriesBase.SelectedItem" />, <see cref="P:Visiblox.Charts.ChartSingleSeriesBase.SelectedItems" /> and <see cref="P:Visiblox.Charts.ChartSingleSeriesBase.IsSelected" /> properties provide access to
            the selection state.
            Highlighting is also supported, with the <see cref="P:Visiblox.Charts.ChartSingleSeriesBase.IsHighlighted" /> property identifying if the series is highlighted.
            The <see cref="P:Visiblox.Charts.ChartSingleSeriesBase.SelectedStyle" /> and <see cref="P:Visiblox.Charts.ChartSingleSeriesBase.HighlightedStyle" /> dependency properties allow for the selected and highlighted
            states to be styled.
            </para>
        <para>
            ChartSeriesBase is responsible for overriding the default <see cref="P:Visiblox.Charts.ChartSingleSeriesBase.XRange" /> and <see cref="P:Visiblox.Charts.ChartSingleSeriesBase.YRange" /> calculations, and instead
            will return ranges based upon the values in the <see cref="T:Visiblox.Charts.IDataSeries" /> held by this chart series.
            </para>
        <para>
            In order to implement a new singular series type, it is advised to extend this class, rather than the parent
            <see cref="T:Visiblox.Charts.ChartSeriesCommonBase" /> as this class provides common singular-series functionality that would
            otherwise have to be implemented on each series; such as selection.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.LineSeries" />
      <seealso cref="T:Visiblox.Charts.BarSeries" />
      <seealso cref="T:Visiblox.Charts.ColumnSeries" />
    </member>
    <member name="T:Visiblox.Charts.ChartSeriesBase">
      <summary>
            Represents the base class for <see cref="T:Visiblox.Charts.IChartSeries" /> implementations, defining common behaviour held for 
            all Cartesian chart series.
            </summary>
      <remarks>
        <para>A series is associated with a pair of axes against which the data is plotted, represented by its <see cref="P:Visiblox.Charts.ChartSeriesBase.XAxis" /> and
            <see cref="P:Visiblox.Charts.ChartSeriesBase.YAxis" /> properties (although in most cases these do not have to be set explicitly).</para>
        <para>It is advised to inherit one of the two specialised versions of this class. For defining a singular series, consider inheriting
            from <see cref="T:Visiblox.Charts.ChartSingleSeriesBase" />. For defining a multiple series, consider inheriting from <see cref="T:Visiblox.Charts.ChartMultipleSeriesBase" />.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.LineSeries" />
      <seealso cref="T:Visiblox.Charts.BarSeries" />
      <seealso cref="T:Visiblox.Charts.ColumnSeries" />
      <seealso cref="T:Visiblox.Charts.IChartSeries" />
      <seealso cref="T:Visiblox.Charts.ChartSingleSeriesBase" />
      <seealso cref="T:Visiblox.Charts.ChartMultipleSeriesBase" />
    </member>
    <member name="T:Visiblox.Charts.ChartSeriesCommonBase">
      <summary>
            Represents the base class for <see cref="T:Visiblox.Charts.IChartSeriesCommon" /> implementations, 
            defining common behaviour held for all Visiblox Charts series types.
            
            </summary>
      <remarks>
        <para>
            This class is responsible for providing properties relating to styling and basic handling of the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.DataSeries" /> of the series.
            </para>
        <para>
            A class inheriting from ChartSeriesCommonBase represents a particular type of series which is drawn on a 
            <see cref="T:Visiblox.Charts.ChartBase" /> subclass.
            A chart series defines how data is presented on the chart; the data to display is given by its <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.DataSeries" /> property.
            </para>
        <para>ToolTip support is implemented in this class, and can be enabled via the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.ToolTipEnabled" /> property.
            Each series defines a default tooltip format, but tooltips can also be customised as described in the example below.</para>
        <para>Styling: to style a series, do this by either setting its style specific properties or by setting <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" />.
            Using the Style property to style the series is not advised, use NormalStyle instead.</para>
        <para>A trackball can be added to a series by adding a <see cref="T:Visiblox.Charts.TrackballBehaviour" /> to the chart. 
            ChartSeriesBase supports the trackball implementation by providing templating and styling support for trackballs, with a suitable
            default defined for each series, again see the example below.</para>
        <para>
            By default, no range calculations are performed at this level - and calls to <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.XRange" /> and <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.YRange" /> at this
            level in the hierarchy will return null. Instead, concrete range calculations are performed by specialised classes like
            <see cref="T:Visiblox.Charts.ChartSingleSeriesBase" />, and <see cref="T:Visiblox.Charts.ChartMultipleSeriesBase" />.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.IChartSeriesCommon" />
      <seealso cref="T:Visiblox.Charts.ChartSeriesBase" />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.AreKeyPropertiesNull">
      <summary>
            Identify if the key rendering properties are null.
            </summary>
      <returns>True if any key properties are null and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.ClearSelectedItems">
      <summary>
            Clear any selected items.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.Init">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.InitInternalBase">
      <summary>
            Override to implement custom initialization behaviour.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.DeInitInternalBase">
      <summary>
            Override to implement custom de-initialization.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.Invalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.DoInvalidate">
      <inheritdoc />
      <remarks>
            For implementers of series, this method checks that a number of key
            properties are non-null, clears the canvas, then invokes <see cref="M:Visiblox.Charts.ChartSingleSeriesBase.InvalidateInternal" />.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.UpdateChartSeriesAwareDataSeries">
      <summary>
            Update the DataSeries if it is ChartSeriesAware.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.RefreshBaseAxisValuesUsed">
      <summary>
            Update cached base axis values if this is an <see cref="T:Visiblox.Charts.IStackableChartSeries" /></summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.GetPointRenderPosition(Visiblox.Charts.IDataPoint)">
      <summary>
            Returns the physical render coordinates of the logical point <paramref name="dataPoint" />.
            </summary>
      <param name="dataPoint">The data point to get the render position of.</param>
      <returns>The render coordinates of <paramref name="dataPoint" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.IsPointRenderable(Visiblox.Charts.IDataPoint,Visiblox.Charts.IAxis,Visiblox.Charts.IAxis)">
      <summary>
            Checks that given axis ranges - if Min == Max declare the point un-renderable for drawing purposes.
            </summary>
      <param name="dataPoint">The data point for which to check whether it is renderable.</param>
      <param name="xAxis">The x axis the point will be plotted against.</param>
      <param name="yAxis">The y axis the point will be plotted against.</param>
      <returns>True if the point is renderable and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.IsPointRenderable(Visiblox.Charts.IDataPoint)">
      <summary>
            Returns whether the point can be rendered on the canvas.
            </summary>
      <remarks>This method should generally be used in preference to direct computation, 
            as the result is cached. Override <see cref="M:Visiblox.Charts.ChartSeriesCommonBase.IsPointRenderableInternal(Visiblox.Charts.IDataPoint)" /> to define what it is
            for a point to be renderable.</remarks>
      <param name="dataPoint">Data point to test.</param>
      <returns>Whether the point can be rendered.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.IsRenderPointValid(System.Windows.Point)">
      <summary>
            Checks that <paramref name="renderPoint" /> is non-null and that
            its X and Y values aren't NaNs.  
            </summary>
      <param name="renderPoint">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.IsDataSeriesValid">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.GetFirstOrDefault">
      <summary>
            Convenience method for retrieving the first element of the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.DataSeries" /> or null if the data series is not
            instantiated or contains no elements.
            </summary>
      <returns>The first element in the data series or null if not possible.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.GetLegendItems">
      <summary>
            Gets the items to display in the legend for this series.
            </summary>
      <returns>The enumeration of legend items associated with this series.  Must never return null.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.InvalidateBase">
      <summary>
            Invalidation functionality for further base classes.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.Highlight">
      <summary>
            Highlight the series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.ClearCanvas">
      <summary>
            Invoked when the series has been rendered but then is no longer to be rendered: this method should clear
            off the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.RootZoomCanvas" /> and any internal data structures which may be invalid.
            </summary>
      <remarks>This base implementation simply clears the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.RootZoomCanvas" /> and the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.DataPoints" /> structure.</remarks>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.ResubscribeToPropertyChangeRelay(Visiblox.Charts.IDataSeries,Visiblox.Charts.IDataSeries)">
      <summary>
            Re-subscribe to PropertyChangedRelay event.
            </summary>
      <param name="oldDataSeries">The old series from which to unsubscribe handlers.</param>
      <param name="newDataSeries">The new series to subscribe handlers to.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.ResubscribeToCollectionChanged(Visiblox.Charts.IDataSeries,Visiblox.Charts.IDataSeries)">
      <summary>
            Re-subscribe to collectionChanged event.
            </summary>
      <param name="oldDataSeries">The old series from which to unsubscribe handlers.</param>
      <param name="newDataSeries">The new series to subscribe handlers to.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.UpdateDataSeriesWithRanges">
      <summary>
            For series which store their data ranges this method is invoked when these ranges need to be updated.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.UpdateDataPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.IDataPoint,System.Int32)">
      <summary>
            Called when a data point has been updated (either by being replaced by a new data point, or changed in value).
            </summary>
      <remarks>This default implementation simply calls <see cref="M:Visiblox.Charts.ChartSeriesCommonBase.Invalidate" />.</remarks>
      <param name="oldPoint">The original data point. In case that a property has been updated, this is <paramref name="newPoint" />.</param>
      <param name="newPoint">The updated data point. In case that a property has been updated, this is <paramref name="oldPoint" />.</param>
      <param name="index">The index of the data point.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.RemoveDataPoint(Visiblox.Charts.IDataPoint,System.Int32)">
      <summary>
            Called when a data point is removed from the data series and should be removed from the display.
            </summary>
      <remarks>This default implementation simply calls <see cref="M:Visiblox.Charts.ChartSeriesCommonBase.Invalidate" />.</remarks>
      <param name="point">Point which was removed.</param>
      <param name="index">Original index of the point.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.AddDataPoint(Visiblox.Charts.IDataPoint,System.Int32)">
      <summary>
            Called when a data point is added to the data series and should be displayed.
            </summary>
      <remarks>This default implementation simply calls <see cref="M:Visiblox.Charts.ChartSeriesCommonBase.Invalidate" />.</remarks>
      <param name="point">Point which was added.</param>
      <param name="index">Index of the point.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.MergeWith(System.Windows.Style)">
      <summary>
            Provides the ability to merge the provided style with a custom series style.  In some cases this may not 
            have any effect.
            </summary>
      <param name="style">The style to merge.</param>
      <returns>The result of the merge.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.GetStyle">
      <summary>
            Get the appropriate style to apply given the series' current selection state.
            </summary>
      <returns>The style to apply.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.GetElementState(System.Boolean,System.Boolean)">
      <summary>
            Get the element state to use when styling.
            </summary>
      <param name="isHighlighted">True if the state should consider the series highlighted.</param>
      <param name="isSelected">True if the state should consider the series selected.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.OnStyleUpdated">
      <summary>Called when the style of the series has been updated. The <see cref="T:System.Windows.Style" /> of the series will be
            appropriate to the current series selection mode when this method is called.
            </summary>
      <remarks>The series may wish to cache computed styles at this point, for example to handle highlighting.</remarks>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.CreateShapeStyle(System.Windows.Style,System.Windows.Media.Brush,System.Windows.Media.Brush,System.Double)">
      <summary>
            Creates a style for a Shape type using the passed arguments.
            </summary>
      <param name="style">Style of the point. If null, it will not be applied.</param>
      <param name="fill">Fill of the point. If null, it will not be applied.</param>
      <param name="stroke">Stroke of the point. If null, it will not be applied.</param>
      <param name="strokeThickness">"&gt;Stroke thickness of the point. If null, it will not be applied.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.ConvertValueToBrush(System.Object)">
      <summary>
            Helper method which converts the value passed to a brush using <see cref="T:Visiblox.Charts.Primitives.StringToSolidColorBrushConverter" /></summary>
      <param name="value">Value to convert to a brush via the converter.</param>
      <returns>A <see cref="T:System.Windows.Media.SolidColorBrush" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.OnDataSeriesCollectionChanged(System.EventArgs)">
      <summary>
            Raises the DataSeriesCollectionChanged event.
            </summary>
      <param name="e">The change event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.OnLegendItemsChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Visiblox.Charts.ChartSeriesCommonBase.LegendItemsChanged" /> event.
            </summary>
      <param name="e">The change event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.AddToolTip(System.Windows.UIElement,Visiblox.Charts.IDataPoint)">
      <summary>
            Adds a tooltip to the given UI element (if tooltips are enabled).
            </summary>
      <remarks>If tooltips are disabled, AddToolTip ensures the given element does not have a tooltip.</remarks>
      <param name="element">The UI element to add a tooltip to.</param>
      <param name="point">The data point to provide as the DataContext of the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.ToolTipTemplate" />. 
            If the point is a BindableDataPoint, its DataContext will be used.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.IsPointRenderableInternal(Visiblox.Charts.IDataPoint)">
      <summary>
            Returns whether the point can be rendered on the canvas.
            </summary>
      <param name="dataPoint">The data point for which to check whether it is renderable.</param>
      <returns>True if the data point is renderable for this type of series and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.SelectBaseAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.SelectPerpendicularAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.RemoveSelectedItem(Visiblox.Charts.IDataPoint)">
      <summary>
            Remove a selected point from the chart.
            </summary>
      <param name="point">The point to remove.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.RemoveSelectedItems">
      <summary>
            Remove any selected items.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.RemoveOldSelectedPoints">
      <summary>
            Remove any old selected points from the chart.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.SetDpStylesOnStyle(System.Windows.Style)">
      <summary>
            Sets NormalStyle on <paramref name="style" />
                if it is not already set.
            </summary>
      <param name="style">The style on which to set NormalStyle.</param>
      <returns>The updated style with NormalStyle set.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.GetOrAddDataLabels(Visiblox.Charts.IDataPoint)">
      <inheritdoc cref="M:Visiblox.Charts.IDataLabelAware.GetOrAddDataLabels(Visiblox.Charts.IDataPoint)" />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.SetLabelRenderTransform(Visiblox.Charts.DataLabel,System.Windows.Media.TranslateTransform)">
      <summary>
            Set the render transform for <paramref name="label" /> to be <paramref name="translation" />.
            </summary>
      <param name="label">Data label</param>
      <param name="translation">Translate transform</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.GetLabelRenderTransform(Visiblox.Charts.DataLabel)">
      <summary>
            Get render transform for <paramref name="label" /></summary>
      <param name="label">Data label</param>
      <returns>Render transform</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.InitializeDataLabels(Visiblox.Charts.IDataPoint)">
      <inheritdoc cref="M:Visiblox.Charts.IDataLabelAware.InitializeDataLabels(Visiblox.Charts.IDataPoint)" />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.GetDataLabels">
      <inheritdoc cref="M:Visiblox.Charts.IDataLabelAware.GetDataLabels" />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.AddDataLabelToRootZoomCanvas(Visiblox.Charts.IDataPoint)">
      <inheritdoc cref="M:Visiblox.Charts.IDataLabelAware.AddDataLabelToRootZoomCanvas(Visiblox.Charts.IDataPoint)" />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.LayoutDataLabel(Visiblox.Charts.IDataPoint)">
      <inheritdoc cref="M:Visiblox.Charts.IDataLabelAware.LayoutDataLabel(Visiblox.Charts.IDataPoint)" />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.HandleCollidingDataLabels(Visiblox.Charts.IAxisCommon,Visiblox.Charts.IAxisCommon,Visiblox.Charts.IDataPoint,System.Double)">
      <summary>
            If the label being added would collide with existing labels or the edge of the plot area then attempt to move the label to somewhere else sensible.  
            Collapses the label if all repositioning attempts fail.  
            </summary>
      <param name="xAxis">The x axis against which data is being plotted.</param>
      <param name="yAxis">The y axis against which data is being plotted.</param>
      <param name="dataPoint">The data point for which label collision needs to be handled.</param>
      <param name="labelDistance">The distance from the actual data point at which the label is to be rendered.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.DataLabelColliding(Visiblox.Charts.IAxisCommon,Visiblox.Charts.IAxisCommon,Visiblox.Charts.IDataPoint)">
      <summary>
            Performs tests to see if the labels for the given dataPoint are in collision and need to be moved.
            </summary>
      <param name="xAxis">The x axis against which data is being plotted.</param>
      <param name="yAxis">The y axis against which data is being plotted.</param>
      <param name="dataPoint">The data point for which label collision needs to be detected.</param>
      <returns>True if data labels are colliding and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.DataLabelsForSameDataPointAreColliding(Visiblox.Charts.IDataPoint)">
      <summary>
            Determines for a dataPoint whether the labels are colliding.
            </summary>
      <param name="dataPoint">The data point for which to check label collision.</param>
      <returns>True if data labels are colliding and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.DataLabelsForVisiblePointAreNotFullyOnPlotArea(Visiblox.Charts.IAxisCommon,Visiblox.Charts.IAxisCommon,Visiblox.Charts.IDataPoint)">
      <summary>
            Determines if the dataPoint is on the plot area but one of the edges of the index-th label associated with it is off the plot area
            </summary>
      <param name="xAxis">The x axis against which data is being plotted.</param>
      <param name="yAxis">The y axis against which data is being plotted.</param>
      <param name="dataPoint">The data point for which label partial rendering needs to be detected.</param>
      <returns>True if the labels are partially off the chart area and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.DataLabelsAreCollidingWithPreviousDataLabels(Visiblox.Charts.IDataPoint)">
      <summary>
            Determines if the index-th label associated with dataPoint is in collision with an labels prior to it in 
            terms of SortedDataSeries order.  
            </summary>
      <param name="dataPoint">The data point for which label collision needs to be detected.</param>
      <returns>True if data labels are colliding and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.DataLabelsAreInCollision(Visiblox.Charts.DataLabel,Visiblox.Charts.DataLabel)">
      <summary>
            Checks to see if the two given labels overlap each other in any way.
            </summary>
      <param name="labelA">The first label to check.</param>
      <param name="labelB">The second label to check.</param>
      <returns>True if the two specified labels collide and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.GetLabelEdge(Visiblox.Charts.DataLabel,Visiblox.Charts.DataLabelPosition)">
      <summary>
            Provides the distance between the left or top edge of the ZoomCanvas and one of the edges of the label, 
            taking into account ZoomCanvas.ElementPosition, any transforms in the that series itself 
            has applied and the dimensions of the label itself (if required).  
            </summary>
      <param name="label">The label to get the edge distance for.</param>
      <param name="side">The side of the label we're interested in.</param>
      <returns>The distance between the left or top edge of the ZoomCanvas and one of the edges of the label.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.RenderDataLabels">
      <summary>
            Re-renders all labels.  Re-uses existing labels or creates new ones if they don't exist.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.DeleteDataLabels">
      <summary>
            Removes all data labels from the series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.RefreshSingleDataPoint(Visiblox.Charts.IDataPoint)">
      <summary>
            Perform an update on the given data point, computing its index in the DataSeries.
            </summary>
      <param name="point">The point to refresh.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.ComputeMinimumDistanceBetweenPoints">
      <summary>
            Determine the minimum distance between points on the X axis.
            </summary>
      <returns>The computed distance.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.ResolvePropertyValue``1(System.Windows.Style,System.Windows.DependencyProperty,System.Func{System.Object,``0})">
      <summary>
            Resolve the appropriate property value for the specified <paramref name="property" /> on this series, considering
            any explicitly set property value as top precedence, followed by a setter in the given <paramref name="seriesStyle" />
            (generally highlighted or selected style), and last the normal computed value of <paramref name="property" /> on this series
            (ie a styled value).
            </summary>
      <typeparam name="T">Type of the property.</typeparam>
      <param name="seriesStyle">Style whose setters are checked for a property matching <paramref name="property" />.</param>
      <param name="property">Property to resolve the value for.</param>
      <param name="setterConverter">Function to use to convert a setter value to a resolved value of type <typeparamref name="T" />.</param>
      <returns>Resolved value as described.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.ResolvePropertyValue``1(System.Windows.Style,System.Windows.DependencyProperty)">
      <summary>
            Resolve the appropriate property value for the specified <paramref name="property" /> on this series, considering
            any explicitly set property value as top precedence, followed by a setter in the given <paramref name="seriesStyle" />
            (generally highlighted or selected style), and last the normal computed value of <paramref name="property" /> on this series
            (ie a styled value).
            </summary>
      <typeparam name="T">Type of the property.</typeparam>
      <param name="seriesStyle">Style whose setters are checked for a property matching <paramref name="property" />.</param>
      <param name="property">Property to resolve the value for.</param>
      <returns>Resolved value as described.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.CalculateSuggestedPointWidth">
      <summary>
            Calculates the suggested point width. This is 80% of the minimum distance between two points.
            </summary>
      <returns>The suggested point width to use.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesCommonBase.DataSeriesProperty">
      <summary>
            Identifies the DataSeries Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesCommonBase.LegendItemStyleProperty">
      <summary>
            Identifies the LegendItemStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesCommonBase.LegendItemTemplateProperty">
      <summary>
            Identifies the LegendItemTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesCommonBase.ToolTipEnabledProperty">
      <summary>
            Identifies the ToolTipEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesCommonBase.ToolTipTemplateProperty">
      <summary>
            Identifies the ToolTipTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesCommonBase.ToolTipPositionProperty">
      <summary>
            Identifies the ToolTipPosition Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesCommonBase.ToolTipStyleProperty">
      <summary>
            Identifies the ToolTipStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesCommonBase.TrackballTemplateProperty">
      <summary>
            Identifies the TrackballTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesCommonBase.TrackballStyleProperty">
      <summary>
            Identifies the TrackballStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesCommonBase.NormalStyleProperty">
      <summary>
            Identifies the NormalStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesCommonBase.IsDisplayedOnLegendProperty">
      <summary>
            Identifies the IsDisplayedOnLegend Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesCommonBase.OffsetProviderProperty">
      <summary>
            Identifies the OffsetProvider Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesCommonBase.LabelMaxWidthProperty">
      <summary>
            Identifies the LabelMaxWidth Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesCommonBase.ZoomPendingProperty">
      <summary>
            Identifies the ZoomPending Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesCommonBase.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.ChartSeriesCommonBase.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.RootZoomCanvas">
      <summary>
            Gets the canvas which is the root element of the series.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.SelectablePoints">
      <summary>
            Collection for managing the association between logical data points and the physical elements which represent their interactable area.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.Discontinuities">
      <summary>
            Data structure for compactly recording all regions of the DataSeries that are non-renderable because of any discontinuous axis it is being rendered on.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.LabelsPerDataPoint">
      <summary>
            The number of labels per data point - typically 1 but 2 for e.g. BandSeries.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.DataPoints">
      <summary>
            Collection for managing the association between logical data points and the physical elements which represent them.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.InvalidateRequestPending">
      <summary>
            Determines whether there is currently an invalidate request pending for this series instance.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.ChartSeriesCommonBase.DataSeriesChanged">
      <summary>
            An event fired when the DataSeries property changes.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.ChartSeriesCommonBase.InvalidationEnded">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.Rendered">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.XRange">
      <inheritdoc />
      <remarks>This default implementation simply returns the data range.</remarks>
      <remarks> Do not change the properties on this object as it may be overwritten by the chart. 
            Instead use IAxis.Range to set a specific range.</remarks>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.YRange">
      <inheritdoc />
      <remarks>This default implementation simply returns the data range.</remarks>
      <remarks> Do not change the properties on this object as it may be overwritten by the chart. 
            Instead use IAxis.Range to set a specific range.</remarks>
    </member>
    <member name="E:Visiblox.Charts.ChartSeriesCommonBase.DataSeriesCollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.ChartSeriesCommonBase.LegendItemsChanged">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.Element">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.SuggestedPointWidth">
      <summary>
            Suggested maximum width of points. Its value is 80% of the minimum distance between two points 
            within the series. Its value is re-calculated whenever <see cref="M:Visiblox.Charts.ChartSeriesCommonBase.Invalidate" /> is called - either
                externally or by the series itself.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.StateStylesCollection">
      <summary>
            Dictionary of StateStyleCollections that can be applied based on the state of an element.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.DataSeries">
      <summary>
            Gets or sets the data series used by this series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.LegendItemStyle">
      <summary>
            Gets or sets LegendItemStyle. This property is used to style the legend item belonging to this series. The Style should have a TargetType of LegendItem. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.LegendItemTemplate">
      <summary>
            Gets or sets LegendItemTemplate. This property defines the template of the legend item belonging to this series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.ToolTipEnabled">
      <summary>
            Gets or sets whether to display tooltips on data points. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.ToolTipTemplate">
      <summary>
            Gets or sets the control template for data point tooltips. The control template should have a TargetType of ToolTip. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.ToolTipPosition">
      <summary>
            Gets or sets the placement mode of the tooltips. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.ToolTipStyle">
      <summary>
            Gets or sets the style used to display data point tooltips. The Style should have a TargetType of ToolTip. See <see cref="T:Visiblox.Charts.ChartSeriesBase" /> for an example. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.TrackballTemplate">
      <summary>
            Gets or sets the control template used for a trackball on this series. The ControlTemplate should have a TargetType of Trackball. See <see cref="T:Visiblox.Charts.ChartSeriesBase" /> for an example. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.TrackballStyle">
      <summary>Gets or sets the Style associated with trackballs on this series. The appropriate TargetType of this Style depends on the TrackballTemplate set on the series.</summary>
      <remarks>The TrackballStyle is bound in the TrackballTemplate, so its use depends on the particular TrackballTemplate set on the series. For a LineSeries this is by default Ellipse, for other series types the default is Polygon</remarks>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.IsDisplayedOnLegend">
      <summary>
            Gets or sets whether the series should be displayed on the legend of the chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.OffsetProvider">
      <summary>
            Gets or sets the offset provider. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.LabelMaxWidth">
      <summary>
            Gets or sets the maximum data label width.  Setting this makes label collision detection quicker. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesCommonBase.ZoomPending">
      <inheritdoc cref="P:Visiblox.Charts.IDataLabelAware.ZoomPending" />
    </member>
    <member name="E:Visiblox.Charts.ChartSeriesCommonBase.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesBase.GetPointRenderPosition(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesBase.SelectBaseAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesBase.SelectPerpendicularAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesBase.IsPointRenderableInternal(Visiblox.Charts.IDataPoint)">
      <summary>
            Determines whether the point can be rendered on the canvas. Subclasses using multiple Y valued data points or
            having other constraints should override IsPointRenderableInternal to enforce validity.
            </summary>
      <remarks>
        <para>This base implementation checks the point's X value and its minimum Y value, which
            in both the case of single and multi-valued data points should indicate that the point is likely to be renderable.
            Subclasses may wish to override this to perform additional or alternative checks, such as the multiple
            Y values used by the series.</para>
        <para>Series implementations should not render points for which IsPointRenderableInternal returns false; when extending
            <see cref="T:Visiblox.Charts.MultiValueSeriesBase" /> or other provided series, beware that 
            these classes will filter out points deemed un-renderable by this method.</para>
      </remarks>
      <param name="dataPoint">Point to check</param>
      <returns>Whether the point is displayable</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesBase.AreKeyPropertiesNull">
      <summary>
            Identify if the key rendering properties are null.
            </summary>
      <returns>True if any properties required for rendering are null and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesBase.ComputeMinimumDistanceBetweenPoints">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesBase.AxisChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when either the XAxis or YAxis property changes.
            </summary>
      <param name="e">The event args for the change, containing both the new and old axes</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesBase.InitInternalBase">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesBase.InitInternal">
      <summary>
            Override to implement custom initialization.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesBase.DeInitInternalBase">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesBase.DeInitInternal">
      <summary>
            Override to implement custom de-initialization.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSeriesBase.UpdateChartSeriesAwareDataSeries">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesBase.XAxisProperty">
      <summary>
            Identifies the XAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSeriesBase.YAxisProperty">
      <summary>
            Identifies the YAxis Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.ChartSeriesBase.AxisPropertyChanged">
      <summary>
            An event fired upon the changing of the XAxis or YAxis property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesBase.CachedXAxis">
      <summary>
            Gets or sets the cached <see cref="P:Visiblox.Charts.ChartSeriesBase.XAxis" /> to avoid hitting it repeatedly (as it is a Dependency Property).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesBase.CachedYAxis">
      <summary>
            Gets or sets the cached <see cref="P:Visiblox.Charts.ChartSeriesBase.YAxis" /> to avoid hitting it repeatedly (as it is a Dependency Property).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesBase.XAxis">
      <summary>
            Gets or sets the X axis of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSeriesBase.YAxis">
      <summary>
            Gets or sets the Y axis of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IChartSingleSeries">
      <summary>
            Defines a singular chart series.
            </summary>
      <remarks>
        <para>
            IChartSingleSeries implementations are interactable and selectable.
            This functionality is provided by the abstract class <see cref="T:Visiblox.Charts.ChartSingleSeriesBase" />.
            When implementing a new singular chart series, it is advised to inherit from <see cref="T:Visiblox.Charts.ChartSingleSeriesBase" /> 
            rather than implementing this interface directly.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.IChartSeries" />
      <seealso cref="T:Visiblox.Charts.ChartSeriesCommonBase" />
      <seealso cref="T:Visiblox.Charts.ChartSingleSeriesBase" />
    </member>
    <member name="F:Visiblox.Charts.ChartSingleSeriesBase.SelectedEvent">
      <summary>
            The RoutedEvent to be raised when selection happens
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.OnStyleUpdated">
      <summary>
            Add entries to the StateStylesCollection for the 4 general states - Normal, Highlighted, Selected and SelectedHighlighted
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.ResolveStyles(System.Windows.Style)">
      <summary>
            Resolve the series styling based on the requirements of the given series.  This means converting the style of the series
            into something that can be applied to the Style property of the visual elements.  For example, the PointSize, PointStroke and
            PointStrokeThickness properties might all be converted to a style with TargetType Ellipse and property setters for Width, Height, Stroke
            and StrokeThickness.
            The method will be called multiple times for each state Normal, Selected, Highlighted and SelectedHighlighted, passing in the style
            to use as the basis for restyling.
            </summary>
      <param name="seriesStyle">The style on which to base the StateSpecificStyle.  In the event of Normal styling this will be null.</param>
      <returns>The style specific to a single state.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.UpdateDataSeriesWithRanges">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.InvalidateBase">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.InvalidateInternal">
      <summary>
            Invoked by the public <see cref="M:Visiblox.Charts.ChartSingleSeriesBase.InvalidateBase" /> method in order to 
            construct the visual layout of this series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.EnableSeriesSelection(System.Windows.FrameworkElement)">
      <summary>
            Enables the selection of the series when clicking on <paramref name="element" />.
            </summary>
      <param name="element">Element to use to trigger series selection.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.EnablePointSelection(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <summary>
            Enables the selection of the plotted point ("physical" point) on the series. 
            </summary>
      <param name="physicalPoint">The plotted point ("physical" point) to enable selection for.</param>
      <param name="logicalPoint">The point of the series ("logical" point) associated with the element when the element is selected.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.EnableSeriesHighlighting(System.Windows.FrameworkElement)">
      <summary>
            Registers event handlers that make the series highlight when the mouse hovers over <paramref name="element" />.
            </summary>
      <param name="element">Element to use to trigger series highlighting.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.UpdateSeriesHighlighting">
      <summary>
            Override in subclasses to visualize series highlighting.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.SetDpStylesOnStyle(System.Windows.Style)">
      <summary>
            Sets NormalStyle, HighlightedStyle and SelectedStyle on <paramref name="style" />
                if they're not already set.
            </summary>
      <param name="style">The style to which to add the normal, highlighted and selected styles.</param>
      <returns>The updated, modified style.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.Highlight">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.ClearSelectedItems">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.MergeWith(System.Windows.Style)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.GetStyle">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.RemoveSelectedItem(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.RemoveSelectedItems">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.RemoveOldSelectedPoints">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.RemoveSelectedItemsFromDataPoints">
      <summary>
            If resetting the collection, it may be necessary to manually remove each point separately. Override this method when this is the case.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartSingleSeriesBase.GetDataLabelString(Visiblox.Charts.IAxisCommon,Visiblox.Charts.IAxisCommon,Visiblox.Charts.IDataPoint,System.String)">
      <summary>
            Provides the formatted data label.  Implemented here because the same behaviour is required for a range of different ChartSeries.  
            Not implemented higher up, in ChartSeriesCommonBase because behaviour for e.g. stacking series isn't defined.  
            </summary>
      <param name="xAxis">The x axis with which the data label is associated.</param>
      <param name="yAxis">The y axis with which the data label is associated.</param>
      <param name="dataPoint">The data point to create a label for.</param>
      <param name="formatString">A format string. Passing null will use the axis format string.</param>
      <returns>The label string.</returns>
    </member>
    <member name="F:Visiblox.Charts.ChartSingleSeriesBase.HighlightingEnabledProperty">
      <summary>
            Identifies the HighlightingEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSingleSeriesBase.IsSelectedProperty">
      <summary>
            Identifies the IsSelected Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSingleSeriesBase.IsHighlightedProperty">
      <summary>
            Identifies the IsHighlighted Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSingleSeriesBase.SelectionModeProperty">
      <summary>
            Identifies the SelectionMode Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSingleSeriesBase.SelectedItemProperty">
      <summary>
            Identifies the SelectedItem Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSingleSeriesBase.SelectedItemsProperty">
      <summary>
            Identifies the SelectedItems Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSingleSeriesBase.SelectedStyleProperty">
      <summary>
            Identifies the SelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSingleSeriesBase.HighlightedStyleProperty">
      <summary>
            Identifies the HighlightedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartSingleSeriesBase.HandleSelectionClickProperty">
      <summary>
            Identifies the HandleSelectionClick Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.ChartSingleSeriesBase.SelectionChanged">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ChartSingleSeriesBase.CachedIsHighlighted">
      <summary>
            Cached version of IsHighlighted Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSingleSeriesBase.CachedIsSelected">
      <summary>
            Cached version of IsSelected Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSingleSeriesBase.XRange">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ChartSingleSeriesBase.YRange">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ChartSingleSeriesBase.HighlightingEnabled">
      <summary>
            Gets or sets whether highlighting of the series is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSingleSeriesBase.IsSelected">
      <summary>Gets or sets whether the series is selected.</summary>
      <remarks>This value can only be true if selection is enabled on the series, that is <see cref="P:Visiblox.Charts.ChartSingleSeriesBase.SelectionMode" /> is set to <see cref="F:Visiblox.Charts.SelectionMode.Series" />.Generally clicking on the series will select it, if it is selectable, but this property can also be manipulated programmatically.</remarks>
    </member>
    <member name="P:Visiblox.Charts.ChartSingleSeriesBase.IsHighlighted">
      <summary>Gets or sets whether the series is highlighted.</summary>
      <remarks> This value can only be true if selection is enabled on the series, that is <see cref="P:Visiblox.Charts.ChartSingleSeriesBase.SelectionMode" /> is set to <see cref="F:Visiblox.Charts.SelectionMode.Series" />. Generally hovering over the series will highlighted it, if it is selectable, but this property can also be manipulated programmatically.</remarks>
    </member>
    <member name="P:Visiblox.Charts.ChartSingleSeriesBase.SelectionMode">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ChartSingleSeriesBase.SelectedItem">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ChartSingleSeriesBase.SelectedItems">
      <inheritdoc cref="P:Visiblox.Charts.ISelectable.SelectedItems" />
    </member>
    <member name="P:Visiblox.Charts.ChartSingleSeriesBase.SelectedStyle">
      <summary>
            Gets or sets the style applied to the series when it is selected. This style is combined with <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" /> when rendering the series.  Properties defined in this style take precedence over the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" /> during that merge. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSingleSeriesBase.HighlightedStyle">
      <summary>
            Gets or sets the style applied to the series when it is highlighted. This style is merged with <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" /> and if selected the <see cref="P:Visiblox.Charts.ChartSingleSeriesBase.SelectedStyle" /> when rendering the series in a selected state.  Properties defined in this style take precedence over the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" /> and <see cref="P:Visiblox.Charts.ChartSingleSeriesBase.SelectedStyle" /> during that merge. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartSingleSeriesBase.HandleSelectionClick">
      <summary>
            Gets or sets whether a click that would cause selection / de-selection should be handled. If set to false, the event will be forwarded to other parts of the chart, otherwise it will be marked as handled and swallowed. This is a Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.Upper">
      <summary>
            The key to the Y value points which represent the Upper value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.Lower">
      <summary>
            The key to the Y value points which represent the Lower value.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BandSeries.InvalidateInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BandSeries.DrawLines">
      <summary>
            Draws and styles the upper and lower lines for the series onto the canvas.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.BuildLineGeometries">
      <summary>
            Builds line geometries for the upper and lower lines in the series. The string should be either the
            Upper or Lower string variable.
            </summary>
      <returns>A Dictionary with the line type (Upper or Lower) and its path geometry.</returns>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.DrawArea">
      <summary>
            Draws and styles the area between the upper and lower lines for the series onto the canvas.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.BuildAreaGeometry">
      <summary>
            Build a collection of area geometries. These are shapes within the upper and lower line paths
            which may be inverted should the lines cross - this is specified in PathGeometryWithInversion.Inverted.
            Initially draws along the higher points from the initial start point, then uses CompleteIndividualAreaGeometry
            to close the shape.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.CalculateIntersection(Visiblox.Charts.IAxis,Visiblox.Charts.IAxis,Visiblox.Charts.IDataPoint,Visiblox.Charts.IDataPoint)">
      <summary>
            Calculates the point of intersection between 2 data points.
            </summary>
      <param name="xAxis">The X Axis the datapoints are plotted against.</param>
      <param name="yAxis">The Y Axis the datapoints are plotted against.</param>
      <param name="dataPoint1">IDataPoint with x1 and y1 values</param>
      <param name="dataPoint2">IDataPoint with x2 and y2 values</param>
      <returns>An intersection point.</returns>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.CalculateIntersection(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Calculates the point of intersection between 2 band series sets of points.
            </summary>
      <param name="x1">The x position.</param>
      <param name="y1Upper">The upper y position.</param>
      <param name="y1Lower">The lower y position.</param>
      <param name="x2">The second x position.</param>
      <param name="y2Upper">The second upper y position.</param>
      <param name="y2Lower">The second lower y position.</param>
      <returns>An intersection point.</returns>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.CompleteIndividualAreaGeometry(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean)">
      <summary>
            Builds an individual area geometry by traversing the lower points to close the PathFigure
            </summary>
      <param name="pathFigure">The uncompleted PathFigure</param>
      <param name="previousLowerPoints">The previous points to traverse to close the PathFigure</param>
      <param name="inverted">Whether the PathFigure is inverted or not</param>
      <returns>A PathGeometry and an inversion value</returns>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.IsPointRenderableInternal(Visiblox.Charts.IDataPoint)">
      <summary>
            Check if the given <paramref name="dataPoint" /> is renderable. Override to check the upper and lower Y values.
            </summary>
      <param name="dataPoint">Data point to check.</param>
      <returns>Whether the data point is renderable.</returns>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.RenderDataLabels">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BandSeries.CalculateSuggestedPointWidth">
      <inheritdoc />
      <remarks>
            The band series makes no use of SuggestedPointWidth so overrides to avoid doing unnecessary work.  Will always return 0.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.InitializeDataLabels(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BandSeries.SpecializeLabel(Visiblox.Charts.IDataPoint)">
      <summary>
            Places labels on the point they're labelling and then moves them according to the LabelDistance and LabelPosition DPs.
            </summary>
      <param name="dataPoint">The data point to specialise the label for.</param>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.DataLabelColliding(Visiblox.Charts.IAxisCommon,Visiblox.Charts.IAxisCommon,Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BandSeries.AddDataLabelToRootZoomCanvas(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BandSeries.LayoutDataLabel(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BandSeries.StyleDataLabel(Visiblox.Charts.IDataPoint,System.Int32)">
      <summary>
            Determine which styling should be applied to the data labels of the given point.
            </summary>
      <param name="dataPoint">The data point for which to style the data label.</param>
      <param name="index">The index of the data label of the specified data point to style.</param>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.StyleAreaPath(System.Windows.Shapes.Path,System.Boolean)">
      <summary>
            Determine which styling should be applied to the path.
            </summary>
      <param name="element">The area path to style.</param>
      <param name="isInverted">True if to style inverted and false otherwise.</param>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.StyleLinePath(System.Windows.Shapes.Path,System.Boolean)">
      <summary>
            Determine which styling should be applied to the path
            </summary>
      <param name="element">The line path to style.</param>.
            <param name="isUpper">True if it's the upper path and false otherwise.</param></member>
    <member name="M:Visiblox.Charts.BandSeries.StyleDataLabel(Visiblox.Charts.IDataPoint,Visiblox.Charts.Primitives.StateSpecificStyle)">
      <summary>
            Apply the <paramref name="styles" /> to data labels of the <paramref name="dataPoint" />.
            </summary>
      <param name="dataPoint">The data point to style the data label for.</param>
      <param name="styles">The cached styles collection from which to retrieve the applicable style.</param>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.StyleLinePath(System.Windows.Shapes.Path,System.Boolean,Visiblox.Charts.Primitives.StateSpecificStyle)">
      <summary>
            Apply the <paramref name="styles" /> to the <paramref name="element" />.
            </summary>
      <param name="element">The line path to style.</param>.
            <param name="isUpper">True if it's the upper path and false otherwise.</param><param name="styles">The cached styles collection from which to retrieve the applicable style.</param></member>
    <member name="M:Visiblox.Charts.BandSeries.StyleAreaPath(System.Windows.Shapes.Path,System.Boolean,Visiblox.Charts.Primitives.StateSpecificStyle)">
      <summary>
            Apply the <paramref name="styles" /> to the <paramref name="element" /></summary>
      <param name="element">The area path to style.</param>
      <param name="isInverted">True if to style inverted and false otherwise.</param>
      <param name="styles">The cached styles collection from which to retrieve the applicable style.</param>
    </member>
    <member name="M:Visiblox.Charts.BandSeries.UpdateSeriesHighlighting">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BandSeries.ResolveStyles(System.Windows.Style)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.BandSeries.ShowLinesProperty">
      <summary>
            Identifies the ShowLines Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.ShowAreaProperty">
      <summary>
            Identifies the ShowArea Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.UpperLineStyleProperty">
      <summary>
            Identifies the UpperLineStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.UpperLineStrokeProperty">
      <summary>
            Identifies the UpperLineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.UpperLineStrokeThicknessProperty">
      <summary>
            Identifies the UpperLineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.LowerLineStyleProperty">
      <summary>
            Identifies the LowerLineStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.LowerLineStrokeProperty">
      <summary>
            Identifies the LowerLineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.LowerLineStrokeThicknessProperty">
      <summary>
            Identifies the LowerLineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.AreaStyleProperty">
      <summary>
            Identifies the AreaStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.AreaFillProperty">
      <summary>
            Identifies the AreaFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.InvertedAreaStyleProperty">
      <summary>
            Identifies the InvertedAreaStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.InvertedAreaFillProperty">
      <summary>
            Identifies the InvertedAreaFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.SelectionHelperLineThicknessProperty">
      <summary>
            Identifies the SelectionHelperLineThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.UpperLabelStyleProperty">
      <summary>
            Identifies the UpperLabelStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.LowerLabelStyleProperty">
      <summary>
            Identifies the LowerLabelStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.LabelFormatStringProperty">
      <summary>
            Identifies the LabelFormatString Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.ShowDataLabelsProperty">
      <summary>
            Identifies the ShowDataLabels Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.LabelPositionProperty">
      <summary>
            Identifies the LabelPosition Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandSeries.LabelDistanceProperty">
      <summary>
            Identifies the LabelDistance Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.ShowLines">
      <summary>
            Gets or sets whether the lines are plotted on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.ShowArea">
      <summary>
            Gets or sets whether the area is plotted on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.UpperLineStyle">
      <summary>
            Gets or sets the upper line style. The Style should have a TargetType of Path. Stroke and StrokeThickness setters should not be defined in this style when using the default palette, as they will be overridden by the UpperLineStroke and UpperLineStrokeThickness dependency properties defined in this palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.UpperLineStroke">
      <summary>
            Gets or sets the brush used to draw the upper line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.UpperLineStrokeThickness">
      <summary>
            Gets or sets the thickness of a the drawn upper line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.LowerLineStyle">
      <summary>
            Gets or sets the lower line style. The Style should have a TargetType of Path. Stroke and StrokeThickness setters should not be defined in this style when using the default palette, as they will be overridden by the LowerLineStroke and LowerLineStrokeThickness dependency properties defined in this palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.LowerLineStroke">
      <summary>
            Gets or sets the brush used to draw the lower line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.LowerLineStrokeThickness">
      <summary>
            Gets or sets the thickness of a the drawn lower line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.AreaStyle">
      <summary>
            Gets or sets the area style. Fill setter should not be defined in this style when using the default palette, as this will be overridden by the AreaFill dependency property defined in this palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.AreaFill">
      <summary>
            Gets or sets the brush used for filling the area on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.InvertedAreaStyle">
      <summary>
            Gets or sets the inverted area style. If set, this property determines how areas are rendered in this series after an intersection. If the upper line crosses the lower, or vice versa, this area will be set from the BandSeriesAreaStyle. Should they intersect again, the BandSeriesAreaStyle will be returned. The Style should have a TargetType of Path. Note: To set the Fill, please use the InvertedAreaFill Dependency Properties. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.InvertedAreaFill">
      <summary>
            Gets or sets the brush used for filling the inverted area on the series. If set, this property determines how areas are rendered in this series after an intersection. If the upper line crosses the lower, or vice versa, this area will be set from the BandSeriesAreaFill. Should they intersect again, the BandSeriesAreaFill will be returned. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.SelectionHelperLineThickness">
      <summary>
            Gets or sets the thickness of the invisible line around the series line path that helps selection. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.UpperLabelStyle">
      <summary>
            Gets or sets the border style applied to upper line data labels.  TargetType should be DataLabel. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.LowerLabelStyle">
      <summary>
            Gets or sets the border style applied to lower line data labels.  TargetType should be DataLabel. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.LabelFormatString">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BandSeries.ShowDataLabels">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BandSeries.LabelPosition">
      <summary>
            Gets or sets the position of the label relative to the point associated with it. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BandSeries.LabelDistance">
      <summary>
            Gets or sets the distance between the data point and and data label associated with it. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.PathGeometryWithInversion">
      <summary>
            Contains a path geometry and an inverted Boolean. Used to check which style to use when
            building areas - AreaStyle or InvertedAreaStyle.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PathGeometryWithInversion.PathGeometry">
      <summary>
            The PathGeometry data for the Path.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.PathGeometryWithInversion.Inverted">
      <summary>
            The inversion value, when the lines initially cross they are inverted. When they re-cross, they become un-inverted.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BandGeometries">
      <summary>
            A struct to hold the Upper and Lower Path Geometries for the Band Series.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandGeometries.Upper">
      <summary>
            The Upper line's path geometry.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BandGeometries.Lower">
      <summary>
            The Lower line's path geometry.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BarOrColumnSeriesBase">
      <summary>
            Base class for <see cref="T:Visiblox.Charts.BarSeries" /> and <see cref="T:Visiblox.Charts.ColumnSeries" />.
            </summary>
      <remarks>
        <para>
          <see cref="T:Visiblox.Charts.BarSeries" /> and <see cref="T:Visiblox.Charts.ColumnSeries" /> are essentially the same thing,
            but with X and Y axis swapped round. Almost all the functionality therefore is in this base class.
            </para>
        <para>Below we shall talk about column charts, but this applies equally to bar charts.</para>
        <para>When a column series is displayed on a chart, the width of its columns are calculated based upon the spacing of the supplied data.
            Narrower columns can be achieved by altering <see cref="P:Visiblox.Charts.BarOrColumnSeriesBase.BarWidthFraction" />: by default this is 0.75, at 1 all columns will be touching,
            while at 0.5 the columns will be half this size (resulting in the space between columns being the same size as the columns themselves).</para>
        <para>If multiple column series are displayed on the same chart, they are displayed together. The series are all sized and spaced so that at
            each data point, a group of columns is displayed together, the leftmost column for the first column series on the chart and the rightmost for the last.</para>
        <para>Where one column series has some missing X values, the series will be spaced and sized as if these were 0.</para>
        <para>
            The OffsetProvider property identifies that BarOrColumnSeriesBase implements <see cref="T:Visiblox.Charts.IStackableChartSeries" />
            and can therefore be used in a stacking context. This property is set to the containing <see cref="T:Visiblox.Charts.IChartMultipleSeries" />,
            such as <see cref="T:Visiblox.Charts.StackedBarSeries" /> or <see cref="T:Visiblox.Charts.StackedColumnSeries" /> to perform offset
            calculations and apply them during rendering. It is not necessary to set this property.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.BarSeries" />
      <seealso cref="T:Visiblox.Charts.ColumnSeries" />
    </member>
    <member name="T:Visiblox.Charts.IStackableChartSeries">
      <summary>
            IStackableChartSeries represents the concept that an <see cref="T:Visiblox.Charts.IChartSingleSeries" /> can be used within a
            stacking context, and defines the necessary functionality in order for a series to interact with an
            <see cref="T:Visiblox.Charts.IOffsetProvider" />.
            </summary>
      <remarks>
        <para>
            An <see cref="T:Visiblox.Charts.IChartSingleSeries" /> which also implements IStackableChartSeries holds a reference to an
            <see cref="T:Visiblox.Charts.IOffsetProvider" />. This OffsetProvider, which in the stacking context is of type <see cref="T:Visiblox.Charts.IChartMultipleSeries" />
            will hold a collection of series in order to calculate offset values that should be applied to data points in this series.
            Interaction with this OffsetProvider allows for this series to access and apply such offsets during the rendering procedure.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.IOffsetProvider" />
      <seealso cref="T:Visiblox.Charts.BarOrColumnSeriesBase" />
      <seealso cref="T:Visiblox.Charts.LineSeries" />
    </member>
    <member name="M:Visiblox.Charts.IStackableChartSeries.GetDataPointSharingBaseAxisDataValue(Visiblox.Charts.IDataPoint)">
      <summary>
            Gets a data point with the same X or Y value (where appropriate) from this DataSeries, as the parameter value.
            </summary>
      <param name="dataPoint">A data point not in this series.</param>
      <returns>A data point with the same X or Y value (where relevant, according to the series type) as the parameter.</returns>
    </member>
    <member name="M:Visiblox.Charts.IStackableChartSeries.GetBaseRange">
      <summary>
            Gets the range of data points on the base axis, typically equivalent to XRange but YRange for BarSeries.
            </summary>
      <returns>The base range.</returns>
    </member>
    <member name="M:Visiblox.Charts.IStackableChartSeries.GetBaseAxisValuesUsed">
      <summary>
            Gets the set of values appearing as base-axis values e.g. for a LineSeries it returns all the x values used, without duplicates
            </summary>
      <returns>The base axis values in use.</returns>
    </member>
    <member name="P:Visiblox.Charts.IStackableChartSeries.BaseValue">
      <summary>
            The data value along the perpendicular axis of points that are on the base axis.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IBarOrColumnSeries">
      <summary>
            Represents methods shared between BarSeries, ColumnSeries and their stacked counterparts.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IBarOrColumnSeries.GetBaseAxisValuesUsed">
      <summary>
            Returns the set of values appearing as base-axis values e.g. for a ColumnSeries it returns all the x values used, as a set.
            </summary>
      <returns>The set of unique base axis values.</returns>
    </member>
    <member name="P:Visiblox.Charts.IBarOrColumnSeries.Type">
      <summary>
            Gets the type of the bar series - either Bar (horizontal) or Column (vertical): this determines which axis is used as the base for the series.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IBarOrColumnSeries.BarWidthFraction">
      <summary>
            Gets or sets a bar width fraction, i.e. the DependencyProperty BarWidthFraction for BarOrColumnBase or the maximum contained BarWidthFraction for Stacked series.
            </summary>
      <returns>The fraction of available space to use for rendering.</returns>
    </member>
    <member name="P:Visiblox.Charts.IBarOrColumnSeries.MinBarWidth">
      <summary>
            Minimum bar width to permit (to avoid bars disappearing when under a single pixel)
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.CornerRadiusProperty">
      <summary>
            Identifies the CornerRadius Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.#ctor(Visiblox.Charts.BarSeriesType)">
      <summary>
            Constructs a bar/column series according to <paramref name="orientation" />.
            </summary>
      <param name="orientation">The orientation of the series, i.e. bar or column.</param>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.GetLegendItems">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.InvalidateInternal">
      <summary>
            Redraws the bars from scratch using data points in the DataSeries.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.RemoveSelectedItemsFromDataPoints">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.AddDataPoint(Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.RemoveDataPoint(Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.UpdateDataPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.OnPointRendered(Visiblox.Charts.IDataPoint,System.Windows.Shapes.Path)">
      <summary>
            Raise a PointRendered event if appropriate.
            </summary>
      <param name="dataPoint">The data point for the point which was rendered.</param>
      <param name="frameworkElement">The render element for that point.</param>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.SelectBaseAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.SelectPerpendicularAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.GetBaseAxisValuesUsed">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.RefreshBaseAxisValuesUsed">
      <summary>
            Called in the event of a Reset event on the DataSeries
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.GetBaseRange">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.GetDataPointSharingBaseAxisDataValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.AxisChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.UpdateSeriesHighlighting">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.ResolveStyles(System.Windows.Style)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.StyleDataLabel(Visiblox.Charts.IDataPoint,System.Int32)">
      <summary>
            Applies the highlighted or selected styles as appropriate.
            In the event of ColumnSeries label text wrapping it reduces FontSize as far as permitted (and then allows wrapping if no further reduction is possible).
            Label position relative to the Bar or Column is recomputed given the new styling.
            </summary>
      <param name="dataPoint">The data point for which to style the data label.</param>
      <param name="index">The index of the data label for the specified data point to style.</param>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.GetOrAddDataLabels(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.RenderDataLabels">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.InitializeDataLabels(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.SpecializeLabel(Visiblox.Charts.IDataPoint)">
      <summary>
            Does series-specific things to the label, given the dataPoint, that the DataLabelHelper doesn't know about
            </summary>
      <param name="dataPoint">The data point to specialise the label for.</param>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.GetDataLabelString(Visiblox.Charts.IAxisCommon,Visiblox.Charts.IAxisCommon,Visiblox.Charts.IDataPoint,System.String)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesBase.LayoutDataLabel(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.BarWidthFractionProperty">
      <summary>
            Identifies the BarWidthFraction Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.PointStyleProperty">
      <summary>
            Identifies the PointStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.PointStrokeProperty">
      <summary>
            Identifies the PointStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.PointStrokeThicknessProperty">
      <summary>
            Identifies the PointStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.PointFillProperty">
      <summary>
            Identifies the PointFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.LabelStyleProperty">
      <summary>
            Identifies the LabelStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.LabelFormatStringProperty">
      <summary>
            Identifies the LabelFormatString Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.ShowDataLabelsProperty">
      <summary>
            Identifies the ShowDataLabels Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.LabelContainmentPositionProperty">
      <summary>
            Identifies the LabelContainmentPosition Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.LabelDistanceProperty">
      <summary>
            Identifies the LabelDistance Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.LabelMinFontSizeProperty">
      <summary>
            Identifies the LabelMinFontSize Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.LabelMaxFontSizeProperty">
      <summary>
            Identifies the LabelMaxFontSize Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.BevelDepthProperty">
      <summary>
            Identifies the BevelDepth Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.PaletteProperty">
      <summary>
            Identifies the Palette Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.StylingModeProperty">
      <summary>
            Identifies the StylingMode Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesBase.AllowFastPathRenderingProperty">
      <summary>
            Identifies the AllowFastPathRendering Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.Type">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.BarOrColumnSeriesBase.PointRendered">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.RenderManager">
      <summary>
            The render manager instance for this series which can be used when rendering the series for additional information
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.SupportsFastPathRendering">
      <summary>
            Indicates whether this series type supports fast path rendering
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.MinBarWidth">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.IsXMinimumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.IsXMaximumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.IsYMinimumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.IsYMaximumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.XMargin">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.YMargin">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.XRange">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.YRange">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.BaseValue">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.CornerRadius">
      <summary>
            Gets or sets the corner radius of the points. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.BarWidthFraction">
      <summary>
            Gets or sets the enforced width of each bar, as a fraction of the calculated width. If this is not set, the width is calculated automatically. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.PointStyle">
      <summary>
            Gets or sets the style to be used on the points of the series. The Style should have a TargetType of Path. Fill, Stroke and StrokeThickness setters should not be defined in this style when using the default palette, as they will be overridden by the PointFill, PointStroke and PointStrokeThickness dependency properties defined in this palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.PointStroke">
      <summary>
            Gets or sets the stroke to be used on the points of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.PointStrokeThickness">
      <summary>
            Gets or sets the stroke thickness to be used on the points of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.PointFill">
      <summary>
            Gets or sets the fill to be used on the points of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.LabelStyle">
      <summary>
            Gets or sets the text style applied to any data labels.  TargetType should be DataLabel. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.LabelFormatString">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.ShowDataLabels">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.LabelContainmentPosition">
      <summary>
            Gets or sets the position of the label relative to the bar or column. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.LabelDistance">
      <summary>
            Gets or sets the distance between the data point and and data label associated with it. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.LabelMinFontSize">
      <summary>
            The smallest acceptable font size for use in data labels. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.LabelMaxFontSize">
      <summary>
            The largest acceptable font size for use in data labels. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.BevelDepth">
      <summary>
            Gets or sets the bevel depth of each bar or column. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.Palette">
      <summary>
            Gets or sets the palette to use to style the points in this series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.StylingMode">
      <summary>
            Gets or sets way in which to iterate over the palette to style. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesBase.AllowFastPathRendering">
      <summary>
            Gets or sets whether this series should attempt to use fast rendering mode.  Note that the fast rendering mode is only efficient under a restricted set of circumstances depending on whether hardware or software rendering is used and whether anti-aliasing is enabled or not.  Even if this property is set to true, the implementation is series specific.  Enabling should not change the behaviour of the series in any way other than how it is rendered and potential minor visual differences. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.StylingMode">
      <summary>
            Describes the mode in which to apply styling to a series.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.StylingMode.PerSeries">
      <summary>
            Each style is applied to a whole a series and varies only between series.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.StylingMode.PerPoint">
      <summary>
            Each style is applied to a single point and varies for each point.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BarColumnLabelPosition">
      <summary>
            The various places in which a data label can be put, relative to the bar or column.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarColumnLabelPosition.Inside">
      <summary>
            Within the rectangle, at the end furthest away from the base axis.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarColumnLabelPosition.Outside">
      <summary>
            Outside the rectangle, at the end furthest away from the base axis.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BarSeries">
      <summary>
            Represents a bar series.
            </summary>
      <remarks>
            BarSeries is essentially the same as <see cref="T:Visiblox.Charts.ColumnSeries" /> but with horizontal bars. See <see cref="T:Visiblox.Charts.BarOrColumnSeriesBase" />.
            </remarks>
      <seealso cref="T:Visiblox.Charts.BarOrColumnSeriesBase" />
      <seealso cref="T:Visiblox.Charts.ColumnSeries" />
    </member>
    <member name="M:Visiblox.Charts.BarSeries.#ctor">
      <summary>
            Creates a bar series.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BarSeriesType">
      <summary>
            Defines the possible types of bar series based on layout direction.
            </summary>
      <seealso cref="T:Visiblox.Charts.BarOrColumnSeriesBase" />
    </member>
    <member name="F:Visiblox.Charts.BarSeriesType.BarSeries">
      <summary>
            A series with horizontal bars.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarSeriesType.ColumnSeries">
      <summary>
            A series with vertical bars.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BoxPlotSeries">
      <summary>
            Represents a box plot series where each point has a Minimum, Maximum, Lower Quartile, Upper Quartile and optionally a Median value.
            </summary>
      <seealso cref="T:Visiblox.Charts.ChartSeriesCommonBase" />
      <seealso cref="T:Visiblox.Charts.MultiValueSeriesBase" />
    </member>
    <member name="T:Visiblox.Charts.MultiValueWithFastPathSeriesBase">
      <summary>
            Base class for series with multi value data points (<see cref="T:Visiblox.Charts.MultiValuedDataPoint`2" /> that supports fast path rendering.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.MultiValueSeriesBase">
      <summary>
            Base class for series with multi value data points (<see cref="T:Visiblox.Charts.MultiValuedDataPoint`2" />.
            </summary>
      <remarks>
        <para>
            The class implements the strategy of invalidating points. Members inheriting this class only need 
            to override <see cref="M:Visiblox.Charts.MultiValueSeriesBase.CreatePoint(Visiblox.Charts.IDataPoint)" />, <see cref="M:Visiblox.Charts.MultiValueSeriesBase.UpdatePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)" />.
            Optionally they can override StylePoint/&gt;.
            If the concrete series uses other objects than Paths for rendering points, override <see cref="M:Visiblox.Charts.MultiValueSeriesBase.PositionPointOnZoomCanvas" /> to have
                the point positioned on <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.RootZoomCanvas" />.
            </para>
      </remarks>
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.CreatePoint(Visiblox.Charts.IDataPoint)">
      <summary>
            Creates the visual representation of the <paramref name="dataPoint" /> logical point.
            </summary>
      <remarks>Note that this method will only be called for points deemed renderable by <see cref="M:Visiblox.Charts.ChartSeriesCommonBase.IsPointRenderable(Visiblox.Charts.IDataPoint)" />,
            consider overriding <see cref="M:Visiblox.Charts.ChartSeriesCommonBase.IsPointRenderableInternal(Visiblox.Charts.IDataPoint)" /> to enforce an appropriate condition for this series.</remarks>
      <param name="dataPoint">The logical point for which to create a visual representation.</param>
      <returns>The visual element to be plotted on the screen.</returns>
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.UpdatePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <summary>
            Updates the visual <paramref name="point" /> that is the representation of the logical point <paramref name="dataPoint" />
            to reflect the new value of <paramref name="dataPoint" />. Implementation is optional.
            </summary>
      <remarks>
        <para>Implementation of <see cref="M:Visiblox.Charts.MultiValueSeriesBase.UpdatePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)" /> is optional for efficiency.
            If UpdatePoint returns true, this indicates the point has been updated successfully. If this method returns <c>false</c>, 
            as in the base implementation, the existing point is removed, and <see cref="M:Visiblox.Charts.MultiValueSeriesBase.CreatePoint(Visiblox.Charts.IDataPoint)" /> is used instead to create its replacement.</para>
        <para>Note that this method will only be called for points deemed renderable by <see cref="M:Visiblox.Charts.ChartSeriesCommonBase.IsPointRenderable(Visiblox.Charts.IDataPoint)" />,
            consider overriding <see cref="M:Visiblox.Charts.ChartSeriesCommonBase.IsPointRenderableInternal(Visiblox.Charts.IDataPoint)" /> to enforce an appropriate condition for this series.</para>
      </remarks>
      <param name="point">The existing visual representation of the point.</param>
      <param name="dataPoint">The logical point.</param>
      <returns>True if <paramref name="point" /> was updated and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.CreatePointInteractionHelper(Visiblox.Charts.IDataPoint)">
      <summary>
            Creates the visual representation of the interactable region associated with the <paramref name="dataPoint" /> logical point.
            By default the result of <see cref="M:Visiblox.Charts.MultiValueSeriesBase.CreatePoint(Visiblox.Charts.IDataPoint)" /> is used as the interactable region, override to provide a different behaviour,
            such as enlarged area either side of a line which might otherwise be hard to click.
            </summary>
      <param name="dataPoint">The logical point.</param>
      <returns>The visual element to be plotted on the screen.</returns>
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.UpdatePointInteractionHelper(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <summary>
            Updates the point interaction region as created by <see cref="M:Visiblox.Charts.MultiValueSeriesBase.CreatePointInteractionHelper(Visiblox.Charts.IDataPoint)" />. By default this does nothing,
            as the data point is used and updated elsewhere.
            </summary>
      <remarks>As for <see cref="M:Visiblox.Charts.MultiValueSeriesBase.UpdatePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)" />, this UpdatePointInteractionHelper returns true if the element was updated,
            and false if <see cref="M:Visiblox.Charts.MultiValueSeriesBase.CreatePointInteractionHelper(Visiblox.Charts.IDataPoint)" /> should be used to create a new one instead.</remarks>
      <param name="helperPoint">The physical representation of the interaction helper point.</param>
      <param name="dataPoint">The logical point.</param>
      <returns>The updated data point.</returns>
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.InvalidateInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.ClearCanvas">
      <summary>
            Clears the points from the canvas and associated data structures.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.AddDataPoint(Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.RemoveDataPoint(Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.UpdateDataPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.PositionPointOnZoomCanvas">
      <summary>
            Returns whether a point should be positioned on the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.RootZoomCanvas" />.
            Default implementation returns false. Override if the series uses elements other than Paths
            that's RenderTransform needs to be set to position to the correct location.
            </summary>
      <returns>True if the point requires to be positioned on the zoom canvas and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.RemovePointIfUnrenderable(Visiblox.Charts.IDataPoint)">
      <summary>
            Determines if the specified point is un-renderable and removes its visual representation if so.
            </summary>
      <param name="dataPoint">The data point to check.</param>
      <returns>True if the point is un-renderable and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.RemoveDataPointRepresentations(Visiblox.Charts.IDataPoint)">
      <summary>
            Remove a data point from the zoom canvas, and the data point / framework element mappings.
            </summary>
      <param name="point">The data point for which to remove the visual representation.</param>
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.SuggestedPointWidthChanged">
      <summary>
            Returns whether the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.SuggestedPointWidth" /> is different than the current suggested point width
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.DrawPoint(Visiblox.Charts.IDataPoint)">
      <summary>
            Plots a point on the canvas of the series.
            </summary>
      <param name="dataPoint">The data point</param>
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.PointDrawn(Visiblox.Charts.IDataPoint,System.Windows.FrameworkElement)">
      <summary>
            Invoked when a point is drawn.  This can be overridden in subclasses to perform additional actions such as raise
            events.
            </summary>
      <param name="dp">The DataPoint for which the point was drawn.</param>
      <param name="element">The visual representation of the point.</param>
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.UpdateSeriesHighlighting">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.ResolveStyles(System.Windows.Style)">
      <summary>
            Sub classes will implement their own version of this if they need specific styles
            </summary>
      <param name="seriesStyle">The base style for the series.</param>
      <returns>The state specific style to be cached.</returns>
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.StylePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <summary>
            Determine the appropriate styling to be applied to the given point based on highlighted and selected states.
            </summary>
      <remarks>
            Concrete subclasses may override this method to apply their own styles to a point if the style to apply is not purely based on the 
            IsHighlighted and SelectedItems state.
            </remarks>
      <param name="point">The existing physical representation of the point.</param>
      <param name="dataPoint">The logical point.</param>
    </member>
    <member name="M:Visiblox.Charts.MultiValueSeriesBase.StylePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint,Visiblox.Charts.Primitives.StateSpecificStyle)">
      <summary>
            Apply the specified style to the point's renderable representation
            </summary>
      <remarks>
            Concrete subclasses MUST override this method to apply their own styles to a point if they haven't already overridden 
            the other StylePoint overload.
            </remarks>
      <param name="point">The existing physical representation of the point.</param>
      <param name="dataPoint">The logical point.</param>
      <param name="styles">The styles to apply.</param>
    </member>
    <member name="P:Visiblox.Charts.MultiValueSeriesBase.XRange">
      <inheritdoc />
      <remarks>Represents the data range extended by the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.SuggestedPointWidth" />.</remarks>
      <remarks>Do not change the properties on this object as it may be overwritten by the chart. 
            Instead use IAxis.Range to set a specific range.</remarks>
    </member>
    <member name="F:Visiblox.Charts.MultiValueWithFastPathSeriesBase.LastPointPath">
      <summary>
            The key to the last point fast path element.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.MultiValueWithFastPathSeriesBase.InvalidateInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.MultiValueWithFastPathSeriesBase.UpdateDataPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.MultiValueWithFastPathSeriesBase.UpdateSeriesHighlighting">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.MultiValueWithFastPathSeriesBase.CreatePoint(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.MultiValueWithFastPathSeriesBase.RenderFastPath">
      <summary>
            If this series type supports fast path rendering (see <see cref="P:Visiblox.Charts.MultiValueWithFastPathSeriesBase.SupportsFastPathRendering" />) then this method will be invoked
            to build the requisite Framework element representing the entire series and add it to the canvas.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.MultiValueWithFastPathSeriesBase.UpdateFastPathHighlighting">
      <summary>
            If this series type supports fast path rendering (see <see cref="P:Visiblox.Charts.MultiValueWithFastPathSeriesBase.SupportsFastPathRendering" />) then this method will be invoked
             to update the styling of any elements created during fast path rendering to respond to series highlighting.
             </summary>
    </member>
    <member name="M:Visiblox.Charts.MultiValueWithFastPathSeriesBase.ClearFastPathElements">
      <summary>
            If this series type supports fast path rendering (see <see cref="P:Visiblox.Charts.MultiValueWithFastPathSeriesBase.SupportsFastPathRendering" />) then this method will be invoked
            to remove any elements created during fast path rendering from the canvas.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.MultiValueWithFastPathSeriesBase.StyleFastPathElements(Visiblox.Charts.IDataPoint)">
      <summary>
            Apply the appropriate styles to the fast path elements
            </summary>
      <param name="lastPoint">The last logical point.</param>
    </member>
    <member name="M:Visiblox.Charts.MultiValueWithFastPathSeriesBase.BuildFastPathGeometry">
      <summary>
            Builds the fast path geometry
            </summary>
    </member>
    <member name="M:Visiblox.Charts.MultiValueWithFastPathSeriesBase.GetPathGeometry(Visiblox.Charts.IDataPoint)">
      <summary>
            Gets the path geometries required to render a point
            </summary>
    </member>
    <member name="M:Visiblox.Charts.MultiValueWithFastPathSeriesBase.AddFastPathElementsToCanvas">
      <summary>
            Makes the paths scalable and adds them to the RootZoomCanvas. Also, enables highlighting and selection if appropriate.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.MultiValueWithFastPathSeriesBase.AllowFastPathRenderingProperty">
      <summary>
            Identifies the AllowFastPathRendering Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.MultiValueWithFastPathSeriesBase.PointsFastPathDictionary">
      <summary>
            A list with the paths needed to implement fast path. This should be populated from each subclass.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.MultiValueWithFastPathSeriesBase.RenderManager">
      <summary>
            The render manager instance for this series which can be used when rendering the series for additional information
            </summary>
    </member>
    <member name="P:Visiblox.Charts.MultiValueWithFastPathSeriesBase.SupportsFastPathRendering">
      <summary>
            Indicates whether this series type supports fast path rendering
            </summary>
    </member>
    <member name="P:Visiblox.Charts.MultiValueWithFastPathSeriesBase.AllowFastPathRendering">
      <summary>
            Gets or sets whether this series should attempt to use fast rendering mode.  Note that the fast rendering mode is only efficient under a restricted set of circumstances depending on whether hardware or software rendering is used and whether anti-aliasing is enabled or not.  Even if this property is set to true, the implementation is series specific.  Enabling should not change the behaviour of the series in any way other than how it is rendered and potential minor visual differences. This is a Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BoxPlotSeries.Maximum">
      <summary>
            The key to the Y value points which represent the maximum value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BoxPlotSeries.LowerQuartile">
      <summary>
            The key to the Y value points which represent the lower quartile value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BoxPlotSeries.UpperQuartile">
      <summary>
            The key to the Y value points which represent the lower quartile value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BoxPlotSeries.Median">
      <summary>
            The key to the Y value points which represent the median value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BoxPlotSeries.Minimum">
      <summary>
            The key to the Y value points which represent the minimum value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BoxPlotSeries.Points">
      <summary>
            The key to the points fast path element.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BoxPlotSeries.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BoxPlotSeries.IsPointRenderableInternal(Visiblox.Charts.IDataPoint)">
      <summary>
            A BoxPlotSeries point is renderable if its X and maximum/minimum/upper quartile/lower quartile 
            coordinates are renderable by its axes.
            </summary>
      <param name="dataPoint">Data point to check.</param>
      <returns>Whether the point is renderable.</returns>
    </member>
    <member name="M:Visiblox.Charts.BoxPlotSeries.BuildFastPathGeometry">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BoxPlotSeries.RenderDataLabels">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BoxPlotSeries.GetPathGeometry(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BoxPlotSeries.PointDrawn(Visiblox.Charts.IDataPoint,System.Windows.FrameworkElement)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BoxPlotSeries.OnPointRendered(Visiblox.Charts.IDataPoint,System.Windows.FrameworkElement)">
      <summary>
            Raise a PointRendered event if appropriate.
            </summary>
      <param name="dp">The data point to which the event relates.</param>
      <param name="element">The visual representation of the data point.</param>
    </member>
    <member name="M:Visiblox.Charts.BoxPlotSeries.StylePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint,Visiblox.Charts.Primitives.StateSpecificStyle)">
      <summary>
            Styles the point passed in based on the styles in <paramref name="styles" /></summary>
      <param name="point">The visual element to be styled.</param>
      <param name="dataPoint">The data point for which the point is being styled.</param>
      <param name="styles">The cached styles collection from which to retrieve the applicable style.</param>
    </member>
    <member name="M:Visiblox.Charts.BoxPlotSeries.ResolveStyles(System.Windows.Style)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.BoxPlotSeries.StyleFastPathElements(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.BoxPlotSeries.BoxWidthFractionProperty">
      <summary>
            Identifies the BoxWidthFraction Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BoxPlotSeries.WhiskerWidthFractionProperty">
      <summary>
            Identifies the WhiskerWidthFraction Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BoxPlotSeries.PointStyleProperty">
      <summary>
            Identifies the PointStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BoxPlotSeries.PointStrokeProperty">
      <summary>
            Identifies the PointStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BoxPlotSeries.PointStrokeThicknessProperty">
      <summary>
            Identifies the PointStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BoxPlotSeries.PointFillProperty">
      <summary>
            Identifies the PointFill Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.BoxPlotSeries.PointRendered">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.BoxPlotSeries.BoxWidthFraction">
      <summary>
            Gets or sets the enforced width of the body of each box plot point, as a fraction of the calculated width. If this is not set, the width is calculated automatically. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BoxPlotSeries.WhiskerWidthFraction">
      <summary>
            Gets or sets the enforced width of the whiskers' 'feet' for each box plot point, as a fraction of the calculated width, if ShowFeet is set to true. If this is not set, the width is calculated automatically. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BoxPlotSeries.PointStyle">
      <summary>
            Gets or sets the style to be used on the points of the series. The Style should have a TargetType of Path. Fill, Stroke and StrokeThickness setters should not be defined in this style when using the default palette, as they will be overridden by the PointFill, PointStroke and PointStrokeThickness dependency properties defined in this palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BoxPlotSeries.PointStroke">
      <summary>
            Gets or sets the stroke to be used on the points of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BoxPlotSeries.PointStrokeThickness">
      <summary>
            Gets or sets the stroke thickness to be used on the points of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BoxPlotSeries.PointFill">
      <summary>
            Gets or sets the fill to be used on the points of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ChartMultipleSeriesBase">
      <summary>
            ChartMultipleSeriesBase is a specialisation of <see cref="T:Visiblox.Charts.ChartSeriesCommonBase" />,
            to define a chart series whose rendering is dependent upon a set of <see cref="T:Visiblox.Charts.IChartSingleSeries" />
            data series - such as stacked series.
            </summary>
      <remarks>
        <para>
            The <see cref="P:Visiblox.Charts.ChartMultipleSeriesBase.Series" /> dependency property identifies a <see cref="T:Visiblox.Charts.SeriesCollection`1" />
            which contains the <see cref="T:Visiblox.Charts.IChartSingleSeries" /> that are dependent upon each other. ChartMultipleSeriesBase
            listens to the CollectionChanged, DataSeriesCollectionChanged and SeriesPropertyChangedAggregate events of each series in this collection,
            to ensure that all series are invalidated upon a change of one series.
            </para>
        <para>
            ChartMultipleSeriesBase is responsible for overriding the default <see cref="P:Visiblox.Charts.ChartMultipleSeriesBase.XRange" /> and <see cref="P:Visiblox.Charts.ChartMultipleSeriesBase.YRange" /> calculations,
            and instead will return an aggregate range based upon the ranges of each individual <see cref="T:Visiblox.Charts.IChartSingleSeries" />.
            </para>
        <para>The <see cref="P:Visiblox.Charts.ChartMultipleSeriesBase.Palette" /> dependency property identifies a custom palette that can be applied as default styling to the series
            in the <see cref="P:Visiblox.Charts.ChartMultipleSeriesBase.Series" /> collection property.</para>
        <para>
            In order to implement a new multiple series type, it is advised to extend this class, rather than the parent
            <see cref="T:Visiblox.Charts.ChartSeriesCommonBase" />, as this class provides common singular-series functionality that would
            otherwise have to be implemented on each series.
            </para>
        <para>
            The <see cref="P:Visiblox.Charts.ChartMultipleSeriesBase.StackingMode" /> dependency property applies the stacking method that should be applied in a stacking context.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.StackedLineSeries" />
      <seealso cref="T:Visiblox.Charts.StackedColumnSeries" />
      <seealso cref="T:Visiblox.Charts.StackedBarSeries" />
    </member>
    <member name="T:Visiblox.Charts.IChartMultipleSeries">
      <summary>
            IChartMultipleSeries is a specialisation of <see cref="T:Visiblox.Charts.IChartSeries" />.
            A multiple chart series holds a collection of <see cref="T:Visiblox.Charts.IChartSingleSeries" />,
            representing that the drawing of these IChartSingleSeries is dependent upon other series within the IChartMultipleSeries' <see cref="P:Visiblox.Charts.IChartMultipleSeries.Series" />
            property.
            </summary>
      <remarks>
        <para>
            The <see cref="P:Visiblox.Charts.IChartMultipleSeries.Series" /> property of IChartMultipleSeries holds a <see cref="T:Visiblox.Charts.SeriesCollection`1" />.
            The series that are contained in this collection are related. For stackable series, for example, the series are related because their
            render positions are dependent on other series in this collection.
            </para>
        <para>
            The abstract class <see cref="T:Visiblox.Charts.ChartMultipleSeriesBase" /> implements some common functionality, so it is advised that, when implementing
            a new multiple series type, that class is extended rather than implementing this interface directly.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.IChartSeries" />
      <seealso cref="T:Visiblox.Charts.ChartSeriesCommonBase" />
      <seealso cref="T:Visiblox.Charts.ChartMultipleSeriesBase" />
    </member>
    <member name="M:Visiblox.Charts.IChartMultipleSeries.AssociateSeries">
      <summary>
            Associate series in the <see cref="P:Visiblox.Charts.IChartMultipleSeries.Series" /> collection by setting common properties.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IChartMultipleSeries.Series">
      <summary>
            A <see cref="T:Visiblox.Charts.SeriesCollection`1" /> of <see cref="T:Visiblox.Charts.IChartSingleSeries" />,
            whose drawing depends on the other series in the collection.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IChartMultipleSeries.Palette">
      <summary>
            Gets or sets the palette for the series.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IStackedOffsetProvider">
      <summary>
            Represents an offset provider which is to be used to stack <see cref="T:Visiblox.Charts.IChartSeries" />.
            </summary>
      <remarks>
        <para>
            In order to perform stacking, multiple <see cref="T:Visiblox.Charts.IChartSeries" /> are held within the Series property of an <see cref="T:Visiblox.Charts.IChartMultipleSeries" />
            instance, which itself is added to a <see cref="T:Visiblox.Charts.Chart" />'s Series property. IStackedOffsetProvider defines additional behaviour to
            be used when series are rendered within a stacking context.
            </para>
        <para>
            The stacking method to be used for rendering is determined by the <see cref="P:Visiblox.Charts.IStackedOffsetProvider.StackingMode" /> property. IStackedOffsetProvider declares the
            GetOneHundredPercentProportion method for when the StackingMode property is set to StackingMode.HundredPercent. In 100% stacking,
            the base axis value of a data point (X for column and line series, Y for bar series) is not used for stacking - instead the percentage of the sum
            of all base axis values at point is used. This method returns that percentage.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.IChartMultipleSeries" />
      <seealso cref="T:Visiblox.Charts.StackingMode" />
      <seealso cref="T:Visiblox.Charts.StackedBarSeries" />
      <seealso cref="T:Visiblox.Charts.StackedColumnSeries" />
      <seealso cref="T:Visiblox.Charts.StackedLineSeries" />
    </member>
    <member name="M:Visiblox.Charts.IStackedOffsetProvider.GetOneHundredPercentProportion(Visiblox.Charts.IDataPoint)">
      <summary>
            For one-hundred percent stacking, the 'value' of each data point is not its plot position.
            Instead, it is turned into a percentage based on the proportion of its value with respect to other stacked series.
            For a given <see cref="T:Visiblox.Charts.IDataPoint" /> on an <see cref="T:Visiblox.Charts.IStackableChartSeries" />,
            calculate this proportional value, that can be used to calculate the render position of the IDataPoint.
            </summary>
      <param name="dataPoint">The data point to get the proportional value for.</param>
      <returns>The proportional value, represented as a double.</returns>
    </member>
    <member name="P:Visiblox.Charts.IStackedOffsetProvider.StackingMode">
      <summary>
            Gets or sets the property identifying the stacking method used to arrange and render stacked series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.GetPerpendicularAxisOffsetGeometry(Visiblox.Charts.IChartSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.GetBaseAxisOffsetGeometry(Visiblox.Charts.IChartSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.GetBaseAxisOffsetForDataPoint(Visiblox.Charts.IChartSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.#ctor">
      <summary>
            Default Constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.GetLegendItems">
      <inheritdoc />
      <remarks>
            Iterates over all children and adds their legend items.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.GetPerpendicularAxisOffsetForDataPoint(Visiblox.Charts.IChartSeries,Visiblox.Charts.IDataPoint,System.Boolean,System.Boolean)">
      <summary>
            Retrieves for any given data point and any given series the offset on the perpendicular axis to use.
            </summary>
      <param name="series">The series for which to retrieve the offset.</param>
      <param name="dataPoint">The point for which to retrieve the offset.</param>
      <param name="includePoint">If true the point's dimensions will be included in the offset, otherwise only the offset up to the point
            will be returned.</param>
      <param name="withZoom">If true the offset will be returned taking the current axis' zoom into account otherwise a value
            is returned as if the chart were not zoomed.</param>
      <returns>The offset for the data point and series.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.GetPerpendicularAxisOffsetForDataPointAsDataValue(Visiblox.Charts.IChartSeries,Visiblox.Charts.IDataPoint,System.Boolean)">
      <summary>
            For a given IDataPoint on an <see cref="T:Visiblox.Charts.IChartSeries" />, get the position of point
            represented as a data value.
            </summary>
      <param name="series">The series for which to retrieve the offset.</param>
      <param name="dataPoint">The point for which to retrieve the offset.</param>
      <param name="includePoint">If true the point's dimensions will be included in the offset, otherwise only the offset up to the point
            will be returned.</param>
      <returns>The offset value for the specified data point and series.</returns>
      <remarks>This method computes a result that is used by GetPerpendicularAxisOffsetForDataPoint, 
            which simply converts that result to a render position.</remarks>
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.AddPerpendicularOffset(System.IComparable,System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
            Adds an offset to the PerpendicularOffsets dictionary, at the list corresponding to baseAxisValue.
            Default implementation here simply adds the maxValue.
            </summary>
      <param name="baseAxisValue">The base axis value to use as the key into the dictionary.</param>
      <param name="baseValue">The value to store.</param>
      <param name="currentValue">The current value being added.</param>
      <param name="minValue">The minimum value updated to include the newly added value.</param>
      <param name="maxValue">The maximum value updated to include the newly added value.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.GetOneHundredPercentProportion(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.GetSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.GetSideBySideSeries(Visiblox.Charts.BarSeriesType)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.GetSideBySideSeries(Visiblox.Charts.IBarOrColumnSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.GetSideBySideWidth(Visiblox.Charts.IBarOrColumnSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.ResetBarAndColumnCaches">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.GetSingleBarWidth(Visiblox.Charts.IBarOrColumnSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.DataPointAsDouble(Visiblox.Charts.IDataPoint)">
      <summary>
            Helper method to do IComparable - double conversion, throwing an exception if this cannot be done.
            Converts the perpendicular axis value of the dataPoint to a double.
            </summary>
      <param name="dataPoint">The data point for which to attempt conversion.</param>
      <returns>The double value of the data point.</returns>
      <exception cref="T:System.InvalidCastException">Throws an exception if the conversion cannot be undertaken.</exception>
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.GetPerpendicularAxisDataValue(Visiblox.Charts.IDataPoint)">
      <summary>
            Gets the data value for the given data point which corresponds to the series' perpendicular axis.
            </summary>
      <param name="dataPoint">The data point for which to retrieve the perpendicular axis value.</param>
      <returns>The perpendicular axis value.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.GetBaseAxisDataValue(Visiblox.Charts.IDataPoint)">
      <summary>
            Gets the data value for the given data point which corresponds to the series' base axis.
            </summary>
      <param name="dataPoint">The data point for which to retrieve the base axis value.</param>
      <returns>The base axis value.</returns>
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.AreKeyPropertiesNull">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.OnSeriesDataSeriesChanged(Visiblox.Charts.IChartSeries)">
      <summary>
            Called when the DataSeries of a Series has changed, so that concrete
            implementations can perform any necessary updates or recalculations.
            </summary>
      <param name="changedSeries">The modified series.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.OnSeriesAdded(System.Collections.Generic.IEnumerable{Visiblox.Charts.IChartSeries})">
      <summary>
            Called when one or more series is added to the Series collection, to inform any concrete implementations of this change.
            </summary>
      <param name="seriesCollection">The added series.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.OnSeriesRemoved(System.Collections.Generic.IEnumerable{Visiblox.Charts.IChartSeries})">
      <summary>
            Called when one or more series is removed from the Series collection, to inform any concrete implementations of this change.
            </summary>
      <param name="seriesCollection">The removed series.</param>
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.InvalidateBase">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.AssociateSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.ValidateNewSeries">
      <summary>
            Overridden by concrete implementations to validate the contents of the new Series collection.
            This can be used to enforce that only series of a specific type are stored in the Series collection. 
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.ValidateAllSeries">
      <summary>
            Checks to see that all series have the same set of base axis values covered
            and also that (if we're using 100% stacking) that there are no negative data points.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.NoNegativePointsIfOHPStacking">
      <summary>
            Throws an exception if HundredPercent stacking is being used but a data value is negative.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.IsDataSeriesValid">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.GetFirstOrDefault">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ChartMultipleSeriesBase.RenderDataLabels">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.ChartMultipleSeriesBase.PaletteProperty">
      <summary>
            Identifies the Palette Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartMultipleSeriesBase.SeriesProperty">
      <summary>
            Identifies the Series Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartMultipleSeriesBase.StackingModeProperty">
      <summary>
            Identifies the StackingMode Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ChartMultipleSeriesBase.DataValidationEnabledProperty">
      <summary>
            Identifies the DataValidationEnabled Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartMultipleSeriesBase.DataChangedSinceLastValidation">
      <summary>
            True if any of the data being plotted in the underlying series have changed at all.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartMultipleSeriesBase.SeriesContainer">
      <summary>
            The Grid in which Series are added to and plotted on.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartMultipleSeriesBase.OneHundredPercentTotals">
      <summary>
            A cache of the totals for each X value (which will be a category).
            This is used for 100% stacking to reduce the amount of recalculation of totals needed.
            This dictionary is updated in response to changes in DependentSeries.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartMultipleSeriesBase.PerpendicularOffsets">
      <summary>
            This maps from base axis data values to a list of perpendicular offsets to the tops of columns.  
            The i-th member of the list specifies the offset to the base of the i-th point at that value.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartMultipleSeriesBase.XRange">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ChartMultipleSeriesBase.YRange">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ChartMultipleSeriesBase.Palette">
      <summary>
            Gets or sets the chart Palette. <see cref="P:Visiblox.Charts.ChartMultipleSeriesBase.Series" /> styles are determined based on this palette if no explicit styling is applied to them. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartMultipleSeriesBase.Series">
      <summary>
            Gets or sets the collection of chart series whose drawing depends on the other series in the collection. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartMultipleSeriesBase.StackingMode">
      <summary>
            Gets or sets the property relating to the stacking method used to draw contained series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ChartMultipleSeriesBase.DataValidationEnabled">
      <summary>
            Gets or sets whether data is validated before rendering or not. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Discontinuities">
      <summary>
            A compact representation of which indices in the DataSeries are renderable or not, these are stored in a sorted list of
            IndexDiscontinuity objects which represent and index and consecutive length of non-renderable points.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Discontinuities.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Discontinuities.SetRenderStatus(System.Boolean,System.Int32)">
      <summary>
            Sets the render status of a given (single) DataPoint.
            </summary>
      <param name="isNotRenderable">true iff the point <b>cannot</b> be rendered.</param>
      <param name="index">the index (into the DataSeries) of the item we're considering.</param>
    </member>
    <member name="M:Visiblox.Charts.Discontinuities.NonRenderableUpTo(System.Int32)">
      <summary>
            Returns the number of non-renderable points before the provided index.  
            Behaves as defined if the index-th point is renderable; if it isn't then ignores the non-renderable region the DataPoint is in.
            </summary>
      <param name="index">The index to count non-renderable points up to.</param>
      <returns>The number of DataPoints prior to this one that cannot be rendered.</returns>
    </member>
    <member name="M:Visiblox.Charts.Discontinuities.IsNonRenderable(System.Int32)">
      <summary>
            Use to determine whether a given index in the DataSeries can be rendered and therefore whether it makes sense to try to work out which 
            <see cref="T:System.Windows.Point" /> it corresponds to in the geometry.
            </summary>
      <param name="index">The index to test the data point at.</param>
      <returns>True if the the DataPoint at the index-th position is NOT renderable and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.Discontinuities.Insert(System.Boolean,System.Int32)">
      <summary>
            Inserts a point such that afterwards the index-th point is this added one (and the total length is greater by one).
            </summary>
      <param name="isNotRenderable">True if the the DataPoint at the index-th position 
            is NOT renderable i.e. within a discontinuity and false otherwise.</param>
      <param name="index">The index at which to insert.</param>
    </member>
    <member name="M:Visiblox.Charts.Discontinuities.Remove(System.Int32)">
      <summary>
            Removes the element at the given index.
            </summary>
      <param name="index">A zero-based index into the DataSeries saying which DataPoint is being removed.</param>
    </member>
    <member name="M:Visiblox.Charts.Discontinuities.Clear">
      <summary>
            Clear the sorted list.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IndexDiscontinuity">
      <summary>
            Represents a contiguous range of indices (into the DataSeries) for points that can't be rendered 
            (given the current discontinuities in the axes used).
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IndexDiscontinuity.#ctor(System.Int32,System.Int32)">
      <summary>
            The main constructor.
            </summary>
      <param name="index">The index at which this discontinuity starts.</param>
      <param name="length">The length of the discontinuity (defaults to 1).</param>
    </member>
    <member name="P:Visiblox.Charts.IndexDiscontinuity.Index">
      <summary>
            The starting index of the gap.  Assumes a zero-based index, i.e. &gt;= 0.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IndexDiscontinuity.Length">
      <summary>
            The length of the gap.  Must be greater than or equal to zero (the handling of zero length gaps is left to client code).
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DataLabelPosition">
      <summary>
            The various places in which a data label can be put, relative to the data point.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DataLabelPosition.Top">
      <summary>
            Directly above the point, centred.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DataLabelPosition.Bottom">
      <summary>
            Directly below the point, centred.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DataLabelPosition.Left">
      <summary>
            Directly to the left, centred vertically.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DataLabelPosition.Right">
      <summary>
            Directly to the right, centred vertically.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ColumnSeries">
      <summary>
            Represents a column series.
            </summary>
      <remarks>
            BarSeries is essentially the same as <see cref="T:Visiblox.Charts.ColumnSeries" /> but with vertical bars. See <see cref="T:Visiblox.Charts.BarOrColumnSeriesBase" />.
            </remarks>
      <seealso cref="T:Visiblox.Charts.BarOrColumnSeriesBase" />
      <seealso cref="T:Visiblox.Charts.BarSeries" />
    </member>
    <member name="M:Visiblox.Charts.ColumnSeries.#ctor">
      <summary>
            Creates a column series.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DataLabel">
      <summary>
            Simple labels associated with data points indicating their value in a given (series-specific) axis.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DataLabel.#ctor">
      <summary>
            Constructs a new DataLabel.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DataLabel.#ctor(System.Int32,System.Int32)">
      <summary>
            A constructor that lets you set the minimum font size.
            </summary>
      <param name="minFontSize">
      </param>
      <param name="maxFontSize">
      </param>
    </member>
    <member name="M:Visiblox.Charts.DataLabel.AdjustFontSize">
      <summary>
            Clears the FontSize so that any value set in the style/implicitly is used.  
            If this means the text would wrap, reduce the FontSize up to the minimum provided.  
            Failing that, let the text wrap (and use the minimum size).
            </summary>
      <returns>The font size that will be used for this label.</returns>
    </member>
    <member name="M:Visiblox.Charts.DataLabel.MeasureOverride(System.Windows.Size)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DataLabel.ArrangeOverride(System.Windows.Size)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.DataLabel.BorderStyleProperty">
      <summary>
            Identifies the BorderStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DataLabel.TextStyleProperty">
      <summary>
            Identifies the TextStyle Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DataLabel.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.DataLabel.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.DataLabel.LabelText">
      <summary>
            Gets or sets the label's text.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DataLabel.BorderStyle">
      <summary>
            Gets or sets the style of the label's border, target type should be Border. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DataLabel.TextStyle">
      <summary>
            Gets or sets the style of the label's text, target type should be TextBlock. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.DataLabel.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DataLabelHelper">
      <summary>
            This helper class should encapsulate all the commonalities between the chart series that allow data labels (i.e. implementations of <see cref="T:Visiblox.Charts.IDataLabelAware" />).
            It is called by series that want labels and should call them back for series-specific stuff.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DataLabelHelper.NUMBER_OF_PLACEMENT_OPTIONS">
      <summary>
            The number of possible positions for the data label currently supported.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DataLabelHelper.RenderLabel(Visiblox.Charts.IDataLabelAware,Visiblox.Charts.IDataPoint,System.Int32)">
      <summary>
            Produces data label(s) for the data point provided.  The method will call back to the series for styling and positioning information.
            </summary>
      <param name="series">The series for which data labels are being rendered.</param>
      <param name="dataPoint">The data point for which to render data label(s).</param>
      <param name="dataPointIndex">The index of the data point to render.</param>
    </member>
    <member name="M:Visiblox.Charts.DataLabelHelper.FormatDataValue(Visiblox.Charts.IAxisCommon,System.String,System.IComparable)">
      <summary>
            Formats the given <paramref name="dataValue" /> with <paramref name="formatString" /> if possible, 
            but with <paramref name="axis" /> formatting otherwise.  
            </summary>
      <param name="axis">
      </param>
      <param name="formatString">
      </param>
      <param name="dataValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Visiblox.Charts.DataLabelHelper.GetCorrectFormatString(System.String)">
      <summary>
            Takes a format string and returns an equivalent string that can be
            used directly in <c>string.Format()</c>.
            </summary>
      <param name="originalFormatString">The format string to be corrected.</param>
      <returns>The processed format string.</returns>
    </member>
    <member name="M:Visiblox.Charts.DataLabelHelper.ComputeRotatingTransform(Visiblox.Charts.DataLabel,System.Double,System.Windows.Media.TranslateTransform)">
      <summary>
            Computes a TranslateTransform that will rotate the position of the data label in an attempt to avoid collision.
            </summary>
      <param name="label">The label to move the position of.</param>
      <param name="labelDistance">The distance from the data point render position at which to place the label.</param>
      <param name="currentTranslation">The current translate being applied.</param>
      <returns>A new revised translate which attempts to move the label into a non-colliding position.</returns>
    </member>
    <member name="M:Visiblox.Charts.DataLabelHelper.ComputeRenderTransform(Visiblox.Charts.DataLabel,Visiblox.Charts.DataLabelPosition,System.Double)">
      <summary>
            Given a target, relative label position and a distance, this method returns a TranslateTransform that will achieve that.
            </summary>
      <param name="label">The label to move the position of.</param>
      <param name="labelPosition">The position to translate to.</param>
      <param name="labelDistance">The distance from the data point render position at which to place the label.</param>
      <returns>The computed transform.</returns>
    </member>
    <member name="T:Visiblox.Charts.ErrorBarSeries">
      <summary>
            Represents an Error Bar series where each point has a High and a Low and a BarWidth.  
            </summary>
      <remarks>
            ErrorBar is rendered as a vertical line from low to high, with horizontal lines on across the top and bottom
            </remarks>
      <seealso cref="T:Visiblox.Charts.ChartSeriesCommonBase" />
    </member>
    <member name="F:Visiblox.Charts.ErrorBarSeries.Maximum">
      <summary>
            The key to the Y value which represent the Maximum value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ErrorBarSeries.Minimum">
      <summary>
            The key to the Y value which represent the Minimum value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ErrorBarSeries.Points">
      <summary>
            The key to the points fast path element.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ErrorBarSeries.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ErrorBarSeries.CreatePointInteractionHelper(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ErrorBarSeries.UpdatePointInteractionHelper(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ErrorBarSeries.BuildFastPathGeometry">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ErrorBarSeries.IsPointRenderableInternal(Visiblox.Charts.IDataPoint)">
      <summary>
            A Error Bar series point is renderable if its X and maximum/minimum coordinates are renderable by its axes.
            </summary>
      <param name="dataPoint">Data point to check.</param>
      <returns>True if the point is renderable and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.ErrorBarSeries.PointDrawn(Visiblox.Charts.IDataPoint,System.Windows.FrameworkElement)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ErrorBarSeries.OnPointRendered(Visiblox.Charts.IDataPoint,System.Windows.FrameworkElement)">
      <summary>
            Raise a PointRendered event if appropriate.
            </summary>
      <param name="dp">The data point to which the event relates.</param>
      <param name="element">The visual representation of the data point.</param>
    </member>
    <member name="M:Visiblox.Charts.ErrorBarSeries.GetPathGeometry(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ErrorBarSeries.RenderDataLabels">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ErrorBarSeries.StylePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint,Visiblox.Charts.Primitives.StateSpecificStyle)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ErrorBarSeries.ResolveStyles(System.Windows.Style)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ErrorBarSeries.StyleFastPathElements(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.ErrorBarSeries.BarWidthFractionProperty">
      <summary>
            Identifies the BarWidthFraction Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ErrorBarSeries.LineStyleProperty">
      <summary>
            Identifies the LineStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ErrorBarSeries.LineStrokeProperty">
      <summary>
            Identifies the LineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.ErrorBarSeries.LineStrokeThicknessProperty">
      <summary>
            Identifies the LineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.ErrorBarSeries.PointRendered">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ErrorBarSeries.BarWidthFraction">
      <summary>
            Gets or sets the enforced width of the top and bottom lines of the bar, as a fraction of the calculated width. If this is not set, the width is calculated automatically. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ErrorBarSeries.LineStyle">
      <summary>
            Gets or sets the style used for Error Bar points. The Style should have a TargetType of Path. Stroke and StrokeThickness setters should not be defined in this style when using the default palette, as they will be overridden by the LineStroke and LineStrokeThickness dependency properties defined in this palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ErrorBarSeries.LineStroke">
      <summary>
            Gets or sets the stroke used for Error Bar points. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ErrorBarSeries.LineStrokeThickness">
      <summary>
            Gets or sets the stroke thickness used for Error Bar points. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IDependentChartSeries">
      <summary>
            Interface for series that depend on the other series within the same chart when drawing themselves.
            </summary>
      <remarks>An example is stacked bar series: in order to plot the next stacked bar part, the series has to know
            where the previous series where plotted in order to draw on top of them.</remarks>
      <seealso cref="T:Visiblox.Charts.BarOrColumnSeriesBase" />
    </member>
    <member name="P:Visiblox.Charts.IDependentChartSeries.ChartSeriesCollection">
      <summary>
            Gets or sets the other series that are plotted on the same chart.
            </summary>
      <remarks>This property is set by the chart and used by the dependent chart series.</remarks>
    </member>
    <member name="T:Visiblox.Charts.LineSeries">
      <summary>
            Represents a line series.
            </summary>
      <remarks>
        <para>
            A LineSeries by default consists of straight lines connecting its data points. To indicate the location
            of each data point, the <see cref="P:Visiblox.Charts.LineSeries.ShowPoints" /> property can be set to <c>true</c>, or to fill in the area below the line
            the <see cref="P:Visiblox.Charts.LineSeries.ShowArea" /> property can be set to <c>true</c>. It is also possible to set the <see cref="P:Visiblox.Charts.LineSeries.ShowLine" /> property
            to <c>false</c> to disable the connecting lines (a scatter chart effect can be created by turning lines off and points on).
            </para>
        <para>
            If <see cref="P:Visiblox.Charts.LineSeries.ShowPoints" /> is true, LineSeries supports selection of points.
            </para>
        <para>
            The OffsetProvider property identifies that LineSeries implements <see cref="T:Visiblox.Charts.IStackableChartSeries" />
            and can therefore be used in a stacking context. This property is set to the containing <see cref="T:Visiblox.Charts.IChartMultipleSeries" />,
            such as <see cref="T:Visiblox.Charts.StackedLineSeries" />to perform offset calculations and apply them during rendering.
            It is not necessary to set this property.
            </para>
        <para>
            In order to render the areas of stacked line series, the CloseEndPoints method will call either CloseEndPointsAtBase, or CloseEndPointsAtLine,
            depending upon the position of a Line Series within the stack. These alter the area PathFigure to ensure it only fills the correct amount of space.
            CloseEndPointsAtBase and CloseEndPointsAtLine can be overridden, if necessary, should the path of a line not be a direct straight line.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.ChartSeriesCommonBase" />
      <seealso cref="T:Visiblox.Charts.SplineSeries" />
    </member>
    <member name="M:Visiblox.Charts.LineSeries.RenderDataLabels">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LineSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LineSeries.InitInternal">
      <inheritdoc />
      <remarks>Subscribes to ActualRange PropertyChanged events.</remarks>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.DeInitInternal">
      <inheritdoc />
      <remarks>Un-subscribes from ActualRange PropertyChanged events.</remarks>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.InvalidateInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LineSeries.DrawAreas(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem})">
      <summary>
            Draws individual areas on the canvas.
            </summary>
      <param name="points">The points to draw.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.DrawArea(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem})">
      <summary>
            Draws an area on the canvas.
            </summary>
      <param name="points">The points to draw.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.CreateAreaPath(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem})">
      <summary>
            Create the actual path object for an area.
            </summary>
      <param name="points">The data points defining the path.</param>
      <returns>The newly created path object.</returns>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.SpecializeAreaPath(System.Windows.Shapes.Path,System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem})">
      <summary>
            Add specialisation to the area path, such as event handlers, hit testing, etc.
            </summary>
      <param name="areaPath">The path to specialise.</param>
      <param name="points">The data points defining the path.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.BuildLinesGeometries(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem})">
      <summary>
            Build lines geometries - used for stacking.
            </summary>
      <param name="points">The points to build the geometry for.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.BuildLineGeometry(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem})">
      <summary>
            Draws a line on the canvas.
            </summary>
      <param name="points">The points to build the geometry for.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.DrawLines(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem})">
      <summary>
            Draw individual lines.
            </summary>
      <param name="points">The points to draw.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.DrawLine(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem})">
      <summary>
            Draws a line on the canvas.
            </summary>
      <param name="points">The points to draw.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.CreateLinePath(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem})">
      <summary>
            Create the actual path object describing the line.
            </summary>
      <param name="points">The data points describing the geometry.</param>
      <returns>The path object created.</returns>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.SpecializeLinePath(System.Windows.Shapes.Path,System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem})">
      <summary>
            Add specialization to the line path, such as event handlers, hit testing, etc.
            </summary>
      <param name="linePath">The line path to be specialised.</param>
      <param name="points">The data points describing the path.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.CreatePoint(Visiblox.Charts.IDataPoint)">
      <summary>
            Creates the visual representation of the <paramref name="dataPoint" /> logical point.
            </summary>
      <param name="dataPoint">The logical point.</param>
      <returns>The visual element to be plotted on the screen.</returns>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.UpdatePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <summary>
            Updates the visual element <paramref name="point" /> that is the representation of the logical point <paramref name="dataPoint" />.
            </summary>
      <param name="point">The physical representation of the point.</param>
      <param name="dataPoint">The visual element.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.DrawPoints(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem})">
      <summary>
            Draws the points of the line series on the canvas.
            </summary>
      <param name="points">The data points to draw.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.DrawPoint(Visiblox.Charts.LineSeries.DataPointItem,Visiblox.Charts.Primitives.UniqueAndNotNullShadowedObservableCollection{System.Object},Visiblox.Charts.SelectionMode)">
      <summary>
            Adds a data point to the chart.
            </summary>
      <param name="combinedPoint">The point to draw.</param>
      <param name="selectedItems">Cached to avoid repeatedly hitting the Dependency Property.</param>
      <param name="selectionMode">Cached to avoid repeatedly hitting the Dependency Property.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.CreateDataPointElement(Visiblox.Charts.LineSeries.DataPointItem,System.Windows.FrameworkElement)">
      <summary>
            First half of the point drawing process - create the point if it doesn't exist and add it to the DataPoints collections.
            </summary>
      <param name="combinedPoint">The point to create.</param>
      <param name="selectionHelper">The visual element which is to handle mouse events for selection.</param>
      <returns>True if the point was created and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.SpecializeDataPoint(System.Windows.FrameworkElement,Visiblox.Charts.LineSeries.DataPointItem,System.Boolean,Visiblox.Charts.SelectionMode,System.Windows.FrameworkElement)">
      <summary>
            Second half of the point drawing process - setup the ToolTip, add the point to the canvas and setup Mouse handling events.
            </summary>
      <param name="dataPointElement">The visual data point.</param>
      <param name="combinedPoint">The point to create.</param>
      <param name="pointOnCanvas">True if the point is already on the canvas and false otherwise.</param>
      <param name="selectionMode">Cached to avoid repeatedly hitting the Dependency Property.</param>
      <param name="selectionHelper">The visual element which is to handle mouse events for selection.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.GetOrAddDataLabels(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LineSeries.InitializeDataLabels(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LineSeries.SpecializeLabel(Visiblox.Charts.IDataPoint)">
      <summary>
            Places labels on the point they're labelling and then moves them according to the LabelDistance and LabelPosition Dependency Properties.
            </summary>
      <param name="dataPoint">The data point for which to specialise the label.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.AddDataLabelToRootZoomCanvas(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LineSeries.LayoutDataLabel(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LineSeries.OnPointCreated(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <summary>
            Called when a new data point element has been created.
            </summary>
      <param name="point">The physical point.</param>
      <param name="dataPoint">The logical point.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.GetCenterTransform(System.Windows.FrameworkElement)">
      <summary>
            Gets the transform that will move the point to the centre location.
            </summary>
      <param name="visualPoint">The physical point to position.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.AddDataPoint(Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LineSeries.UpdateDataPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LineSeries.AddDataPointToGeometry(System.Windows.Media.PathGeometry,System.Windows.Point,System.Int32,System.Boolean)">
      <summary>
            Adds a new point to the provided geometry.
            </summary>
      <param name="geometry">The geometry to modify.</param>
      <param name="renderPoint">The point to be added.</param>
      <param name="dataSeriesIndex">The index of the point being added in the data series.</param>
      <param name="closed">True if the path is a closed shape or false otherwise.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.CloseEndPoints(System.Windows.Media.PathFigure,System.Boolean)">
      <summary>
            Close the end points of the line path figure to create the correct area.
            Depending upon if stacking is performed, the area will either close at its 'previous' series, or at the x axis base.
            </summary>
      <param name="figure">The current PathFigure, to whom these additional points will be given.</param>
      <param name="add">Should the additional points be added? If false, will replace points instead.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.CountEndPoints(System.Windows.Media.PathFigure,System.Boolean)">
      <summary>
            Count the end points of the line path figure of the area.
            Depending upon if stacking is performed, the area will either close at its 'previous' series, or at the x axis base.
            </summary>
      <param name="figure">The current PathFigure, to whom these additional points will be given.</param>
      <param name="closed">Is the PathGeometry closed off?</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.CloseEndPointsAtLine(System.Windows.Media.PathFigure,System.Boolean,System.Windows.Media.PathGeometry)">
      <summary>
            Close off the line at the boundaries of the points given in the points collection.
            </summary>
      <remarks>
        <para>
            When extending LineSeries, consider overriding the functionality of this method if the line drawing is not a straight line.
            </para>
      </remarks>
      <param name="figure">The PathFigure containing the area geometry.</param>
      <param name="add">
        <c>True</c> if new points should be added to the figure, <c>false</c> if they should replace existing geometry.</param>
      <param name="boundaryGeometry">The PointCollection representing the boundary of another series.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.CloseEndPointsAtBase(System.Windows.Media.PathFigure,System.Boolean)">
      <summary>
            Close off the line by going down to the X axis base (x = 0).
            </summary>
      <remarks>
        <para>
            When extending LineSeries, consider overriding the functionality of this method if the line drawing is not a straight line.
            </para>
      </remarks>
      <param name="figure">The PathFigure containing the area geometry.</param>
      <param name="add">
        <c>true</c> if new points should be added to the figure, <c>false</c> if they should replace existing geometry.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.GetLineGeometry">
      <summary>
            Get the points on this line as a PointCollection.
            </summary>
      <returns>The line geometry.</returns>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.GetAreaGeometry">
      <summary>
            Get the points on this line as a PointCollection.
            </summary>
      <returns>The area geometry.</returns>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.RemoveDataPoint(Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LineSeries.RemoveLabelsForDataPoint(Visiblox.Charts.IDataPoint)">
      <summary>
            Removes any labels associated with <paramref name="dataPoint" />.
            </summary>
      <param name="dataPoint">
      </param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.RemoveDataPointFromGeometry(System.Windows.Media.PathGeometry,System.Int32,System.Boolean)">
      <summary>
            Remove a data point from the geometry.
            </summary>
      <param name="geometry">The path geometry from which to remove the point.</param>
      <param name="dataSeriesIndex">The index in the data series corresponding to the point to remove.</param>
      <param name="closed">True if the path is a closed shape or false otherwise.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.BuildGeometry(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem},System.Boolean)">
      <summary>
            Builds a path geometry for the associated DataSeries.
            </summary>
      <remarks>
        <para>
            When extending LineSeries, consider overriding the functionality of this method if the line drawing is not a straight line.
            </para>
      </remarks>
      <param name="points">The points to construct a PathGeometry from.</param>
      <param name="closed">Should the PathGeometry be closed off?</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.ConvertDataSeriesIndexToGeometryIndex(System.Int32)">
      <summary>
            Given an index into the DataSeries, this returns an index into the path geometry.  
            It assumes that the index-th DataPoint appears in the geometry so you should check for this using <see cref="M:Visiblox.Charts.Discontinuities.IsNonRenderable(System.Int32)" />.
            </summary>
      <param name="dataSeriesIndex">An index into the DataSeries.</param>
      <returns>An index into the path geometry for the <see cref="T:System.Windows.Point" /> corresponding to the given data point.</returns>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.AddDataPointToArea(System.Windows.Media.PathGeometry,System.Windows.Point,System.Int32)">
      <summary>
            Adds the given data point to a pre-existing area path.
            </summary>
      <param name="areaGeometry">The area path to which to add the point.</param>
      <param name="renderPoint">The point to add.</param>
      <param name="index">The index at which to add the point.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.AddDataPointToLine(System.Windows.Media.PathGeometry,System.Windows.Point,System.Int32)">
      <summary>
            Adds the given data point to a pre-existing line series path.
            </summary>
      <param name="lineGeometry">The line path to which to add the point.</param>
      <param name="renderPoint">The point to add.</param>
      <param name="index">The index at which to add the point.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.GetRenderPositionsForDataPoints">
      <summary>
            Returns a list of points that should be considered when invalidating this series.
            Strips out any invalid points using Double.NaN as the value.
            </summary>
      <returns>The render positions for the data points.</returns>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.GetDataPointSharingBaseAxisDataValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LineSeries.GetBaseRange">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LineSeries.GetBaseAxisValuesUsed">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LineSeries.RefreshBaseAxisValuesUsed">
      <summary>
            Called in the event of a Reset event on the DataSeries
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.CalculateSuggestedPointWidth">
      <inheritdoc />
      <remarks>
            The line series makes no use of SuggestedPointWidth so overrides to avoid doing unnecessary work.  Will always return 0.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.OnPointRendered(Visiblox.Charts.IDataPoint,System.Windows.FrameworkElement)">
      <summary>
            Raise a PointRendered event if appropriate.
            </summary>
      <param name="dataPoint">The data point for the point which was rendered.</param>
      <param name="frameworkElement">The render element for that point.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.StylePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <summary>
            Determine which styling should be applied to the given point.
            </summary>
      <param name="point">The point to style.</param>
      <param name="dataPoint">The data point associated with the point being styled.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.StyleDataLabel(Visiblox.Charts.IDataPoint,System.Int32)">
      <summary>
            Determine which styling should be applied to the data labels of the given point
            </summary>
      <param name="dataPoint">
      </param>
      <param name="index">
      </param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.StylePath(System.Windows.Shapes.Path,System.Boolean)">
      <summary>
            Determine which styling should be applied to the path.
            </summary>
      <param name="element">The path to style.</param>
      <param name="isLine">True if the path is a line and false otherwise.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.StylePoint(System.Windows.FrameworkElement,Visiblox.Charts.Primitives.StateSpecificStyle)">
      <summary>
            Apply the <paramref name="styles" /> to the <paramref name="point" />.
            </summary>
      <param name="point">The physical element to be styled.</param>
      <param name="styles">The styles to apply.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.StyleDataLabel(Visiblox.Charts.IDataPoint,Visiblox.Charts.Primitives.StateSpecificStyle)">
      <summary>
            Apply the <paramref name="styles" /> to data labels of the <paramref name="dataPoint" />.
            </summary>
      <param name="dataPoint">The data point for which to style the labels.</param>
      <param name="styles">The style cache from which to get the style to apply.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.StylePath(System.Windows.Shapes.Path,System.Boolean,Visiblox.Charts.Primitives.StateSpecificStyle)">
      <summary>
            Apply the <paramref name="styles" /> to the <paramref name="element" />.
            </summary>
      <param name="element">The path to be styled.</param>
      <param name="isLine">True if the path is a line and false otherwise.</param>
      <param name="styles">The styles to apply.</param>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.UpdateSeriesHighlighting">
      <summary>
            Invoked when the selection helper line path receives the MouseEnter event.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.ResolveStyles(System.Windows.Style)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LineSeries.ApplyStyleToExistingElements">
      <summary>
            Applies a given set of cached line/area/point styles to elements already existing on the zoom canvas.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.ApplyStyleToPoints">
      <summary>
            Style each point.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.ApplyStyleToDataLabels">
      <summary>
            Style each data label.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.ApplyStyleToLinePaths">
      <summary>
            Style each line path.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.ApplyStyleToAreaPaths">
      <summary>
            Style each area path.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.ShowPointsProperty">
      <summary>
            Identifies the ShowPoints Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.ShowLineProperty">
      <summary>
            Identifies the ShowLine Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.ShowAreaProperty">
      <summary>
            Identifies the ShowArea Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.AreaBaseAxisProperty">
      <summary>
            Identifies the AreaBaseAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.AreaBaseValueProperty">
      <summary>
            Identifies the AreaBaseValue Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.LineStyleProperty">
      <summary>
            Identifies the LineStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.PointStyleProperty">
      <summary>
            Identifies the PointStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.AreaStyleProperty">
      <summary>
            Identifies the AreaStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.PointFillProperty">
      <summary>
            Identifies the PointFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.PointStrokeProperty">
      <summary>
            Identifies the PointStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.PointStrokeThicknessProperty">
      <summary>
            Identifies the PointStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.PointSizeProperty">
      <summary>
            Identifies the PointSize Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.LineStrokeProperty">
      <summary>
            Identifies the LineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.LineStrokeThicknessProperty">
      <summary>
            Identifies the LineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.AreaFillProperty">
      <summary>
            Identifies the AreaFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.SelectionHelperLineThicknessProperty">
      <summary>
            Identifies the SelectionHelperLineThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.PointShapeProperty">
      <summary>
            Identifies the PointShape Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.LabelStyleProperty">
      <summary>
            Identifies the LabelStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.LabelFormatStringProperty">
      <summary>
            Identifies the LabelFormatString Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.ShowDataLabelsProperty">
      <summary>
            Identifies the ShowDataLabels Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.LabelPositionProperty">
      <summary>
            Identifies the LabelPosition Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.LabelDistanceProperty">
      <summary>
            Identifies the LabelDistance Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.LineSeries.PointRendered">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.LineSeries.LinePaths">
      <summary>
             The line series path objects, created once and then updated.  This list will only ever contain
             one path in the base implementation but may be populated with more paths by specialisations of the LineSeries.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.AreaPaths">
      <summary>
             The area path objects, created once and then updated.  This list will only ever contain
             one path in the base implementation but may be populated with more paths by specialisations of the LineSeries.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.BaseValue">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.LineSeries.YRange">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.LineSeries.ShowPoints">
      <summary>
            Gets or sets whether the points are plotted on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.ShowLine">
      <summary>
            Gets or sets whether the line is plotted on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.ShowArea">
      <summary>
            Gets or sets whether the area is plotted on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.AreaBaseAxis">
      <summary>
            Gets or sets which axis to fill to when ShowArea is set to True. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.AreaBaseValue">
      <summary>
            Gets or sets the value to which to extend the fill when ShowArea is True. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.LineStyle">
      <summary>
            Gets or sets the line style. The Style should have a TargetType of Path. Stroke and StrokeThickness setters should not be defined in this style when using the default palette, as they will be overridden by the LineStroke and LineStrokeThickness dependency properties defined in this palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.PointStyle">
      <summary>
            Gets or sets the point style. The Style should have a TargetType of Shape. Fill, Stroke and StrokeThickness setters should not be defined in this style when using the default palette, as this will be overridden by the PointFill, PointStroke and PointStrokeThickness dependency properties defined in this palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.AreaStyle">
      <summary>
            Gets or sets the area style. The Style should have a TargetType of Path. Fill setter should not be defined in this style when using the default palette, as this will be overridden by the AreaFill dependency property defined in this palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.PointFill">
      <summary>
            Gets or sets the brush used for filling a point on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.PointStroke">
      <summary>
            Gets or sets the brush used for stroking the path of a point on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.PointStrokeThickness">
      <summary>
            Gets or sets the thickness used for stroking the path of a point on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.PointSize">
      <summary>
            Gets or sets the size (width and height) of a point on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.LineStroke">
      <summary>
            Gets or sets the brush used to draw a line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.LineStrokeThickness">
      <summary>
            Gets or sets the thickness of a the drawn line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.AreaFill">
      <summary>
            Gets or sets the brush used for filling the area on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.SelectionHelperLineThickness">
      <summary>
            Gets or sets the thickness of the invisible line around the series line path that helps selection. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.PointShape">
      <summary>
            Gets or sets the the shape to draw for points on this line series if ShowPoints is true. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.LabelStyle">
      <summary>
            Gets or sets the text style applied to any data labels.  TargetType should be DataLabel. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.LabelFormatString">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.LineSeries.ShowDataLabels">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.LineSeries.LabelPosition">
      <summary>
            Gets or sets the position of the label relative to the point associated with it. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeries.LabelDistance">
      <summary>
            Gets or sets the distance between the data point and and data label associated with it. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.LineSeries.DataPointItem">
      <summary>
            Internal class for representing a render point
            and its associated IDataPoint.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.DataPointItem.RenderPoint">
      <summary>
            The point to be rendered.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeries.DataPointItem.DataPoint">
      <summary>
            The Data point this item represents.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LineSeries.DataPointItem.#ctor(System.Windows.Point,Visiblox.Charts.IDataPoint)">
      <summary>
            Creates a DataPointItem.
            </summary>
      <param name="dataPoint">Data point for which to associate the visual element.</param>
      <param name="renderPoint">Render point associated with <paramref name="dataPoint" />.</param>
    </member>
    <member name="T:Visiblox.Charts.NullHandlingMode">
      <summary>
            Defines the various handling modes that can be used to handle null data points.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.NullHandlingMode.Skip">
      <summary>
            Ignores the null data points.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.NullHandlingMode.Gap">
      <summary>
            Leaves a gap where null data points are placed.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.NullHandlingMode.Styled">
      <summary>
            Applies a custom style - you need to provide a style by setting the NullHandlingStyle Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.SelectionMode">
      <summary>
            Defines supported point selection modes for <see cref="T:Visiblox.Charts.IChartSeries" />.
            </summary>
      <seealso cref="T:Visiblox.Charts.IChartSeries" />
    </member>
    <member name="F:Visiblox.Charts.SelectionMode.None">
      <summary>
            Series does not allow any form of selection.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.SelectionMode.SinglePoint">
      <summary>
            Series allows selection of a single point.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.SelectionMode.MultiplePoints">
      <summary>
            Series allows selection of a multiple points.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.SelectionMode.Series">
      <summary>
            Series allows whole-series selection.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.SeriesCollection`1">
      <summary>
            Represents an observable collection which forwards DataSeriesCollectionChanged events for the 
            <see cref="T:Visiblox.Charts.IChartSeries" /> instances which it contains.
            </summary>
      <remarks>
        <see cref="T:Visiblox.Charts.Chart" /> uses this class as its <see cref="P:Visiblox.Charts.Chart.Series" /> member
            to relay the DataSeriesCollectionChanged events for its series.
            </remarks>
      <seealso cref="P:Visiblox.Charts.Chart.Series" />
      <seealso cref="T:Visiblox.Charts.IChartSeries" />
    </member>
    <member name="M:Visiblox.Charts.SeriesCollection`1.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.SeriesCollection`1.Init(System.Windows.Controls.Grid)">
      <summary>
            Initializes the series collection.
            </summary>
      <param name="element">The Grid object that will be the root element in the visual tree of the series collection.</param>
    </member>
    <member name="M:Visiblox.Charts.SeriesCollection`1.DeInit">
      <summary>
            De-initializes the series collection.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.SeriesCollection`1.DoInvalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SeriesCollection`1.OnDataSeriesCollectionChanged(System.Object,System.EventArgs)">
      <summary>
            Raises the DataSeriesCollectionChanged event.
            </summary>
      <param name="sender">The sender - which is the IChartSeries that has changed.</param>
      <param name="e">The notify event.</param>
    </member>
    <member name="P:Visiblox.Charts.SeriesCollection`1.Palette">
      <summary>
            Gets or sets the palette used by all series.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.SeriesCollection`1.DataSeriesCollectionChanged">
      <summary>
        <para>
             Occurs when the DataSeries collection changes, see <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" />.
            </para>
        <para>
             The sender will be the IChartSeries that has changed.
            </para>
      </summary>
    </member>
    <member name="E:Visiblox.Charts.SeriesCollection`1.SeriesPropertyChangedAggregate">
      <summary>
            Occurs when any of the series' property changes.
            </summary>
      <remarks>
            The sender will be the IChartSeries that has raised the PropertyChanged event.
            </remarks>
    </member>
    <member name="T:Visiblox.Charts.SeriesRenderManager">
      <summary>
             Implementations of <see cref="T:Visiblox.Charts.IChartSeries" /> that provide FastPathRendering should hold a reference to an instance of this class.  
            
             Properties that affect whether fast-path rendering is possible or not should call <see cref="M:Visiblox.Charts.SeriesRenderManager.FastPathRelatedPropertyChanged" /> in their
             OnPropertyChanged handler.  By default SelectionMode is one of those properties.  
             If other properties also affect fast-path rendering, override <see cref="M:Visiblox.Charts.SeriesRenderManager.RecomputeFastPathRenderingPossible" /> so that they are taken 
             in to consideration.  
             
             When fast-path rendering becomes possible/impossible <see cref="E:Visiblox.Charts.SeriesRenderManager.FastPathRenderingPossibleChanged" /> is called.  
             In this base implementation it invalidates the series but this can be overridden.  
             </summary>
    </member>
    <member name="M:Visiblox.Charts.SeriesRenderManager.#ctor(Visiblox.Charts.IChartSeries)">
      <summary>
            Creates a new instance of the series render manager.
            </summary>
      <param name="series">The series for which to manage rendering.</param>
    </member>
    <member name="P:Visiblox.Charts.SeriesRenderManager.FastPathRenderingPossible">
      <summary>
            Determines whether it is possible, given the state of the referenced series to render using fast path mode.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.SeriesRenderManager.FastPathRenderingPossibleChanged">
      <summary>
            An event fired when value of FastPathRenderingPossible changes
            </summary>
    </member>
    <member name="T:Visiblox.Charts.SplineSeries">
      <summary>
            Constructs a rounded curve (or spline) series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.SplineSeries.BuildGeometry(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem},System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SplineSeries.AddDataPointToGeometry(System.Windows.Media.PathGeometry,System.Windows.Point,System.Int32,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SplineSeries.RemoveDataPointFromGeometry(System.Windows.Media.PathGeometry,System.Int32,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SplineSeries.ConvertDataSeriesIndexToGeometryIndex(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SplineSeries.CloseEndPointsAtLine(System.Windows.Media.PathFigure,System.Boolean,System.Windows.Media.PathGeometry)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SplineSeries.CloseEndPointsAtBase(System.Windows.Media.PathFigure,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.SplineSeries.TensionProperty">
      <summary>
            Identifies the Tension Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.SplineSeries.Tension">
      <summary>
            Gets or sets the tension used to construct the spline curve. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.StackedBarSeries">
      <summary>
            A StackedBarSeries holds a collection of <see cref="T:Visiblox.Charts.BarSeries" />, applying stacking logic so that
            the final render positions of each bar is calculated with respect to other series in the collection.
            </summary>
      <remarks>
        <para>
            StackedBarSeries enforces that the <see cref="P:Visiblox.Charts.IChartMultipleSeries.Series" /> collection only holds
            <see cref="T:Visiblox.Charts.BarSeries" /> chart series, and will throw an InvalidCastException if this rule is violated.
            StackedBarSeries is unable to perform stacking when the X axis is a category axis, and an ArgumentException will be thrown
            if this rule is violated.
            </para>
        <para>
            As StackedBarSeries is an <see cref="T:Visiblox.Charts.IOffsetProvider" />, the OffsetProvider of each of the BarSeries in the
            Series collection is set to this instance, to allow each BarSeries to obtain its offset positions and proportional values, according
            to the stacking context declared in the <see cref="T:Visiblox.Charts.StackingMode" /> property.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.IOffsetProvider" />
      <seealso cref="T:Visiblox.Charts.BarOrColumnSeriesBase" />
      <seealso cref="T:Visiblox.Charts.BarSeries" />
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.GetBaseAxisValuesUsed">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.GetBaseAxisOffsetGeometry(Visiblox.Charts.IChartSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.GetPerpendicularAxisOffsetGeometry(Visiblox.Charts.IChartSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.AddPerpendicularOffset(System.IComparable,System.Double,System.Double,System.Double@,System.Double@)">
      <inheritdoc />
      <remarks>This implementation adds the maxValue or minValue, depending on whether the currentValue is greater or less than the baseValue.</remarks>
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.GetPerpendicularAxisDataValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.GetBaseAxisDataValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.AssociateSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.ValidateNewSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.ValidateAllSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.GetSideBySideSeries(Visiblox.Charts.BarSeriesType)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.GetSideBySideSeries(Visiblox.Charts.IBarOrColumnSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.ResetBarAndColumnCaches">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.GetSideBySideWidth(Visiblox.Charts.IBarOrColumnSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.GetSingleBarWidth(Visiblox.Charts.IBarOrColumnSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.SelectBaseAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedBarSeries.SelectPerpendicularAxis">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedBarSeries.Type">
      <inheritdoc />
      <remarks>BarSeries in this case</remarks>
    </member>
    <member name="P:Visiblox.Charts.StackedBarSeries.BarWidthFraction">
      <inheritdoc />
      <remarks> returns the largest of the BarWidthFractions of the series contained</remarks>
    </member>
    <member name="P:Visiblox.Charts.StackedBarSeries.MinBarWidth">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedBarSeries.IsXMinimumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedBarSeries.IsXMaximumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedBarSeries.IsYMinimumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedBarSeries.IsYMaximumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedBarSeries.XMargin">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedBarSeries.YMargin">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.StackedColumnSeries">
      <summary>
            A StackedColumnSeries holds a collection of <see cref="T:Visiblox.Charts.ColumnSeries" />, applying stacking logic so that
            the final render positions of each column is calculated with respect to other series in the collection.
            </summary>
      <remarks>
        <para>
            StackedColumnSeries enforces that the <see cref="P:Visiblox.Charts.IChartMultipleSeries.Series" /> collection only holds
            <see cref="T:Visiblox.Charts.ColumnSeries" /> chart series, and will throw an InvalidCastException if this rule is violated.
            StackedColumnSeries is unable to perform stacking when the Y axis is a category axis, and an ArgumentException will be thrown
            if this rule is violated.
            </para>
        <para>
            As StackedColumnSeries is an <see cref="T:Visiblox.Charts.IOffsetProvider" />, the OffsetProvider of each of the ColumnSeries in the
            Series collection is set to this instance, to allow each ColumnSeries to obtain its offset positions and proportional values, according
            to the stacking context declared in the <see cref="T:Visiblox.Charts.StackingMode" /> property.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.IOffsetProvider" />
      <seealso cref="T:Visiblox.Charts.BarOrColumnSeriesBase" />
      <seealso cref="T:Visiblox.Charts.ColumnSeries" />
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.GetBaseAxisValuesUsed">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.SelectPerpendicularAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.GetBaseAxisOffsetGeometry(Visiblox.Charts.IChartSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.GetPerpendicularAxisOffsetGeometry(Visiblox.Charts.IChartSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.AddPerpendicularOffset(System.IComparable,System.Double,System.Double,System.Double@,System.Double@)">
      <inheritdoc />
      <remarks>This implementation adds the maxValue or minValue, depending on whether the currentValue is greater or less than the baseValue.</remarks>
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.GetPerpendicularAxisDataValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.GetBaseAxisDataValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.AssociateSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.ValidateNewSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.ValidateAllSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.GetSideBySideSeries(Visiblox.Charts.BarSeriesType)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.GetSideBySideSeries(Visiblox.Charts.IBarOrColumnSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.ResetBarAndColumnCaches">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.GetSideBySideWidth(Visiblox.Charts.IBarOrColumnSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedColumnSeries.GetSingleBarWidth(Visiblox.Charts.IBarOrColumnSeries)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedColumnSeries.Type">
      <inheritdoc />
      <remarks>ColumnSeries in this case.</remarks>
    </member>
    <member name="P:Visiblox.Charts.StackedColumnSeries.BarWidthFraction">
      <inheritdoc />
      <remarks> Returns the largest of the BarWidthFractions of the series contained.</remarks>
    </member>
    <member name="P:Visiblox.Charts.StackedColumnSeries.MinBarWidth">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedColumnSeries.IsYMinimumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedColumnSeries.IsYMaximumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedColumnSeries.IsXMinimumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedColumnSeries.IsXMaximumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedColumnSeries.XMargin">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedColumnSeries.YMargin">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.StackedLineSeries">
      <summary>
            A StackedLineSeries holds a collection of <see cref="T:Visiblox.Charts.LineSeries" />, applying stacking logic so that
            the final render positions of each line, point and area are calculated with respect to other series in the collection.
            </summary>
      <remarks>
        <para>
            StackedLineSeries enforces that the <see cref="P:Visiblox.Charts.IChartMultipleSeries.Series" /> collection only holds
            <see cref="T:Visiblox.Charts.LineSeries" /> chart series, and will throw an InvalidCastException if this rule is violated.
            StackedLineSeries is unable to perform stacking when the Y axis is a category axis, and an ArgumentException will be thrown
            if this rule is violated.
            </para>
        <para>
            As StackedLineSeries is an <see cref="T:Visiblox.Charts.IOffsetProvider" />, the OffsetProvider of each of the LineSeries in the
            Series collection is set to this instance, to allow each LineSeries to obtain its offset positions and proportional values, according
            to the stacking context declared in the <see cref="T:Visiblox.Charts.StackingMode" /> property.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.IOffsetProvider" />
      <seealso cref="T:Visiblox.Charts.LineSeries" />
    </member>
    <member name="M:Visiblox.Charts.StackedLineSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.StackedLineSeries.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedLineSeries.GetBaseAxisOffsetForDataPoint(Visiblox.Charts.IChartSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedLineSeries.SelectPerpendicularAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedLineSeries.GetBaseAxisOffsetGeometry(Visiblox.Charts.IChartSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedLineSeries.GetPerpendicularAxisOffsetGeometry(Visiblox.Charts.IChartSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedLineSeries.GetPerpendicularAxisDataValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedLineSeries.GetBaseAxisDataValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedLineSeries.AssociateSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedLineSeries.ValidateNewSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedLineSeries.GetSideBySideSeries(Visiblox.Charts.BarSeriesType)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedLineSeries.GetSideBySideSeries(Visiblox.Charts.IBarOrColumnSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedLineSeries.ResetBarAndColumnCaches">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedLineSeries.GetSideBySideWidth(Visiblox.Charts.IBarOrColumnSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StackedLineSeries.GetSingleBarWidth(Visiblox.Charts.IBarOrColumnSeries)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedLineSeries.IsXMinimumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedLineSeries.IsXMaximumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedLineSeries.IsYMinimumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedLineSeries.IsYMaximumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedLineSeries.XMargin">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.StackedLineSeries.YMargin">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.StackingMode">
      <summary>
            Defines the various stacking modes that can be used to build a stacked data series.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.StackingMode.Normal">
      <summary>
            Each data series is placed "on top" of the prior data series.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.StackingMode.HundredPercent">
      <summary>
            Stacking is performed by adjusting the extent of a data point to its percentage proportion.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.StaircaseSeries">
      <summary>
            Represents a staircase series.
            </summary>
      <remarks>
        <para>
            A StaircaseSeries consists of vertical and horizontal lines connecting points. 
            By default, the line between two points travels horizontally to the right and then vertically.  
            In other words, the position of the step (up or down) in the line is on the right of the region between points.  
            The StepPosition can also be set to Left or Center.  
            </para>
        <para>
            Example:  if <see cref="P:Visiblox.Charts.StaircaseSeries.StepPosition" /> is set to Right and the series contains two points (1,1) and (3,3) then
            a series of horizontal and vertical lines will be drawn with corners at (1,1), (3,1), (3,3).  
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.ChartSeriesCommonBase" />
    </member>
    <member name="M:Visiblox.Charts.StaircaseSeries.CreateConnectingPoints(System.Windows.Media.AlignmentX,System.Windows.Point,System.Windows.Point)">
      <summary>
            The method works out the Collection of connecting points between two Points, given the current StepPosition
            </summary>
      <param name="fromPoint">
      </param>
      <param name="toPoint">
      </param>
      <param name="stepPosition">
      </param>
      <returns>A <see cref="T:System.Windows.Media.PointCollection" /> containing the appropriate connecting points between the from and to points.  </returns>
    </member>
    <member name="M:Visiblox.Charts.StaircaseSeries.BuildGeometry(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem},System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StaircaseSeries.AddDataPointToGeometry(System.Windows.Media.PathGeometry,System.Windows.Point,System.Int32,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StaircaseSeries.RemoveDataPointFromGeometry(System.Windows.Media.PathGeometry,System.Int32,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.StaircaseSeries.ConvertDataSeriesIndexToGeometryIndex(System.Int32)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.StaircaseSeries.StepPositionProperty">
      <summary>
            Identifies the StepPosition Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.StaircaseSeries.StepPosition">
      <summary>
            Gets or sets the position of the step between two adjacent data points. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.StreamingMode">
      <summary>
            Defines supported streaming modes for <see cref="T:Visiblox.Charts.Chart" />.
            </summary>
      <seealso cref="T:Visiblox.Charts.IChartSeries" />
    </member>
    <member name="F:Visiblox.Charts.StreamingMode.None">
      <summary>
            Non streaming mode.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.StreamingMode.StreamingOnX">
      <summary>
            The chart is streaming along the X axis.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.StreamingMode.StreamingOnY">
      <summary>
            The chart is streaming along the Y axis.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.StreamingMode.StreamingOnXAndY">
      <summary>
            The chart is streaming along the X and Y axis. Use this setting only if the datapoints added have larger X and Y values.
            If you stream along the X axis (the next X value is larger than the current) and the Y values are arbitrary, then use the StreamingOnX mode (respectively for the Y axis).
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IPalette">
      <summary>
            Defines a palette to be applied to a chart's series. A palette is an enumeration of Styles.
            </summary>
      <seealso cref="T:Visiblox.Charts.Palette" />
      <seealso cref="T:Visiblox.Charts.SimplePalette" />
    </member>
    <member name="T:Visiblox.Charts.NonDependencyObjectWrapper">
      <summary>
            Represents a class that wraps a non-dependency object into a dependency object.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Palette">
      <summary>
            Represents a palette used by the <see cref="T:Visiblox.Charts.Chart" />. 
            A palette is a list of <see cref="T:System.Windows.Style" /> objects and supports enumerating through these items.
            </summary>
      <remarks>
        <para>
            Enumeration through the <see cref="T:System.Windows.Style" /> objects is done by iterating through styles according to their target
            types.
            Each Style should have the TargetType set to the series type it specifies and set the Setters valid for that series.
            </para>
        <example>
          <para>
            If the Palette contains 5 styles:
            </para>
          <para>
            LineSeriesStyle0, LineSeriesStyle1, ColumnSeriesStyle0, ColumnSeriesStyle1, ColumnSeriesStyle2.
            </para>
          <para>
            And the chart contains 3 series: LineSeries1, LineSeries2, ColumnSeries1, then the following styles will be applied to the series:
            </para>
          <para>LineSeries1 --&gt; LineSeriesStyle0 (0%(number of LineSeries styles))</para>
          <para>LineSeries2 --&gt; LineSeriesStyle1 (1%(number of LineSeries styles))</para>
          <para>ColumnSeries1 --&gt; ColumnSeriesStyle2 (2%(number of ColumnSeries styles))</para>
        </example>
      </remarks>
    </member>
    <member name="T:Visiblox.Charts.PaletteHelper">
      <summary>
            Implements helper methods for working with <see cref="T:Visiblox.Charts.IPalette" />s.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.PaletteHelper.ResolvePaletteStyles(Visiblox.Charts.IPalette,System.Object)">
      <summary>
            Finds the styles in a palette that apply to the given target. This means having the same target type or the 
            nearest super-class.
            </summary>
      <param name="palette">The palette containing styles to be resolved.</param>
      <param name="target">The object type to resolve styles for.</param>
    </member>
    <member name="T:Visiblox.Charts.SimplePalette">
      <summary>
            Class that allows simpler definition of palettes.
            </summary>
      <remarks>
        <para>
            By defining <see cref="P:Visiblox.Charts.SimplePalette.StyleTemplates" /> and <see cref="P:Visiblox.Charts.SimplePalette.Colors" />, the class takes care of generating the list of styles,
                that would otherwise need to be defined by hand when using <see cref="T:Visiblox.Charts.Palette" />.
            </para>
        <para>
            Two steps are required defining a palette. First, the <see cref="P:Visiblox.Charts.SimplePalette.StyleTemplates" /> need to be assigned. The members of this 
            collection should be one style per different TargetTypes. If unset a default template set will be loaded instead.
            </para>
        <para>
            The palette will generate a new style based on the provided templates for each colour provided, replacing any brushes in the styles it
            finds against which the attached property ReplaceBrush is set to true with a <see cref="T:System.Windows.Media.SolidColorBrush" /> with the specified colour.
            </para>
        <para>
            If you are using Silverlight and you want to use the standard Visiblox Charts styles but define your own colours 
            you can do that by adding our default styles to the application resources by adding the following to your App.xaml file:
            </para>
        <para>
          <code>
            &lt;Application.Resources&gt;
              &lt;ResourceDictionary&gt;
                  &lt;ResourceDictionary.MergedDictionaries&gt;
                      &lt;ResourceDictionary Source="/Visiblox.Charts;component/generic.VersionSpecific.xaml" /&gt;
                  &lt;/ResourceDictionary.MergedDictionaries&gt;
              &lt;/ResourceDictionary&gt;
            &lt;/Application.Resources&gt;
            </code>
        </para>
        <para>
            Alternatively in WPF, if you want to use the standard Visiblox Charts styles but define your own colours you can do that by adding our default styles to the user control
            resource dictionary. Just add the following line to your control's constructor before it calls InitializeComponent:
            <code>this.Resources = Application.LoadComponent(new Uri("/Visiblox.Charts;component/generic.VersionSpecific.xaml", UriKind.Relative)) as ResourceDictionary;</code></para>
        <para>
            You can then set <see cref="P:Visiblox.Charts.SimplePalette.StyleTemplates" /> to the {StaticResource DefaultStyleTemplates} to get the standard styles for all series types and add your
            definition of the <see cref="P:Visiblox.Charts.SimplePalette.Colors" /> property (either by specifying a ColorCollection or if not on WP7 by using the built-in string converter and supplying a comma
            separated list of colors in XAML, e.g. #FFFF0000,#FF00FF00,#FF0000FF).
            </para>
        <para>
            Note that because of the way Styles are merged it is not possible to use ReplaceBrush in a style which is later used as a BasedOn reference for a sub-Style.
            The attached property is not preserved across the merge, meaning you will need to re-define the setter in the sub-Style and re-specify the attached property.
            Note also that due to a restriction in Windows Phone 7, it is not possible to use a ReplaceBrush attached property on a setter for a 
            CoreDependencyProperty on that platform.
            </para>
      </remarks>
    </member>
    <member name="F:Visiblox.Charts.SimplePalette.ColorsProperty">
      <summary>
            Identifies the Colors Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.SimplePalette.ReplaceBrushProperty">
      <summary>
            Defines an attached property
            </summary>
    </member>
    <member name="M:Visiblox.Charts.SimplePalette.SetReplaceBrush(System.Object,System.Boolean)">
      <summary>
            Sets the ReplaceBrush attached property
            </summary>
      <param name="target">The target dependency object on which to set the value</param>
      <param name="value">The value to set</param>
    </member>
    <member name="M:Visiblox.Charts.SimplePalette.GetReplaceBrush(System.Object)">
      <summary>
            Gets the ReplaceBrush attached property
            </summary>
      <param name="target">The dependency object to check</param>
      <returns>The value of the attached property</returns>
    </member>
    <member name="M:Visiblox.Charts.SimplePalette.#ctor">
      <summary>
            Default constructor.
             </summary>
    </member>
    <member name="M:Visiblox.Charts.SimplePalette.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.SimplePalette.StyleTemplatesProperty">
      <summary>
            Identifies the StyleTemplates Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.SimplePalette.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.SimplePalette.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.SimplePalette.Colors">
      <summary>
            Gets or sets the collection of colours used in the palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.SimplePalette.StyleTemplates">
      <summary>
            Gets or sets the collection of styles from which the palette will be generated. Each type should have one style in the collection, with brush setters having MockBrush values. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.SimplePalette.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.StyleCollection">
      <summary>
            A collection of Style objects.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.ColorCollection">
      <summary>
            A collection of Color objects.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Theme">
      <summary>
            Represents a class that is responsible for loading a theme in the Resources section.
            </summary>
      <remarks>
            A theme is a ResourceDictionary of implicit styles definitions.
            These implicit styles will be applied on all elements that the class wraps (that are its contents).
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.Theme.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Theme.ThemeUriProperty">
      <summary>
            Identifies the ThemeUri Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Theme.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.Theme.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.Theme.ThemeUri">
      <summary>
            Gets or sets the URI of a ResourceDictionary containing a theme. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.Theme.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Zoom">
      <summary>
            Represents a zoom in one dimension as a <see cref="P:Visiblox.Charts.Zoom.Scale" /> and <see cref="P:Visiblox.Charts.Zoom.Offset" />.
            </summary>
      <remarks>
        <para>
            The zoomed area of a <see cref="T:Visiblox.Charts.Chart" /> is represented by a pair of Zoom objects - one for 
            <see cref="P:Visiblox.Charts.Chart.XAxis" /> and one for <see cref="P:Visiblox.Charts.Chart.YAxis" /> (see <see cref="T:Visiblox.Charts.IAxis" />). 
            When multiple axes are used (<see cref="P:Visiblox.Charts.Chart.SecondaryYAxis" />, <see cref="P:Visiblox.Charts.Chart.AdditionalPrimaryYAxes" /> and/or 
            <see cref="P:Visiblox.Charts.Chart.AdditionalSecondaryYAxes" />) the <see cref="P:Visiblox.Charts.Chart.YAxis" /> Zoom is referenced if the axis is not null, 
            otherwise the <see cref="P:Visiblox.Charts.Chart.SecondaryYAxis" /> Zoom is referenced.
            </para>
            
            Each Zoom is defined using these terms:
            <list type="bullet"><item><description><see cref="P:Visiblox.Charts.Zoom.Scale" /> relates to the scale of the axis as a multiplier of its original size, by default this is 1.0. Setting the scale to 0.5 will result in the axis showing half as much data, creating an apparent 'zoom in'. Setting the scale to 2 will result in the axis showing twice as much data, creating an apparent 'zoom out'.</description></item><item><description><see cref="P:Visiblox.Charts.Zoom.Offset" /> relates to the offset along the axis as a multiplier of its original size, by default this is 0.0. Setting this value to 0.5 will result in the viewport moving along the axis half the width of the chart in the positive direction (right for a horizontal axis, upward for a vertical axis).</description></item></list></remarks>
      <example>Creating a chart in XAML which is zoomed in to the top right quarter of the chart:
            <code source="Help\Charts\IncludedCode\ZoomExample.xml" lang="XAML" /></example>
      <seealso cref="T:Visiblox.Charts.IAxis" />
      <seealso cref="P:Visiblox.Charts.IAxis.Zoom" />
    </member>
    <member name="F:Visiblox.Charts.Zoom.DEFAULT_ZOOM_SCALE">
      <summary>
            The default scale that a newly created zoom should have assigned.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Zoom.DEFAULT_ZOOM_OFFSET">
      <summary>
            The default offset that a newly created zoom should have assigned.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Zoom.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Zoom.#ctor(Visiblox.Charts.Zoom)">
      <summary>
            Constructs a zoom, copying the scale and offset from the passed original zoom.
            </summary>
      <param name="zoom">The zoom to copy from.</param>
    </member>
    <member name="F:Visiblox.Charts.Zoom.ScaleProperty">
      <summary>
            Identifies the Scale Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Zoom.OffsetProperty">
      <summary>
            Identifies the Offset Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Zoom.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.Zoom.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.Zoom.Scale">
      <summary>
            Gets or sets the scale of the axis as a multiplier of its original size, by default this is 1.0. Setting the scale to 0.5 will result in the axis showing half as much data, creating an apparent 'zoom in'. Setting the scale to 2 will result in the axis showing twice as much data, creating an apparent 'zoom out'. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Zoom.Offset">
      <summary>
            Gets or sets the offset along the axis as a multiplier of its original size, by default this is 0.0. Setting this value to 0.5 will result in the viewport moving along the axis half the width of the chart in the positive direction (right for a horizontal axis, upward for a vertical axis). Setting this value to -2 will result in the viewport moving along the axis twice the width of the chart in the negative direction (left for a horizontal axis, downward for a vertical axis). This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.Zoom.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AnnotationBase">
      <summary>
            Base class for annotations. An annotation is an object placed on top of a chart, either programmatically
            or by user interaction. Depending on the type of annotation, this may later be moved, resized or otherwise altered.
            </summary>
      <remarks>
        <para>
            An annotation contains a list <see cref="P:Visiblox.Charts.AnnotationBase.Points" /> of data points that determines its position and size. The points are values 
            on the <see cref="P:Visiblox.Charts.Chart.XAxis" /> and <see cref="P:Visiblox.Charts.Chart.YAxis" />. Thus the
            annotation is generally anchored to the charted data, and will maintain its relative position on zooming, 
            panning, altering the chart range, etc. However, it is also possible to create annotations which are displayed at 
            a fixed screen location.</para>
        <para>There are two ways to add annotations to the chart: they may be placed by drawing on the plot area via 
            AnnotationBehaviour (not available on Windows Phone), or constructed directly and added to the <see cref="P:Visiblox.Charts.Chart.Annotations" /> collection.</para>
        <para>The display (and redisplay) of an annotation is accomplished by its <see cref="M:Visiblox.Charts.AnnotationBase.Invalidate" /> method.
            An annotation should call <see cref="M:Visiblox.Charts.AnnotationBase.Invalidate" /> to display itself initially on construction.
            An invalidate is also triggered when the axis effective range has changed.</para>
        <para>Interaction with the annotation is controlled by the <see cref="P:Visiblox.Charts.AnnotationBase.IsInteractionEnabled" /> property: if this property is false,
            interaction with the annotation element is not enabled, including resizing, dragging and deleting, and the element will be transparent to the mouse pointer.</para>
        <para>The <see cref="P:Visiblox.Charts.AnnotationBase.ClickMode" /> of an annotation determines what happens when an annotation is clicked on. If <see cref="P:Visiblox.Charts.AnnotationBase.ClickMode" /> is 
            Drag, clicking and dragging on an annotation will move it. If <see cref="P:Visiblox.Charts.AnnotationBase.ClickMode" /> is Delete,
            clicking on the annotation will delete it (without confirmation, although the cursor will change over the annotation to indicate deletion). 
            Note that deletion may also be accomplished programmatically by simply
            removing the annotation from the <see cref="P:Visiblox.Charts.Chart.Annotations" /> collection.</para>
        <para>
            To allow for resizing or altering the shape of an annotation, a <see cref="T:Visiblox.Charts.Gripper" /> should be added for each control point. Usually this will be 
            the points in <see cref="P:Visiblox.Charts.AnnotationBase.Points" />, but this is not enforced, and an annotation may have more or fewer grippers. A gripper is added 
            via <see cref="M:Visiblox.Charts.AnnotationBase.AddGripper(Visiblox.Charts.IObservableDataPoint)" />, which takes an <see cref="T:Visiblox.Charts.IObservableDataPoint" />, and displays an interactable "gripper" on the chart: 
            when the gripper is dragged to a new location, the data point is updated to the new coordinates. If the point was contained in <see cref="P:Visiblox.Charts.AnnotationBase.Points" />, 
            this will result in an <see cref="M:Visiblox.Charts.AnnotationBase.Invalidate" />, otherwise the annotation will have to listen for the point's property changed event and take appropriate action.
            </para>
        <para>An annotation consists of an <see cref="P:Visiblox.Charts.AnnotationBase.AnnotationElement" /> and a <see cref="P:Visiblox.Charts.AnnotationBase.MovingElement" />.
            The <see cref="P:Visiblox.Charts.AnnotationBase.AnnotationElement" /> is the representation of the actual annotation, not including any editing/interaction elements,
            and is able to be styled via <see cref="P:Visiblox.Charts.AnnotationBase.AnnotationElementStyle" />. The <see cref="P:Visiblox.Charts.AnnotationBase.MovingElement" /> represents the element the user will click and 
            drag by mouse interaction. When the mouse is not over the annotation, the <see cref="P:Visiblox.Charts.AnnotationBase.MovingElementCollapsedStyle" /> is used, which should
            hide the <see cref="P:Visiblox.Charts.AnnotationBase.MovingElement" />, but may provide an enlarged area for interaction (e.g. to make clicking on a line easier). The <see cref="P:Visiblox.Charts.AnnotationBase.MovingElementStyle" />
            is used when the mouse is over the annotation, or is dragging it, and should indicate visually the element is active by highlighting it.
            It is advised to ensure that these styles have roughly the same size to ensure correct rendering.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.EllipseAnnotation" />
      <seealso cref="T:Visiblox.Charts.RectangleAnnotation" />
      <seealso cref="T:Visiblox.Charts.LineAnnotation" />
    </member>
    <member name="T:Visiblox.Charts.IAnnotation">
      <summary>
            Represents an annotation added on top of the chart. This is an object placed on a chart, either programmatically
            or by user interaction. Depending on the type of annotation, this may later be moved, resized or otherwise altered.
            </summary>
      <remarks>
        <see cref="T:Visiblox.Charts.AnnotationBase" /> forms the base class for annotation implementations, and implements a large deal of the interaction
            behaviour an annotation will require in most circumstances. In the majority of cases it should be unnecessary to implement
            IAnnotation directly.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.IAnnotation.Invalidate">
      <summary>
            Invoked in order to re-construct the visual layout of this annotation.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IAnnotation.Init(Visiblox.Charts.Chart,System.Windows.Controls.Grid)">
      <summary>
        <para>
             Invoked by the chart when an annotation is initially added.
             </para>
      </summary>
      <remarks>
        <para>
             The annotation is expected to register to and handle the following <see cref="T:Visiblox.Charts.Chart" /> events in this method:
             <list type="bullet"><item><description><see cref="E:Visiblox.Charts.ChartBase.PropertyChanged" /> event handling when <see cref="P:Visiblox.Charts.Chart.XAxis" />
                          or <see cref="P:Visiblox.Charts.Chart.YAxis" /> have changed.
                     </description></item><item><description><see cref="P:Visiblox.Charts.Chart.XAxis" /> and <see cref="P:Visiblox.Charts.Chart.YAxis" /> PropertyChanged events
                     and handling when ActualRange has changed</description></item></list></para>
        <para>When implementing the interface directly, be aware that Init will be called multiple times on the annotation.</para>
      </remarks>
      <param name="chart">The chart containing the annotation.</param>
      <param name="annotationsContainer">The container for the annotations. Note that this is not drawn on directly, the annotation is placed in this container by the chart. 
             However this may be useful to e.g. find out the size of the plot area.</param>
    </member>
    <member name="M:Visiblox.Charts.IAnnotation.DeInit">
      <summary>
        <para>Invoked by the chart when the annotation is to be removed.</para>
        <para>The annotation should de-register from the events registered in the Init method.</para>
      </summary>
      <remarks>Implementations should be aware that DeInit may be called multiple times, and should not raise an exception in this case.</remarks>
    </member>
    <member name="P:Visiblox.Charts.IAnnotation.Points">
      <remarks>The last point in Points will be used to resize the annotation on placement by <see cref="T:Visiblox.Charts.AnnotationBehaviour" />. Thus
            the points should be ordered in such a way as this is a natural point to resize the annotation when defining it with a drag operation.
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.IAnnotation.ClickMode">
      <summary>
            Gets or sets the action to be taken on clicking on the annotation (dragging or deletion).
            </summary>
      <remarks>If interaction is not enabled via <see cref="P:Visiblox.Charts.Primitives.IInteractable.IsInteractionEnabled" /> changing this property has no effect.</remarks>
    </member>
    <member name="P:Visiblox.Charts.IAnnotation.Previewing">
      <summary>
            Gets/sets whether the annotation is previewing its creation or has been created in finality.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IAnnotation.IsValid">
      <summary>
            Gets whether the annotation is valid and can be added to the annotations placed on the chart 
            (for example a trivially small annotation may not be considered valid).
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.invalidating">
      <summary>
            Flag to avoid re-entrancy into DoInvalidate.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.#ctor">
      <summary>
            Constructor.
            </summary>
      <remarks>Note that subclasses must set up <see cref="P:Visiblox.Charts.AnnotationBase.MovingElement" /> and <see cref="P:Visiblox.Charts.AnnotationBase.AnnotationElement" /> in their constructor (and optionally
            <see cref="P:Visiblox.Charts.AnnotationBase.BoundingElement" />).</remarks>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.Invalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.DoInvalidate">
      <summary>
            Invoked in order to re-construct the visual layout of the element.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.Init(Visiblox.Charts.Chart,System.Windows.Controls.Grid)">
      <summary>
            Invoked by the chart when an annotation is initially added.
            Registers event handlers for the <paramref name="chart" /></summary>
      <remarks>The <see cref="M:Visiblox.Charts.AnnotationBase.InitAnnotation" /> method is called after other initialisation has been carried out, and provides a way for annotation
            implementations to perform further initialisation under the assumption that the <see cref="P:Visiblox.Charts.AnnotationBase.Chart" />, <see cref="P:Visiblox.Charts.AnnotationBase.XAxis" /> and <see cref="P:Visiblox.Charts.AnnotationBase.YAxis" />
            properties have been initialised, and elements have been added to the canvas.</remarks>
      <param name="chart">The chart containing the annotation.</param>
      <param name="annotationsContainer">The container for the annotations. Note that this is not drawn on directly, the annotation is placed in this container by the chart. 
            However this may be useful to e.g. find out the size of the plot area.</param>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.ClearGrippers">
      <summary>
            Clears and de-initializes the grippers.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.IsInteractionEnabledPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when <see cref="P:Visiblox.Charts.AnnotationBase.IsInteractionEnabled" /> has changed. Override to handle this event.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.InitAnnotation">
      <summary>
            Perform initialisation of the annotation when its element has been added to the chart. Annotations should
            perform their element creation etc in their constructor, but any operations which require a reference to
            the chart or elements to have been placed on the canvas should be performed here.
            </summary>
      <remarks>This method is called from <see cref="M:Visiblox.Charts.AnnotationBase.Init(Visiblox.Charts.Chart,System.Windows.Controls.Grid)" /> after performing other
            initialisation. The <see cref="P:Visiblox.Charts.AnnotationBase.Chart" />, <see cref="P:Visiblox.Charts.AnnotationBase.XAxis" />, <see cref="P:Visiblox.Charts.AnnotationBase.YAxis" /> properties are valid at this point. 
            There is no need to call the base implementation.</remarks>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.PopulateGrippers">
      <summary>
            If the annotation has grippers, this method adds them (overridden in subclasses).
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.DeInit">
      <summary>
        <para>Invoked by the chart when the annotation is to be removed.</para>
        <para>De-registers from the events registered in the Init method.</para>
      </summary>
      <remarks>When overriding, one should be aware that DeInit may be called multiple times, and should not raise an exception in this case.</remarks>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.XAxisPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when XAxis property has changed.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.YAxisPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked when YAxis property has changed.
            </summary>
      <param name="e">The property changed event arguments.</param>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.PreviewingPropertyChanged">
      <summary>
            Invoked when the Previewing property has changed.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.AddGripper(Visiblox.Charts.IObservableDataPoint)">
      <summary>
            Adds a gripper for this annotation at the specified data point.
            </summary>
      <param name="point">DataPoint that the gripper adjusts.</param>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.UpdateGrippers">
      <summary>
            Updates the positions of the grippers.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.MoveAnnotation(System.Double,System.Double)">
      <summary>
            Move the annotation by the specified amount, by adjusting its data points.
            </summary>
      <remarks>The base implementation moves each point in <see cref="P:Visiblox.Charts.AnnotationBase.Points" /> by the given numbers of pixels.
            Override and call the base implementation to make additional changes, or without doing so if different behaviour is desired.</remarks>
      <param name="deltaX">Number of pixels to move in the X direction.</param>
      <param name="deltaY">Number of pixels to move in the Y direction.</param>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.RestrictPointToChart(System.Windows.Point)">
      <summary>
            Restrict a point to the plot area bounds (while mouse capture is active we may see points
            outside this area).
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.RestrictXToChart(System.Double,System.Int32)">
      <summary>
            Restrict an X-value to the plot area bounds.
            </summary>
      <param name="x">The x coordinate to restrict.</param>
      <param name="margin">The margin to remove from the width of the chart when constraining the position.</param>
      <returns>The restricted X value.</returns>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.RestrictYToChart(System.Double,System.Int32)">
      <summary>
            Restrict a Y-value to the plot area bounds.
            </summary>
      <param name="y">The y coordinate to restrict.</param>
      <param name="margin">The margin to remove from the height of the chart when constraining the position.</param>
      <returns>The restricted Y value.</returns>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.GetPointRenderPosition(Visiblox.Charts.IDataPoint)">
      <summary>
            Returns the display position where the passed
            logical point (with X and Y axis values) should be plotted.
            </summary>
      <param name="point">A point on the chart with X and Y axis values.</param>
      <returns>The display position of the point to be plotted, taking the zoom into account.</returns>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.OnAxisRelayEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventRelayEventArgs)">
      <summary>
            Raised when an effective limits or value conversion event is raised by the X or Y axis assigned to this annotation.
            </summary>
      <param name="axis">The axis raising the event.</param>
      <param name="e">The event arguments.</param>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.PreviewingProperty">
      <summary>
            Identifies the Previewing Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.IsInteractionEnabledProperty">
      <summary>
            Identifies the IsInteractionEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.XAxisProperty">
      <summary>
            Identifies the XAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.YAxisProperty">
      <summary>
            Identifies the YAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.ClickModeProperty">
      <summary>
            Identifies the ClickMode Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.GripperStyleProperty">
      <summary>
            Identifies the GripperStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.IsSelectedProperty">
      <summary>
            Identifies the IsSelected Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.IsHighlightedProperty">
      <summary>
            Identifies the IsHighlighted Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.AnnotationElementCreationStyleProperty">
      <summary>
            Identifies the AnnotationElementCreationStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.AnnotationElementStyleProperty">
      <summary>
            Identifies the AnnotationElementStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.AnnotationElementSelectedStyleProperty">
      <summary>
            Identifies the AnnotationElementSelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.MovingElementStyleProperty">
      <summary>
            Identifies the MovingElementStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.MovingElementCollapsedStyleProperty">
      <summary>
            Identifies the MovingElementCollapsedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.ManipulateCursorProperty">
      <summary>
            Identifies the ManipulateCursor Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.DragCursorProperty">
      <summary>
            Identifies the DragCursor Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.DeleteCursorProperty">
      <summary>
            Identifies the DeleteCursor Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationBase.GripperCursorProperty">
      <summary>
            Identifies the GripperCursor Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBase.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.AnnotationBase.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.Chart">
      <summary>
            The chart that contains the annotation.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.AnnotationsContainer">
      <summary>
            The canvas the annotations are drawn on. Note that annotations should not draw on this directly - UI elements should be
            added to <see cref="P:Visiblox.Charts.AnnotationBase.RootCanvas" />, which will be added to this by the chart.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.RootCanvas">
      <summary>
            Gets the canvas which is the root element of the annotation. This is returned as the <see cref="P:Visiblox.Charts.AnnotationBase.Element" /> of this <see cref="T:Visiblox.Charts.IAnnotation" />.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.AnnotationElement">
      <summary>
            This is the visual element making up the annotation and defines how it is displayed when it is being interacted with.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.MovingElement">
      <summary>
            The visual element used to drag the annotation around.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.BoundingElement">
      <summary>
            Bounding-box element used to detect mouse staying within the area enclosing the grippers and annotation
            in order to maintain highlighting/gripper visibility.
            </summary>
      <remarks>By default this will be the <see cref="P:Visiblox.Charts.AnnotationBase.MovingElement" />, but in some cases this is inappropriate. For example, 
            the <see cref="T:Visiblox.Charts.ShapeAnnotation" /> uses the bounding-box of the shape, so that for example for an ellipse, the grippers
            do not disappear when the mouse leaves the ellipse.</remarks>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.Grippers">
      <summary>
            The list of grippers for this annotation.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.Rendered">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.AnnotationBase.InvalidationEnded">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.Points">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.IsValid">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.Element">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.AnnotationBase.ResizeStarted">
      <summary>
            Indicates the annotation has started a resize operation (by dragging one of its grippers).
            </summary>
    </member>
    <member name="E:Visiblox.Charts.AnnotationBase.ResizeEnded">
      <summary>
            Indicates the annotation has completed a resize operation (by dragging one of its grippers).
            </summary>
    </member>
    <member name="E:Visiblox.Charts.AnnotationBase.DragStarted">
      <summary>
            Indicates the annotation has started a drag operation (by clicking and dragging on the annotation).
            </summary>
    </member>
    <member name="E:Visiblox.Charts.AnnotationBase.DragEnded">
      <summary>
            Indicates the annotation has completed a drag operation (by releasing the mouse after clicking and dragging on the annotation).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.Previewing">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.IsInteractionEnabled">
      <summary>
            Gets/sets whether interaction is enabled with the annotation. This may include resizing or moving the annotation. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.XAxis">
      <summary>
            Gets or sets the X axis the annotation is plotted against. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.YAxis">
      <summary>
            Gets or sets the Y axis the annotation is plotted against. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.ClickMode">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.GripperStyle">
      <summary>
            Gets or sets the Style of the Gripper instances used for dragging around points of the annotation. The TargetType of this Style is Gripper. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.IsSelected">
      <summary>Gets or sets whether the annotation is selected.</summary>
      <remarks>Generally clicking on the annotation will select it, if it is selectable, but this property can also be manipulated programmatically. </remarks>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.IsHighlighted">
      <summary>Gets or sets whether the annotation is highlighted.</summary>
      <remarks>Generally hovering over the annotation will highlighted it, if it is selectable, but this property can also be manipulated programmatically.</remarks>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.AnnotationElementCreationStyle">
      <summary>
            Gets or sets the style of the annotation's main element when it is being created. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.AnnotationElementStyle">
      <summary>
            Gets or sets the style of the annotation's main element. This is the 'normal' style. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.AnnotationElementSelectedStyle">
      <summary>
            Gets or sets the style of the annotation's main element when the annotation is selected. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.MovingElementStyle">
      <summary>
            Gets or sets the style of the graphical element used by the annotation when moving or highlighted. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.MovingElementCollapsedStyle">
      <summary>
            Gets or sets the style of the graphical element used by the annotation when moving when it is not displayed (this may be collapsed or may represent an invisible interaction area. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.ManipulateCursor">
      <summary>
            Gets or sets the cursor to  use on an annotation to indicate that a drag is possible (or occurring). This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.DragCursor">
      <summary>
            Gets or sets the cursor to  use on an annotation to indicate that a drag is possible (or occurring). This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.DeleteCursor">
      <summary>
            Gets or sets the cursor to use on an annotation to indicate deletion. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBase.GripperCursor">
      <summary>
            Gets or sets the cursor to use on an annotation's grippers. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.AnnotationBase.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AnnotationClickMode">
      <summary>
            Describes possible actions to be initiated by clicking on an annotation.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationClickMode.Drag">
      <summary>
            Clicking on the annotation initiates a drag.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AnnotationClickMode.Delete">
      <summary>
            Clicking on the annotation deletes it from the chart.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AnnotationCollection">
      <summary>
            Class representing the collection of annotations on the chart.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationCollection.Init(Visiblox.Charts.Chart,System.Windows.Controls.Grid)">
      <summary>
            Initializes the annotation container.
            </summary>
      <param name="chart">The chart containing the annotations.</param>
      <param name="element">The root visual element of the annotations.</param>
    </member>
    <member name="M:Visiblox.Charts.AnnotationCollection.DeInit">
      <summary>
            De-initializes the annotation container.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationCollection.DoInvalidate">
      <summary>
            Invalidates all the annotations in the collection.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationCollection.Element">
      <inheritdoc cref="P:Visiblox.Charts.Primitives.IRenderElementOwner.Element" />
    </member>
    <member name="T:Visiblox.Charts.AnnotationDragHandler">
      <summary>
            Handler for a <see cref="E:Visiblox.Charts.AnnotationBase.DragStarted" /> or <see cref="E:Visiblox.Charts.AnnotationBase.DragEnded" /> event.
            </summary>
      <param name="sender">The annotation on which the drag operation is occurring.</param>
      <param name="e">Event argument.</param>
    </member>
    <member name="T:Visiblox.Charts.AnnotationResizeEventArgs">
      <summary>
            Event arguments for a <see cref="E:Visiblox.Charts.AnnotationBase.ResizeStarted" /> or <see cref="E:Visiblox.Charts.AnnotationBase.ResizeEnded" /> annotation resize event.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationResizeEventArgs.#ctor(Visiblox.Charts.Gripper)">
      <summary>
            Constructor.
            </summary>
      <param name="gripper">The gripper sourcing the resize event.</param>
    </member>
    <member name="P:Visiblox.Charts.AnnotationResizeEventArgs.Gripper">
      <summary>
            The gripper which is involved in the resize (is being dragged by the mouse). The data point associated with the drag
            operation is available via <see cref="P:Visiblox.Charts.Gripper.DataPoint" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AnnotationResizeHandler">
      <summary>
            Handler for a <see cref="E:Visiblox.Charts.AnnotationBase.ResizeStarted" /> or <see cref="E:Visiblox.Charts.AnnotationBase.ResizeEnded" /> event.
            </summary>
      <param name="sender">The annotation on which the resize operation is occurring.</param>
      <param name="e">Event argument.</param>
    </member>
    <member name="T:Visiblox.Charts.CalloutTextAnnotation">
      <summary>
            Represents a labelled point annotation. A line is drawn from the point to the annotation text, which is editable.
            </summary>
      <remarks>
        <para>A CalloutTextAnnotation consists of a bordered text box, attached by a connecting line to
            an ellipse anchored to a point on the chart. Clicking on the text makes the text editable.</para>
        <para>Styling: The <see cref="P:Visiblox.Charts.AnnotationBase.AnnotationElement" /> is of type <see cref="T:Visiblox.Charts.CalloutTextAnnotationControl" /> and the
            <see cref="P:Visiblox.Charts.AnnotationBase.MovingElement" /> is of type <see cref="T:Visiblox.Charts.CalloutTextAnnotationHighlightElement" />.</para>
      </remarks>
    </member>
    <member name="T:Visiblox.Charts.TextAnnotation">
      <summary>
            Represents a text annotation positioned at an arbitrary point on the chart.
            </summary>
      <remarks>
        <para>A TextAnnotation consists of a bordered text label, attached to the chart by the point at its top left corner. The text is 
            editable when clicked on.</para>
        <para>Styling: The <see cref="P:Visiblox.Charts.AnnotationBase.AnnotationElement" /> is of type <see cref="T:Visiblox.Charts.TextAnnotationControl" /> and the
            <see cref="P:Visiblox.Charts.AnnotationBase.MovingElement" /> is of type <see cref="T:Visiblox.Charts.TextAnnotationHighlightElement" />.</para>
      </remarks>
    </member>
    <member name="M:Visiblox.Charts.TextAnnotation.#ctor(Visiblox.Charts.IDataPoint)">
      <summary>
            Constructs a FreeTextAnnotation with no text starting off in editing mode.
            </summary>
      <param name="point">Point to place the text at</param>
    </member>
    <member name="M:Visiblox.Charts.TextAnnotation.#ctor(Visiblox.Charts.IDataPoint,System.String)">
      <summary>
            Constructs a FreeTextAnnotation with the given text. If the text is empty or null the annotation will start in editing mode.
            </summary>
      <param name="point">Anchor point of the annotation</param>
      <param name="text">Text of the annotation</param>
    </member>
    <member name="M:Visiblox.Charts.TextAnnotation.DoInvalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.TextAnnotation.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.TextAnnotation.InitAnnotation">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.TextAnnotation.IsInteractionEnabledPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.TextAnnotation.TextProperty">
      <summary>
            Identifies the Text Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TextAnnotation.TextBoxTemplateProperty">
      <summary>
            Identifies the TextBoxTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TextAnnotation.TextXProperty">
      <summary>
            Identifies the TextX Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TextAnnotation.TextYProperty">
      <summary>
            Identifies the TextY Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.TextAnnotation.InvalidationEnded">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.TextAnnotation.Text">
      <summary>
            Gets or sets the text of this annotation. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TextAnnotation.TextBoxTemplate">
      <summary>
            Gets or sets the control template used by the annotation text box. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TextAnnotation.TextX">
      <summary>
            Gets or sets the position of the top left of the annotation text on the X axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TextAnnotation.TextY">
      <summary>
            Gets or sets the position of the top left of the annotation text on the Y axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CalloutTextAnnotation.#ctor(Visiblox.Charts.IDataPoint,Visiblox.Charts.IDataPoint)">
      <summary>
            Constructor.
            </summary>
      <param name="sourcePoint">Anchor point of the annotation source point.</param>
      <param name="textPoint">Anchor point of the annotation text.</param>
    </member>
    <member name="M:Visiblox.Charts.CalloutTextAnnotation.#ctor(Visiblox.Charts.IDataPoint,Visiblox.Charts.IDataPoint,System.String)">
      <summary>
            Constructor
            </summary>
      <param name="sourcePoint">Anchor point of the annotation source point.</param>
      <param name="textPoint">Anchor point of the annotation text.</param>
      <param name="text">Text of the annotation.</param>
    </member>
    <member name="M:Visiblox.Charts.CalloutTextAnnotation.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CalloutTextAnnotation.InitAnnotation">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CalloutTextAnnotation.PopulateGrippers">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CalloutTextAnnotation.MoveAnnotation(System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CalloutTextAnnotation.DoInvalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CalloutTextAnnotation.SnapTextPoint(System.Windows.Point,System.Windows.Point,System.Windows.FrameworkElement)">
      <summary>
            Computes where the connecting line should anchor to on the text element.
            This implementation anchors to the corner or midpoint of <paramref name="textElement" /> that is closest to <paramref name="sourcePoint" />.
            </summary>
      <param name="sourcePoint">
      </param>
      <param name="textPoint">
      </param>
      <param name="textElement">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Visiblox.Charts.CalloutTextAnnotation.PointXProperty">
      <summary>
            Identifies the PointX Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CalloutTextAnnotation.PointYProperty">
      <summary>
            Identifies the PointY Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CalloutTextAnnotation.PointX">
      <summary>
            Gets or sets the position of the annotation source point on the X axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CalloutTextAnnotation.PointY">
      <summary>
            Gets or sets the position of the annotation source point on the Y axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BuiltinAnnotationMode">
      <summary>
            Enumeration to represent a type of annotation.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BuiltinAnnotationMode.Line">
      <summary>
            A LineAnnotation.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BuiltinAnnotationMode.VerticalLine">
      <summary>
            A VerticalLineAnnotation.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BuiltinAnnotationMode.VerticalLineWithValue">
      <summary>
            A VerticalLineWithValuesAnnotation.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BuiltinAnnotationMode.HorizontalLine">
      <summary>
            A HorizontalLineAnnotation.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BuiltinAnnotationMode.HorizontalLineWithValue">
      <summary>
            A HorizontalLineWithValues.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BuiltinAnnotationMode.Rectangle">
      <summary>
            A RectangleAnnotation.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BuiltinAnnotationMode.Square">
      <summary>
            A fixed aspect-ratio SquareAnnotation.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BuiltinAnnotationMode.Ellipse">
      <summary>
            An EllipseAnnotation.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BuiltinAnnotationMode.Circle">
      <summary>
            A fixed aspect-ratio EllipseAnnotation.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BuiltinAnnotationMode.Text">
      <summary>
            A FreeTextAnnotation.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BuiltinAnnotationMode.Callout">
      <summary>
            A CalloutTextAnnotation.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DefaultAnnotationFactory">
      <summary>
            A default <see cref="T:Visiblox.Charts.IAnnotationFactory" /> implementation, creating an annotation selected by <see cref="P:Visiblox.Charts.DefaultAnnotationFactory.AnnotationMode" />, 
            options being those annotations in the <see cref="T:Visiblox.Charts.BuiltinAnnotationMode" /> enumeration.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IAnnotationFactory">
      <summary>
            Represents a factory which allows the creation of annotations, to be used by <see cref="T:Visiblox.Charts.AnnotationBehaviour" />.
            </summary>
      <remarks>
        <para>An implementation of <see cref="T:Visiblox.Charts.IAnnotationFactory" /> should return a new <see cref="T:Visiblox.Charts.IAnnotation" /> when the 
            <see cref="M:Visiblox.Charts.IAnnotationFactory.CreateAnnotation(Visiblox.Charts.IDataPoint)" /> method is called. This method is supplied with the initial click point of the <see cref="T:Visiblox.Charts.AnnotationBehaviour" />,
            and should create an annotation on that point. If appropriate the annotation should be (close to) zero size on that point, and resizable
            during the creation operation of <see cref="T:Visiblox.Charts.AnnotationBehaviour" />.</para>
        <para>The annotation factory may always return the same type of annotation, or may return different types of annotation based on some external factor.
            <see cref="T:Visiblox.Charts.DefaultAnnotationFactory" /> is provided, which allows the creation of all the included annotation types via a property controlling which type is created.</para>
        <para>To use an <see cref="T:Visiblox.Charts.IAnnotationFactory" />, the <see cref="P:Visiblox.Charts.AnnotationBehaviour.AnnotationFactory" /> property should be set on an <see cref="T:Visiblox.Charts.AnnotationBehaviour" />.</para>
      </remarks>
    </member>
    <member name="M:Visiblox.Charts.IAnnotationFactory.CreateAnnotation(Visiblox.Charts.IDataPoint)">
      <summary>
            Creates a new annotation located at the specified <paramref name="initialPoint" />.
            </summary>
      <param name="initialPoint">Point to locate the annotation at (where the mouse was initially clicked).</param>
      <returns>The newly constructed annotation.</returns>
    </member>
    <member name="M:Visiblox.Charts.DefaultAnnotationFactory.CreateAnnotation(Visiblox.Charts.IDataPoint)">
      <summary>
            Creates a built-in annotation located at the given <paramref name="initialPoint" />. All points are located at this point.
            </summary>
      <param name="initialPoint">Point to create the annotation at.</param>
      <returns>A new annotation of the type specified by <see cref="P:Visiblox.Charts.DefaultAnnotationFactory.AnnotationMode" />.</returns>
    </member>
    <member name="P:Visiblox.Charts.DefaultAnnotationFactory.AnnotationMode">
      <summary>
            The annotation type to create.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.EllipseAnnotation">
      <summary>
            An ellipse annotation.
            </summary>
      <remarks>An EllipseAnnotation is defined by two points, the first at the top left of its bounding box, and the second at the bottom right.
            Four grippers are provided for resizing.</remarks>
    </member>
    <member name="T:Visiblox.Charts.ShapeAnnotation">
      <summary>
            A annotation whose display element is a <see cref="T:System.Windows.Shapes.Shape" />.
            </summary>
      <remarks>A ShapeAnnotation is defined by two points, the first at the top left of its bounding box, and the second at the bottom right.
            Four grippers are provided at the corners of the bounding box.</remarks>
    </member>
    <member name="M:Visiblox.Charts.ShapeAnnotation.#ctor(Visiblox.Charts.IDataPoint,Visiblox.Charts.IDataPoint)">
      <summary>
            Constructor.
            </summary>
      <param name="point1">Top left point of the rectangle enclosing the shape.</param>
      <param name="point2">Bottom left point of the rectangle enclosing the shape.</param>
    </member>
    <member name="M:Visiblox.Charts.ShapeAnnotation.PreviewingPropertyChanged">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ShapeAnnotation.CreateShape">
      <summary>
            Create the shape to use to display the annotation.
            </summary>
      <remarks>A shape will be created for the annotation's preview, for its actual display and the highlighted element.</remarks>
      <returns>A Shape.</returns>
    </member>
    <member name="M:Visiblox.Charts.ShapeAnnotation.InitAnnotation">
      <summary>
            Initialise the annotation.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.ShapeAnnotation.PopulateGrippers">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.ShapeAnnotation.DoInvalidate">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.ShapeAnnotation.FixedAspectRatioProperty">
      <summary>
            Identifies the FixedAspectRatio Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ShapeAnnotation.X1">
      <summary>
            Gets the X1 render position of the shape
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ShapeAnnotation.X2">
      <summary>
            Gets the X2 render position of the shape
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ShapeAnnotation.Y1">
      <summary>
            Gets the Y1 render position of the shape
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ShapeAnnotation.Y2">
      <summary>
            Gets the Y2 render position of the shape
            </summary>
    </member>
    <member name="P:Visiblox.Charts.ShapeAnnotation.IsValid">
      <summary>
            True if the shape is at least 2x2px in size. Otherwise false.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.ShapeAnnotation.InvalidationEnded">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.ShapeAnnotation.FixedAspectRatio">
      <summary>
            Gets or sets whether the annotation should be resized with a fixed aspect ratio. Note that this only affects resize operations via the annotation grippers, and the aspect ratio is fixed to the one before any resize operation started. This is a Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.EllipseAnnotation.CreateShape">
      <summary>
            Creates an ellipse.
            </summary>
      <returns>An ellipse.</returns>
    </member>
    <member name="M:Visiblox.Charts.EllipseAnnotation.#ctor(Visiblox.Charts.IDataPoint,Visiblox.Charts.IDataPoint)">
      <summary>
            Constructor.
            </summary>
      <param name="point1">Top left point of the rectangle enclosing the ellipse.</param>
      <param name="point2">Bottom right point of the rectangle enclosing the ellipse.</param>
    </member>
    <member name="T:Visiblox.Charts.EventAnnotation">
      <summary>
            Represents an event annotation positioned at an arbitrary point on the chart.
            </summary>
      <remarks>
        <para>An EventAnnotation consists of a bordered title label, attached to the chart by the point at its top left corner.</para>
        <para>Styling: The <see cref="P:Visiblox.Charts.AnnotationBase.AnnotationElement" /> and <see cref="T:Visiblox.Charts.TextAnnotationHighlightElement" /> are both
            of type <see cref="T:Visiblox.Charts.EventAnnotationControl" />.</para>
      </remarks>
    </member>
    <member name="M:Visiblox.Charts.EventAnnotation.#ctor(Visiblox.Charts.IDataPoint)">
      <summary>
            Constructs an EventAnnotation with no title.
            </summary>
      <param name="point">Point to place the text at.</param>
    </member>
    <member name="M:Visiblox.Charts.EventAnnotation.#ctor(Visiblox.Charts.IDataPoint,System.String)">
      <summary>
            Constructs a EventAnnotation with the given text (title).
            </summary>
      <param name="point">Anchor point of the annotation.</param>
      <param name="title">The text to display on the annotation.</param>
    </member>
    <member name="M:Visiblox.Charts.EventAnnotation.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.EventAnnotation.DoInvalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.EventAnnotation.InitAnnotation">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.EventAnnotation.InvalidateInternal">
      <summary>
            Called by <see cref="M:Visiblox.Charts.EventAnnotation.DoInvalidate" /> to perform additional invalidation steps. Override to implement custom invalidation steps.
            If overriding remember to call <c>base.InvalidateInternal()</c> from the overriding implementation.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.EventAnnotation.InitAnnotationInternal">
      <summary>
            Called by <see cref="M:Visiblox.Charts.EventAnnotation.InitAnnotation" /> to perform additional initialization steps. Override to implement custom initialization steps.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.EventAnnotation.DeInitAnnotationInternal">
      <summary>
            Called by <see cref="M:Visiblox.Charts.EventAnnotation.DeInit" /> to perform additional initialization steps. Override to implement custom de-initialization steps.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.EventAnnotation.TitleProperty">
      <summary>
            Identifies the Title Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.EventAnnotation.EventXProperty">
      <summary>
            Identifies the EventX Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.EventAnnotation.EventYProperty">
      <summary>
            Identifies the EventY Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.EventAnnotation.EventRenderPosition">
      <summary>
            Gets the render position for the point associated with the event annotation.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.EventAnnotation.AnnotationElementControl">
      <summary>
            Gets strongly typed <see cref="P:Visiblox.Charts.AnnotationBase.AnnotationElement" />.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.EventAnnotation.MovingElementControl">
      <summary>
            Gets strongly typed <see cref="P:Visiblox.Charts.AnnotationBase.MovingElement" />.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.EventAnnotation.Title">
      <summary>
            Gets or sets the text of this annotation. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.EventAnnotation.EventX">
      <summary>
            Gets or sets the position of the top left of the event on the X axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.EventAnnotation.EventY">
      <summary>
            Gets or sets the position of the top left of the event on the Y axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.EventAnnotationControl">
      <summary>
            Represents the visual parts of a <see cref="T:Visiblox.Charts.EventAnnotation" />.
            </summary>
      <remarks>
            The default control template for this control is the following:
            <code source="Help\Charts\IncludedCode\EventAnnotationControlTemplate.xml" lang="XAML" /></remarks>
    </member>
    <member name="M:Visiblox.Charts.EventAnnotationControl.#ctor">
      <summary>
            Default Constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.EventAnnotationControl.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.EventAnnotationControl.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.EventAnnotationControl.TitleProperty">
      <summary>
            Identifies the Title Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.EventAnnotationControl.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.EventAnnotationControl.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.EventAnnotationControl.LayoutRoot">
      <summary>
            Gets the root canvas of the control.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.EventAnnotationControl.Line">
      <summary>
            Gets the element of the control.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.EventAnnotationControl.Border">
      <summary>
            Gets the border element of the control.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.EventAnnotationControl.Title">
      <summary>
            Gets or sets the title property of the control. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.EventAnnotationControl.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Gripper">
      <summary>
            A gripper to move and resize an annotation. Contains a Thumb control and a DataPoint to keep track
            of its position.
            </summary>
      <remarks>The gripper is by default represented by a gray circular thumb, which enlarges on mouse-over. The <see cref="P:Visiblox.Charts.Gripper.ThumbColor" /> property
            can be used to control the colour of this element, or the <see cref="P:Visiblox.Charts.Gripper.ThumbTemplate" /> can be replaced to use a different representation (note however that
            the element will still be enlarged via a render transform on mouse over).</remarks>
    </member>
    <member name="M:Visiblox.Charts.Gripper.#ctor(Visiblox.Charts.IAxis,Visiblox.Charts.IAxis,System.Windows.Controls.Canvas,Visiblox.Charts.IObservableDataPoint)">
      <summary>
            Creates a gripper associated with the given axes, with a <see cref="P:Visiblox.Charts.Gripper.Thumb" /> in the given <paramref name="container" />, attached to
            <paramref name="point" />. When the gripper is dragged, the coordinates of <paramref name="point" /> are updated.
            </summary>
      <param name="xAxis">The X axis the gripper's point is associated with.</param>
      <param name="yAxis">The Y axis the gripper's point is associated with.</param>
      <param name="container">The container to place the <see cref="P:Visiblox.Charts.Gripper.Thumb" /> element in.</param>
      <param name="point">Point associated with the gripper.</param>
    </member>
    <member name="M:Visiblox.Charts.Gripper.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Gripper.DeInit">
      <summary>
            De-initializes the gripper: unregisters event subscriptions.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Gripper.UpdateThumbPosition">
      <summary>
            Updates the position of the thumb using the Point coordinates.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Gripper.UpdateThumbPosition(Visiblox.Charts.IAxis,Visiblox.Charts.IAxis)">
      <summary>
            Updates the position of the thumb using the axes <paramref name="xAxis" /> and <paramref name="yAxis" />.
            </summary>
      <param name="xAxis">The X Axis to position the gripper on. Can be null.</param>
      <param name="yAxis">The Y Axis to position the gripper on. Can be null.</param>
    </member>
    <member name="M:Visiblox.Charts.Gripper.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.Gripper.ThumbTemplateProperty">
      <summary>
            Identifies the ThumbTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.Gripper.ThumbColorProperty">
      <summary>
            Identifies the ThumbColor Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Gripper.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.Gripper.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.Gripper.Thumb">
      <summary>
            The Thumb is the visible part of the Gripper, that gets dragged around.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Gripper.XAxis">
      <summary>
            The X axis that this gripper is associated with.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Gripper.YAxis">
      <summary>
            The Y axis that this gripper is associated with.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Gripper.DataPoint">
      <summary>
            The data point that this gripper is associated with.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.Gripper.GripperMouseEntered">
      <summary>
            Event for handling when the mouse has entered the gripper's Thumb control.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.Gripper.GripperMouseLeft">
      <summary>
            Event for handling when the mouse has left the gripper's Thumb control.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Gripper.ThumbTemplate">
      <summary>
            The ControlTemplate for the Thumb to use to represent the gripper. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Gripper.ThumbColor">
      <summary>
            The colour of the gripper. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.Gripper.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.HorizontalLineAnnotation">
      <summary>
            An annotation representing an infinite horizontal line.
            </summary>
      <remarks>A HorizontalLineAnnotation is defined by a point on the line, which is displayed 
            across the entire width of the plot area. No grippers are provided, but the line may be moved up or down.</remarks>
      <seealso cref="T:Visiblox.Charts.HorizontalLineAnnotation" />
      <seealso cref="T:Visiblox.Charts.LineAnnotation" />
    </member>
    <member name="M:Visiblox.Charts.HorizontalLineAnnotation.#ctor(Visiblox.Charts.IDataPoint)">
      <summary>
            Constructs an infinite horizontal line passing through the given <paramref name="point" />.
            </summary>
      <param name="point">A point the line passes through. The X coordinate of this point is irrelevant.</param>
    </member>
    <member name="M:Visiblox.Charts.HorizontalLineAnnotation.MoveAnnotation(System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HorizontalLineAnnotation.DoInvalidate">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.HorizontalLineAnnotation.YValueProperty">
      <summary>
            Identifies the YValue Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HorizontalLineAnnotation.Y">
      <summary>
            Gets the Y render position of the line.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HorizontalLineAnnotation.YValue">
      <summary>Gets the Y value against which the annotation is plotted on <see cref="P:Visiblox.Charts.AnnotationBase.YAxis" /></summary>
    </member>
    <member name="T:Visiblox.Charts.HorizontalLineWithValueAnnotation">
      <summary>
            A horizontal line annotation with an additional label on <see cref="P:Visiblox.Charts.AnnotationBase.YAxis" /> which displays the current value.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.HorizontalLineWithValueAnnotation.#ctor(Visiblox.Charts.IDataPoint)">
      <summary>
            Constructs an infinite horizontal line passing through the given <paramref name="point" />.
            </summary>
      <param name="point">A point the line passes through. The X coordinate of this point is irrelevant.</param>
    </member>
    <member name="M:Visiblox.Charts.HorizontalLineWithValueAnnotation.InitAnnotation">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HorizontalLineWithValueAnnotation.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HorizontalLineWithValueAnnotation.YAxisPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HorizontalLineWithValueAnnotation.RefreshAxisLabel">
      <summary>
            Called when the style or template DPs have been changed.
            When this happens, it removes all axis labels from the axes, creates them again with the new style / template settings
                and adds them again.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HorizontalLineWithValueAnnotation.LabelTemplateProperty">
      <summary>
            Identifies the LabelTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HorizontalLineWithValueAnnotation.LabelBorderStyleProperty">
      <summary>
            Identifies the LabelBorderStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HorizontalLineWithValueAnnotation.LabelTextStyleProperty">
      <summary>
            Identifies the LabelTextStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HorizontalLineWithValueAnnotation.LabelHorizontalAlignmentProperty">
      <summary>
            Identifies the LabelHorizontalAlignment Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HorizontalLineWithValueAnnotation.LabelFormatStringProperty">
      <summary>
            Identifies the LabelFormatString Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HorizontalLineWithValueAnnotation.HideCollidingAxisLabelsProperty">
      <summary>
            Identifies the HideCollidingAxisLabels Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HorizontalLineWithValueAnnotation.YAxisLabel">
      <summary>
            The <see cref="T:Visiblox.Charts.AdditionalLabel" /> that shows the value of this <see cref="T:Visiblox.Charts.HorizontalLineWithValueAnnotation" />.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HorizontalLineWithValueAnnotation.LabelTemplate">
      <summary>Gets or sets the control template of the labels. The TargetType of this style should be <see cref="T:Visiblox.Charts.AdditionalLabel" />.</summary>
    </member>
    <member name="P:Visiblox.Charts.HorizontalLineWithValueAnnotation.LabelBorderStyle">
      <summary>
            Gets or sets the style of the border used around the labels. The TargetType of this style should be Border. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HorizontalLineWithValueAnnotation.LabelTextStyle">
      <summary>
            Gets or sets the style of the text used for the labels. The TargetType of this style should be TextBlock. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HorizontalLineWithValueAnnotation.LabelHorizontalAlignment">
      <summary>
            Gets or sets the Horizontal Alignment of the value label with the axis panel.  Use this property rather than the same property in LabelTextStyle.  . This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HorizontalLineWithValueAnnotation.LabelFormatString">
      <summary>
            Gets or sets the format of the text used around the labels. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HorizontalLineWithValueAnnotation.HideCollidingAxisLabels">
      <summary>
            Gets or sets whether axis labels that would collide with the annotation label should be hidden. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.LineAnnotation">
      <summary>
            An annotation representing a line between two points.
            </summary>
      <remarks>A LineAnnotation is defined by the points at the start and end of the line. Grippers are provided
            for these points, and the line may be moved by dragging on an enlarged area around the line.</remarks>
      <seealso cref="T:Visiblox.Charts.HorizontalLineAnnotation" />
      <seealso cref="T:Visiblox.Charts.VerticalLineAnnotation" />
    </member>
    <member name="M:Visiblox.Charts.LineAnnotation.#ctor(Visiblox.Charts.IDataPoint,Visiblox.Charts.IDataPoint)">
      <summary>
            Creates a new line annotation.
            </summary>
      <param name="point1">Start point of the line.</param>
      <param name="point2">End point of the line.</param>
    </member>
    <member name="M:Visiblox.Charts.LineAnnotation.InitAnnotation">
      <summary>
            Initialise annotation.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LineAnnotation.PopulateGrippers">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.LineAnnotation.DoInvalidate">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.LineAnnotation.X1">
      <summary>
            Gets the X render position of the starting point of the line.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineAnnotation.X2">
      <summary>
            Gets the X render position of the end point of the line.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineAnnotation.Y1">
      <summary>
            Gets the Y render position of the starting point of the line.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineAnnotation.Y2">
      <summary>
            Gets the Y render position of the end point of the line.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineAnnotation.IsValid">
      <summary>
            Determines whether the annotation is in a valid state.  
            True if the line is at least 2 pixels in either dimensions or false otherwise.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RectangleAnnotation">
      <summary>
            A rectangle annotation.
            </summary>
      <remarks>A RectangleAnnotation is defined by two points, its top left point, and its bottom right point.
            Four grippers at the rectangle's corners are provided for resizing.</remarks>
    </member>
    <member name="M:Visiblox.Charts.RectangleAnnotation.CreateShape">
      <summary>
            Creates a rectangle.
            </summary>
      <returns>A rectangle.</returns>
    </member>
    <member name="M:Visiblox.Charts.RectangleAnnotation.#ctor(Visiblox.Charts.IDataPoint,Visiblox.Charts.IDataPoint)">
      <summary>
            Constructor.
            </summary>
      <param name="point1">Top left point of the rectangle.</param>
      <param name="point2">Bottom right point of the rectangle.</param>
    </member>
    <member name="T:Visiblox.Charts.CalloutTextAnnotationControl">
      <summary>
            Represents the visual parts of a <see cref="T:Visiblox.Charts.CalloutTextAnnotation" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.TextAnnotationControl">
      <summary>
            Represents the visual parts of a <see cref="T:Visiblox.Charts.TextAnnotation" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TextAnnotationControl.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TextAnnotationControl.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.TextAnnotationControl.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.TextAnnotationControl.TextBoxTemplateProperty">
      <summary>
            Identifies the TextBoxTemplate Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TextAnnotationControl.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.TextAnnotationControl.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.TextAnnotationControl.TextBox">
      <summary>
            The text box.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TextAnnotationControl.TextBoxTemplate">
      <summary>
            Gets or sets the control template used by the text box. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.TextAnnotationControl.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CalloutTextAnnotationControl.#ctor">
      <summary>
            Constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CalloutTextAnnotationControl.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.CalloutTextAnnotationControl.PointStyleProperty">
      <summary>
            Identifies the PointStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CalloutTextAnnotationControl.LineStyleProperty">
      <summary>
            Identifies the LineStyle Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CalloutTextAnnotationControl.Point">
      <summary>
            The source point.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CalloutTextAnnotationControl.Line">
      <summary>
            The line connecting the source point and the text box.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CalloutTextAnnotationControl.PointStyle">
      <summary>
            Gets or sets the style of the source point. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CalloutTextAnnotationControl.LineStyle">
      <summary>
            Gets or sets the style of the connecting line. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.CalloutTextAnnotationHighlightElement">
      <summary>
            Represents the highlighting UI elements of a <see cref="T:Visiblox.Charts.CalloutTextAnnotation" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.TextAnnotationHighlightElement">
      <summary>
            Represents the highlighting UI elements of a <see cref="T:Visiblox.Charts.TextAnnotation" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TextAnnotationHighlightElement.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TextAnnotationHighlightElement.TextRectangleStyleProperty">
      <summary>
            Identifies the TextRectangleStyle Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TextAnnotationHighlightElement.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.TextAnnotationHighlightElement.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.TextAnnotationHighlightElement.TextRectangle">
      <summary>
            Represents the rectangle outlining the text annotation text box.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TextAnnotationHighlightElement.TextRectangleStyle">
      <summary>
            Gets or sets the style of the text box highlighting rectangle. The TargetType of this property should be Path. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.TextAnnotationHighlightElement.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CalloutTextAnnotationHighlightElement.#ctor">
      <summary>
            Constructor.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CalloutTextAnnotationHighlightElement.LineStyleProperty">
      <summary>
            Identifies the LineStyle Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CalloutTextAnnotationHighlightElement.Line">
      <summary>
            Represents the line highlighting the callout's connecting line.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CalloutTextAnnotationHighlightElement.LineStyle">
      <summary>
            Gets or sets the style of the highlight line. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.VerticalLineAnnotation">
      <summary>
            An annotation representing an infinite vertical line.
            </summary>
      <remarks>A VerticalLineAnnotation is defined by a point on the line, which is displayed 
            across the entire height of the plot area. No grippers are provided, but the line may be moved left or right.</remarks>
      <seealso cref="T:Visiblox.Charts.HorizontalLineAnnotation" />
      <seealso cref="T:Visiblox.Charts.LineAnnotation" />
    </member>
    <member name="M:Visiblox.Charts.VerticalLineAnnotation.#ctor(Visiblox.Charts.IDataPoint)">
      <summary>
            Constructs an infinite vertical line passing through the given <paramref name="point" />.
            </summary>
      <param name="point">A point the line passes through. The Y coordinate of this point is irrelevant.</param>
    </member>
    <member name="M:Visiblox.Charts.VerticalLineAnnotation.MoveAnnotation(System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.VerticalLineAnnotation.DoInvalidate">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.VerticalLineAnnotation.XValueProperty">
      <summary>
            Identifies the XValue Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.VerticalLineAnnotation.X">
      <summary>
            Gets the X render position of the line
            </summary>
    </member>
    <member name="P:Visiblox.Charts.VerticalLineAnnotation.XValue">
      <summary>Gets the value against which the annotation is plotted on the <see cref="P:Visiblox.Charts.AnnotationBase.XAxis" /></summary>
    </member>
    <member name="T:Visiblox.Charts.VerticalLineWithValueAnnotation">
      <summary>
            A vertical line displaying its values on the <see cref="P:Visiblox.Charts.AnnotationBase.XAxis" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.VerticalLineWithValueAnnotation.#ctor(Visiblox.Charts.IDataPoint)">
      <summary>
            Constructs a vertical line passing through the given <paramref name="point" />.
            </summary>
      <param name="point">A point the line passes through. The Y coordinate of this point is irrelevant.</param>
    </member>
    <member name="M:Visiblox.Charts.VerticalLineWithValueAnnotation.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.VerticalLineWithValueAnnotation.InitAnnotation">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.VerticalLineWithValueAnnotation.XAxisPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.VerticalLineWithValueAnnotation.LabelTemplateProperty">
      <summary>
            Identifies the LabelTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.VerticalLineWithValueAnnotation.LabelBorderStyleProperty">
      <summary>
            Identifies the LabelBorderStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.VerticalLineWithValueAnnotation.LabelTextStyleProperty">
      <summary>
            Identifies the LabelTextStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.VerticalLineWithValueAnnotation.LabelFormatStringProperty">
      <summary>
            Identifies the LabelFormatString Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.VerticalLineWithValueAnnotation.HideCollidingAxisLabelsProperty">
      <summary>
            Identifies the HideCollidingAxisLabels Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.VerticalLineWithValueAnnotation.XAxisLabel">
      <summary>
            The <see cref="T:Visiblox.Charts.AdditionalLabel" /> that shows the value of this <see cref="T:Visiblox.Charts.VerticalLineWithValueAnnotation" />.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.VerticalLineWithValueAnnotation.LabelTemplate">
      <summary>Gets or sets the control template of the labels. The TargetType of this style should be <see cref="T:Visiblox.Charts.AdditionalLabel" />.</summary>
    </member>
    <member name="P:Visiblox.Charts.VerticalLineWithValueAnnotation.LabelBorderStyle">
      <summary>
            Gets or sets the style of the border used around the labels. The TargetType of this style should be Border. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.VerticalLineWithValueAnnotation.LabelTextStyle">
      <summary>
            Gets or sets the style of the text used around the labels. The TargetType of this style should be TextBlock. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.VerticalLineWithValueAnnotation.LabelFormatString">
      <summary>
            Gets or sets the format of the text used around the labels. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.VerticalLineWithValueAnnotation.HideCollidingAxisLabels">
      <summary>
            Gets or sets whether axis labels that would collide with the annotation label should be hidden. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DiscontinuousDateTimeAxis">
      <summary>
             Represents an Axis for <see cref="T:System.DateTime" /> data where there may be dates and times missing, 
             such as weekends, holidays or non-business hours.
             </summary>
      <remarks>
        <para>The result of these exclusions is as if one were to cut out each missing section of a 
             normal <see cref="T:Visiblox.Charts.DateTimeAxis" /> and paste these together along the joins.
             Data is charted continuously as if these missing dates/times did not exist.</para>
        <para>The general operation of the discontinuous axis is by mapping "real world" DateTime values onto compressed DateTime values, 
             where all discontinuities have been removed. The basis of this compression is the first non-excluded time after the <c>ActualRange.Minimum</c>.
             Series may be drawn across these discontinuities without issue, however in the case of data points which fall within the discontinuity,
             these will not be rendered. It is not recommended to chart a data series with points falling on the discontinuity, or with a range 
             minimum or maximum within a discontinuity.</para>
        <para>The setup of the time periods to exclude from the axis is accomplished by a <see cref="T:Visiblox.Charts.IDiscontinuityProvider" />.
             The axis contains a <see cref="P:Visiblox.Charts.DiscontinuousDateTimeAxis.DiscontinuityProvider" /> property, which is used with its range, which must be a 
             <see cref="T:Visiblox.Charts.DateTimeRange" />. To obtain a suitable range with the axis's <see cref="P:Visiblox.Charts.DiscontinuousDateTimeAxis.DiscontinuityProvider" />,
             the <see cref="T:Visiblox.Charts.IAxisCommon" />'s <see cref="M:Visiblox.Charts.IRangeProvider.CreateRange" /> method can be used.</para>
        <para>
        </para>
      </remarks>
      <example>The following XAML defines a DiscontinuousDateTimeAxis where the hours charted are Monday-Friday, 08.30-18.00:
            <code source="Help\Charts\IncludedCode\DiscontinuousDateTimeAxisWeeklyHoursExample.xml" lang="XAML" />
            The following XAML defines a DiscontinuousDateTimeAxis where the hours charted are Monday 06.00 - Friday 20.00:
            <code source="Help\Charts\IncludedCode\DiscontinuousDateTimeAxisDailyHoursExample.xml" lang="XAML" /></example>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeAxis.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeAxis.GetDataValueAsAxisValue(System.DateTime)">
      <summary>
            Converts the passed DateTime <paramref name="dataValue" /> to a double value, taking the
                discontinuities into account.
            </summary>
      <param name="dataValue">The data value to get the corresponding axis value for.</param>
      <returns>The axis value corresponding to the data value.</returns>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeAxis.GetAxisValueAsDataValue(System.Double)">
      <summary>
            Transforms the passed double to a DateTime taking the discontinuities into account.
            </summary>
      <param name="axisValue">The axis value to get the corresponding data value for.</param>
      <returns>The data value corresponding to the specified axis value.</returns>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeAxis.IsDataValueRenderable(System.IComparable)">
      <summary>
            Checks whether <paramref name="dataValue" /> can be rendered on the axis.
            A point can't be rendered if it located within a discontinuity.
            </summary>
      <param name="dataValue">The data value to test.</param>
      <returns>True if the data value can be rendered and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeAxis.GetMajorTickValues">
      <summary>
            Overrides <see cref="M:Visiblox.Charts.DateTimeAxis.GetMajorTickValues" /> to filter out any major tick values falling on a discontinuity (via 
            <see cref="M:Visiblox.Charts.DiscontinuousDateTimeAxis.FilterDateValues(System.Collections.Generic.IList{System.DateTime})" />).
            </summary>
      <remarks>Customisation of tick generation can be implemented by either overriding this method to generate ticks from scratch or to further
            modify filtered values, or overriding <see cref="M:Visiblox.Charts.DiscontinuousDateTimeAxis.FilterDateValues(System.Collections.Generic.IList{System.DateTime})" /> to change the way the base <see cref="T:Visiblox.Charts.DateTimeAxis" /> ticks are filtered.</remarks>
      <returns>A list of major tick values not falling on discontinuities.</returns>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeAxis.GetMinorTickValues">
      <summary>
            Overrides <see cref="M:Visiblox.Charts.DateTimeAxis.GetMinorTickValues" /> to filter out any major tick values falling on a discontinuity (via 
            <see cref="M:Visiblox.Charts.DiscontinuousDateTimeAxis.FilterDateValues(System.Collections.Generic.IList{System.DateTime})" />).
            </summary>
      <remarks>Customisation of tick generation can be implemented by either overriding this method to generate ticks from scratch or to further
            modify filtered values, or overriding <see cref="M:Visiblox.Charts.DiscontinuousDateTimeAxis.FilterDateValues(System.Collections.Generic.IList{System.DateTime})" /> to change the way the base <see cref="T:Visiblox.Charts.DateTimeAxis" /> ticks are filtered.</remarks>
      <returns>A list of minor tick values not falling on discontinuities.</returns>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeAxis.FilterDateValues(System.Collections.Generic.IList{System.DateTime})">
      <summary>
             Filters out a list of date times to exclude any dates falling in discontinuities.
            </summary>
      <remarks>
            FilterDateValues is used by <see cref="M:Visiblox.Charts.DiscontinuousDateTimeAxis.GetMajorTickValues" /> and <see cref="M:Visiblox.Charts.DiscontinuousDateTimeAxis.GetMinorTickValues" /> to filter the ticks generated by the base
            <see cref="T:Visiblox.Charts.DateTimeAxis" /> tick generation algorithm. Customisation of tick generation can be implemented by either overriding this 
            method to change the way the ticks are filtered, or overriding <see cref="M:Visiblox.Charts.DiscontinuousDateTimeAxis.GetMajorTickValues" /> and <see cref="M:Visiblox.Charts.DiscontinuousDateTimeAxis.GetMinorTickValues" /> to
            generate ticks directly.</remarks>
      <param name="values">The date times to filter.</param>
      <returns>A filtered list of the parameter date time list.</returns>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeAxis.CreateRangeWithEffectiveLimits(Visiblox.Charts.IRange{System.DateTime})">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DiscontinuousDateTimeAxis.DiscontinuityProvider">
      <summary>
            The <see cref="T:Visiblox.Charts.IDiscontinuityProvider" /> used by the axis to define included and excluded times.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscontinuousDateTimeAxis.ActualRenderedRangeValid">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.DailyHoursModeProvider">
      <summary>
            Represents an <see cref="T:Visiblox.Charts.IDiscontinuityProvider" /> which calculates discontinuities on a <see cref="T:Visiblox.Charts.DiscontinuousDateTimeAxis" />
            based on a "daily hours" mode of working (e.g. Monday-Friday, 08.30-18.00). Daily start and end hours are given along with a list of excluded days of the week, and these periods
            repeat indefinitely on a weekly basis, along with a fixed list of non-repeating ignored dates.
            </summary>
      <remarks>
        <para>The included period each day is from <see cref="P:Visiblox.Charts.DailyHoursModeProvider.StartOfDayInHours" /> to <see cref="P:Visiblox.Charts.DailyHoursModeProvider.EndOfDayInHours" />,
            but any days in <see cref="P:Visiblox.Charts.DailyHoursModeProvider.ExcludeDaysOfWeek" /> are excluded entirely. The defined included/excluded periods repeat indefinitely on a weekly basis.
            Furthermore, any dates in <see cref="P:Visiblox.Charts.DailyHoursModeProvider.IgnoreDates" /> are also excluded entirely (once only). </para>
      </remarks>
      <example>The following XAML defines a DiscontinuousDateTimeAxis where the hours charted are Monday-Friday, 08.30-18.00:
            <code source="Help\Charts\IncludedCode\DiscontinuousDateTimeAxisDailyHoursExample.xml" lang="XAML" /></example>
    </member>
    <member name="T:Visiblox.Charts.IDiscontinuityProvider">
      <summary>
            Defines operations for calculating the included and excluded parts of a <see cref="T:Visiblox.Charts.DiscontinuousDateTimeAxis" />.
            </summary>
      <remarks>An <see cref="T:Visiblox.Charts.IDiscontinuityProvider" /> provides operations to allow the conversion between real world DateTime values
            and the continuous compressed DateTime world of included times. Given two dates, the actual charted time between them is
            given by <see cref="M:Visiblox.Charts.IDiscontinuityProvider.GetIncludedTimeBetween(System.DateTime,System.DateTime)" />, while conversely given a date and a period of actual charted time, <see cref="M:Visiblox.Charts.IDiscontinuityProvider.AddIncludedTime(System.DateTime,System.TimeSpan)" />
            calculates the date resulting from this addition.</remarks>
    </member>
    <member name="M:Visiblox.Charts.IDiscontinuityProvider.IsIncluded(System.DateTime)">
      <summary>
            Determines whether the given <paramref name="dateTime" /> is included in the charted period or excluded (in a discontinuity). 
            Series points, axis labels etc. will not be plotted for values where this method returns false.
            </summary>
      <param name="dateTime">Date to check.</param>
      <returns>True if <paramref name="dateTime" /> is included and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.IDiscontinuityProvider.GetIncludedTimeBetween(System.DateTime,System.DateTime)">
      <summary>
            Computes the continuous included time period between <paramref name="startDateTime" /> and <paramref name="endDateTime" />. This is the time between
            the two dates exclusive of any discontinuities.
            </summary>
      <remarks>Implementers should note that <paramref name="endDateTime" /> may be equal to or before <paramref name="startDateTime" />. In the latter
            case a negative time should be returned. Also note that the parameters may be dates which are not themselves included.</remarks>
      <param name="startDateTime">Start of the period.</param>
      <param name="endDateTime">End of the period.</param>
      <returns>The time period included between the specified extents.</returns>
    </member>
    <member name="M:Visiblox.Charts.IDiscontinuityProvider.AddIncludedTime(System.DateTime,System.TimeSpan)">
      <summary>
            Computes the resulting date given by adding the continuous period <paramref name="includedTime" /> to <paramref name="startDateTime" />.
            </summary>
      <remarks>The time period <paramref name="includedTime" /> does not include any discontinuities, so any discontinuous periods following
            <paramref name="startDateTime" /> must be skipped over when adding <paramref name="includedTime" />. Note that when <c>start</c> is an included time,
            the following equation should hold: <c>GetIncludedTimeBetween(start, AddIncludedTime(start, time)) == time</c>. Implementers should note
            that <paramref name="includedTime" /> may be a negative time period, in which case the resulting date should still be the result of adding this
            negative period.</remarks>
      <param name="startDateTime">Start of the period.</param>
      <param name="includedTime">Time to add (in continuous, included hours).</param>
      <returns>The result of the addition.</returns>
    </member>
    <member name="M:Visiblox.Charts.IDiscontinuityProvider.FindNearestIncludedDate(System.DateTime,System.Boolean)">
      <summary>
            Calculates the nearest DateTime to the given <paramref name="dateTime" /> which is included (i.e. does not fall in a discontinuity).
            </summary>
      <remarks>If <paramref name="dateTime" /> is included this method should always return this value unchanged. However if the parameter
            does not fall in an included period, the <paramref name="forward" /> parameter indicates whether the nearest date before or after it
            should be returned.</remarks>
      <param name="dateTime">Date to check.</param>
      <param name="forward">Whether to search forward or backward.</param>
      <returns>The nearest date in the appropriate direction to <paramref name="dateTime" /> which is included in the charted periods.</returns>
    </member>
    <member name="E:Visiblox.Charts.IDiscontinuityProvider.ValueConversionChanged">
      <summary>
            Raised to indicate the conversions between the worlds of real and compressed DateTime values have changed, for example because a new
            discontinuity has been added to the provider's configuration. This will cause an <see cref="E:Visiblox.Charts.IAxis.ValueConversionChanged" /> event.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DailyHoursModeProvider.#ctor">
      <summary>
            Constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DailyHoursModeProvider.IsIncluded(System.DateTime)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DailyHoursModeProvider.GetIncludedTimeBetween(System.DateTime,System.DateTime)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DailyHoursModeProvider.AddIncludedTime(System.DateTime,System.TimeSpan)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DailyHoursModeProvider.FindNearestIncludedDate(System.DateTime,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.DailyHoursModeProvider.StartOfDayInHoursProperty">
      <summary>
            Identifies the StartOfDayInHours Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DailyHoursModeProvider.EndOfDayInHoursProperty">
      <summary>
            Identifies the EndOfDayInHours Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DailyHoursModeProvider.ExcludeDaysOfWeekProperty">
      <summary>
            Identifies the ExcludeDaysOfWeek Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DailyHoursModeProvider.IgnoreDatesProperty">
      <summary>
            Identifies the IgnoreDates Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DailyHoursModeProvider.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.DailyHoursModeProvider.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="E:Visiblox.Charts.DailyHoursModeProvider.ValueConversionChanged">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DailyHoursModeProvider.StartOfDayInHours">
      <summary>
            Time of day in (fractional) hours at which points start to be plotted - the default is 0. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DailyHoursModeProvider.EndOfDayInHours">
      <summary>
            Time of day in (fractional) hours at which points finish being plotted - the default is 24. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DailyHoursModeProvider.ExcludeDaysOfWeek">
      <summary>A list of weekdays to exclude from the plotted data. For example this might be weekends.</summary>
      <remarks>When specifying this from XAML a space-separated list such as 'Saturday Sunday' can be specified.</remarks>
    </member>
    <member name="P:Visiblox.Charts.DailyHoursModeProvider.IgnoreDates">
      <summary>
            Gets or sets the list of dates that are ignored as part of the discontinuity. These could be, for example, bank holidays. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.DailyHoursModeProvider.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Discontinuity">
      <summary>
            Represents a period of excluded time which is not to be charted (i.e. a discontinuity in the axis),
            defined by its <see cref="P:Visiblox.Charts.Discontinuity.Start" /> and <see cref="P:Visiblox.Charts.Discontinuity.End" /> times. Whether to include the start and end
            points in this period can be specified, but note that the point between two adjacent discontinuities 
            will never be charted.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Discontinuity.Includes(System.DateTime)">
      <summary>
            Determines whether the given <paramref name="dateTime" /> falls within the discontinuity.
            </summary>
      <param name="dateTime">DateTime to check</param>
      <returns>True if <paramref name="dateTime" /> falls within this period and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.Discontinuity.op_Equality(Visiblox.Charts.Discontinuity,Visiblox.Charts.Discontinuity)">
      <summary>
            Overload of the == operator which compares based on <see cref="M:Visiblox.Charts.Discontinuity.Equals(System.Object)" /> rather than 
            reference equality.
            </summary>
      <param name="a">The left side of the equality comparison.</param>
      <param name="b">The right side of the equality comparison.</param>
      <returns>True if the objects are equal and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.Discontinuity.op_Inequality(Visiblox.Charts.Discontinuity,Visiblox.Charts.Discontinuity)">
      <summary>
            Overload of the != operator which compares based on <see cref="M:Visiblox.Charts.Discontinuity.Equals(System.Object)" /> rather than 
            reference equality.
            </summary>
      <param name="a">The left side of the inequality comparison.</param>
      <param name="b">The right side of the inequality comparison.</param>
      <returns>True if the objects are not equal and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.Discontinuity.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Discontinuity.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.Discontinuity.Start">
      <summary>
            Gets or sets the start of the discontinuity.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Discontinuity.IncludeStart">
      <summary>
            Gets or sets whether the discontinuity includes its start point, or starts the moment after.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Discontinuity.End">
      <summary>
            Gets or sets the end of the discontinuity.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Discontinuity.IncludeEnd">
      <summary>
            Gets or sets whether the discontinuity includes its end point, or ends the moment before.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Discontinuity.Duration">
      <summary>
            Gets the duration of the discontinuity.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IDiscontinuityProviderWithCache">
      <summary>
            An additional interface for DiscontinuityProviders that also provides a cache size to be used.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IDiscontinuityProviderWithCache.CacheSize">
      <summary>
            Determine the size of the caches values used by the provider.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.NonRepeatingDiscontinuityProvider">
      <summary>
            Represents an <see cref="T:Visiblox.Charts.IDiscontinuityProvider" /> which calculates discontinuities on a <see cref="T:Visiblox.Charts.DiscontinuousDateTimeAxis" />
            based on a given set of discontinuous periods. This <see cref="T:Visiblox.Charts.IDiscontinuityProvider" /> is intended as the basis for providers implementing
            more specific logic: see <see cref="T:Visiblox.Charts.DailyHoursModeProvider" /> and <see cref="T:Visiblox.Charts.WeeklyHoursModeProvider" /> for more directly usable examples of this.
            </summary>
      <remarks>
        <para>This provider has a list of <see cref="P:Visiblox.Charts.NonRepeatingDiscontinuityProvider.Discontinuities" />, which are given as a <see cref="T:Visiblox.Charts.Discontinuity" />, specifying the start and
            end dates/times of the discontinuity.</para>
        <para>See <see cref="T:Visiblox.Charts.WeeklyRepeatingDiscontinuityProvider" /> for a version of this class that implements repeating discontinuities. 
            NonRepeatingDiscontinuityProvider can be constructed as an adaptor to an existing <see cref="T:Visiblox.Charts.IDiscontinuityProvider" />, resulting in date calculations which
            exclude a date if it would be excluded by either provider independently. For example, a <see cref="T:Visiblox.Charts.WeeklyRepeatingDiscontinuityProvider" />
            can be adapted to also cut out holiday dates in addition to the regularly repeating excluded periods.</para>
      </remarks>
      <example>
            The following example illustrates how this class can be used along with <see cref="T:Visiblox.Charts.WeeklyRepeatingDiscontinuityProvider" />.
            <code source="Help\Charts\IncludedCode\DiscontinuousDateTimeAxisBaseProvidersExample.cs" lang="C#" /></example>
    </member>
    <member name="M:Visiblox.Charts.NonRepeatingDiscontinuityProvider.#ctor(Visiblox.Charts.IDiscontinuityProvider,System.Collections.Generic.IEnumerable{Visiblox.Charts.Discontinuity})">
      <summary>
            Creates a new instance of a NonRepeatingDiscontinuityProvider.
            </summary>
      <param name="adapteeProvider">Provider to adapt (excluding periods excluded by either).</param>
      <param name="discontinuities">The discontinuities to include.</param>
    </member>
    <member name="M:Visiblox.Charts.NonRepeatingDiscontinuityProvider.#ctor(Visiblox.Charts.IDiscontinuityProvider)">
      <summary>
            Creates a new instance of a NonRepeatingDiscontinuityProvider.
            </summary>
      <param name="adapteeProvider">Provider to adapt (excluding periods excluded by either).</param>
    </member>
    <member name="M:Visiblox.Charts.NonRepeatingDiscontinuityProvider.#ctor">
      <summary>
            Default Constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.NonRepeatingDiscontinuityProvider.IsIncluded(System.DateTime)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.NonRepeatingDiscontinuityProvider.FindNearestIncludedDate(System.DateTime,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.NonRepeatingDiscontinuityProvider.GetIncludedTimeBetween(System.DateTime,System.DateTime)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.NonRepeatingDiscontinuityProvider.AddIncludedTime(System.DateTime,System.TimeSpan)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.NonRepeatingDiscontinuityProvider.CacheSize">
      <summary>
            Gets or sets the size of LRU cache to use.  The LRU caches are used to improve the performance of lookups in order to avoid
            having to repeat expensive discontinuity calculations.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.NonRepeatingDiscontinuityProvider.Discontinuities">
      <summary>
            Gets or sets the discontinuities to remove from the charted time period.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.NonRepeatingDiscontinuityProvider.ValueConversionChanged">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.RelativeDiscontinuity">
      <summary>
            Represents a "relative" period in time which is not to be charted, e.g. as a weekly repeating discontinuity 
            in a <see cref="T:Visiblox.Charts.WeeklyRepeatingDiscontinuityProvider" />. Whether to include the start and end
            points in this period can be specified, but note that the point between two adjacent discontinuities 
            will never be charted.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RelativeDiscontinuity.Includes(System.TimeSpan)">
      <summary>
            Determines whether the given <paramref name="time" /> falls within the discontinuity.
            </summary>
      <param name="time">Time to check.</param>
      <returns>Whether <paramref name="time" /> falls within this period.</returns>
    </member>
    <member name="M:Visiblox.Charts.RelativeDiscontinuity.op_Equality(Visiblox.Charts.RelativeDiscontinuity,Visiblox.Charts.RelativeDiscontinuity)">
      <summary>
            Equality operator
            </summary>
      <param name="a">First discontinuity</param>
      <param name="b">Second discontinuity</param>
      <returns>True if <paramref name="a" /> and <paramref name="b" /> have the same field values.</returns>
    </member>
    <member name="M:Visiblox.Charts.RelativeDiscontinuity.op_Inequality(Visiblox.Charts.RelativeDiscontinuity,Visiblox.Charts.RelativeDiscontinuity)">
      <summary>
            Inequality operator
            </summary>
      <param name="a">First discontinuity</param>
      <param name="b">Second discontinuity</param>
      <returns>True if <paramref name="a" /> and <paramref name="b" /> have differing field values.</returns>
    </member>
    <member name="M:Visiblox.Charts.RelativeDiscontinuity.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RelativeDiscontinuity.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RelativeDiscontinuity.Start">
      <summary>
            Start of the discontinuity, relative to the start of the repeating period.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RelativeDiscontinuity.IncludeStart">
      <summary>
            Gets or sets whether the discontinuity includes its start point, or starts the moment after.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RelativeDiscontinuity.End">
      <summary>
            End of the discontinuity, relative to the start of the repeating period.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RelativeDiscontinuity.IncludeEnd">
      <summary>
            Gets or sets whether the discontinuity includes its end point, or ends the moment before.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RelativeDiscontinuity.Duration">
      <summary>
            The duration of the discontinuity, i.e. <see cref="P:Visiblox.Charts.RelativeDiscontinuity.End" /> - <see cref="P:Visiblox.Charts.RelativeDiscontinuity.Start" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.WeeklyHoursModeProvider">
      <summary>
            Represents an <see cref="T:Visiblox.Charts.IDiscontinuityProvider" /> which calculates discontinuities on a <see cref="T:Visiblox.Charts.DiscontinuousDateTimeAxis" />
            based on a "weekly hours" mode of working (e.g. Monday 06.00 - Friday 20.00). Weekly start and end times are given, and these repeat indefinitely on a weekly basis,
            along with a fixed list of non-repeating ignored dates.
            </summary>
      <remarks>
        <para>The included period each week is from <see cref="P:Visiblox.Charts.WeeklyHoursModeProvider.StartOfWeekHour" /> on <see cref="P:Visiblox.Charts.WeeklyHoursModeProvider.StartOfWeekDay" /> to
            <see cref="P:Visiblox.Charts.WeeklyHoursModeProvider.EndOfWeekHour" /> on <see cref="P:Visiblox.Charts.WeeklyHoursModeProvider.EndOfWeekDay" />. It is permissible to give a weekly period which starts later
            in the week than it ends, as the weekly period simply spans two calendar weeks. 
            The defined included/excluded periods repeat indefinitely on a weekly basis. Furthermore, any dates in <see cref="P:Visiblox.Charts.WeeklyHoursModeProvider.IgnoreDates" />
            are excluded entirely.</para>
      </remarks>
      <example>The following XAML defines a DiscontinuousDateTimeAxis where the hours charted are Monday 06.00 - Friday 20.00:
            <code source="Help\Charts\IncludedCode\DiscontinuousDateTimeAxisWeeklyHoursExample.xml" lang="XAML" /></example>
    </member>
    <member name="M:Visiblox.Charts.WeeklyHoursModeProvider.#ctor">
      <summary>
            Constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.WeeklyHoursModeProvider.IsIncluded(System.DateTime)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WeeklyHoursModeProvider.GetIncludedTimeBetween(System.DateTime,System.DateTime)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WeeklyHoursModeProvider.AddIncludedTime(System.DateTime,System.TimeSpan)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WeeklyHoursModeProvider.FindNearestIncludedDate(System.DateTime,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.WeeklyHoursModeProvider.IgnoreDatesProperty">
      <summary>
            Identifies the IgnoreDates Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.WeeklyHoursModeProvider.StartOfWeekDayProperty">
      <summary>
            Identifies the StartOfWeekDay Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.WeeklyHoursModeProvider.StartOfWeekHourProperty">
      <summary>
            Identifies the StartOfWeekHour Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.WeeklyHoursModeProvider.EndOfWeekDayProperty">
      <summary>
            Identifies the EndOfWeekDay Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.WeeklyHoursModeProvider.EndOfWeekHourProperty">
      <summary>
            Identifies the EndOfWeekHour Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.WeeklyHoursModeProvider.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.WeeklyHoursModeProvider.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="E:Visiblox.Charts.WeeklyHoursModeProvider.ValueConversionChanged">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.WeeklyHoursModeProvider.IgnoreDates">
      <summary>
            Gets or sets the list of dates that are ignored as part of the discontinuity. These could be, for example, bank holidays. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.WeeklyHoursModeProvider.StartOfWeekDay">
      <summary>
            The first day of the included weekly period, i.e. the first day of the working week. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.WeeklyHoursModeProvider.StartOfWeekHour">
      <summary>
            The start hour (within the first day) of the included weekly period. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.WeeklyHoursModeProvider.EndOfWeekDay">
      <summary>
            The last day of the included weekly period, i.e. the last day of the working week. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.WeeklyHoursModeProvider.EndOfWeekHour">
      <summary>
            The end hour (within the last day) of the included weekly period. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.WeeklyHoursModeProvider.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.WeeklyRepeatingDiscontinuityProvider">
      <summary>
            Represents an <see cref="T:Visiblox.Charts.IDiscontinuityProvider" /> which calculates discontinuities on a <see cref="T:Visiblox.Charts.DiscontinuousDateTimeAxis" />
            based on a given set of discontinuous periods within a week, repeating indefinitely. This <see cref="T:Visiblox.Charts.IDiscontinuityProvider" /> is intended as the basis for providers implementing
            more specific logic: see <see cref="T:Visiblox.Charts.DailyHoursModeProvider" /> and <see cref="T:Visiblox.Charts.WeeklyHoursModeProvider" /> for more directly usable examples of this.
            </summary>
      <remarks>This provider has a list of <see cref="P:Visiblox.Charts.WeeklyRepeatingDiscontinuityProvider.WeeklyDiscontinuities" />, which are given as a <see cref="T:Visiblox.Charts.RelativeDiscontinuity" /> - a pair of 
            offsets from the start of the week (defined as midnight on Sunday morning). The calculation of this class is such that calculations spanning
            many weeks should be about as efficient as those spanning only one week.</remarks>
      <remarks>See <see cref="T:Visiblox.Charts.NonRepeatingDiscontinuityProvider" /> for a version of this class that implements non-repeating discontinuities, and can
            also be composed with another <see cref="T:Visiblox.Charts.IDiscontinuityProvider" />.</remarks>
      <example>
            The following example illustrates how this class can be used along with <see cref="T:Visiblox.Charts.NonRepeatingDiscontinuityProvider" />.
            <code source="Help\Charts\IncludedCode\DiscontinuousDateTimeAxisBaseProvidersExample.cs" lang="C#" /></example>
    </member>
    <member name="M:Visiblox.Charts.WeeklyRepeatingDiscontinuityProvider.#ctor(System.Collections.Generic.IEnumerable{Visiblox.Charts.RelativeDiscontinuity})">
      <summary>
            Constructor.
            </summary>
      <param name="weeklyDiscontinuities">Initial discontinuities.</param>
    </member>
    <member name="M:Visiblox.Charts.WeeklyRepeatingDiscontinuityProvider.#ctor">
      <summary>
            Constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.WeeklyRepeatingDiscontinuityProvider.IsIncluded(System.DateTime)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WeeklyRepeatingDiscontinuityProvider.GetIncludedTimeBetween(System.DateTime,System.DateTime)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WeeklyRepeatingDiscontinuityProvider.FindNearestIncludedDate(System.DateTime,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WeeklyRepeatingDiscontinuityProvider.AddIncludedTime(System.DateTime,System.TimeSpan)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.WeeklyRepeatingDiscontinuityProvider.WeeklyDiscontinuities">
      <summary>
            Gets or sets the list of weekly discontinuities. These are discontinuities relative to midnight on Sunday, which will 
            occur on a weekly repeating basis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.WeeklyRepeatingDiscontinuityProvider.CacheSize">
      <summary>
            Gets or sets the size of LRU cache to use.  The LRU caches are used to improve the performance of lookups in order to avoid
            having to repeat expensive discontinuity calculations.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.WeeklyRepeatingDiscontinuityProvider.ValueConversionChanged">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.AnnotationBehaviour">
      <summary>
            A behaviour for managing the creation of <see cref="T:Visiblox.Charts.IAnnotation" /> objects.
            <see cref="P:Visiblox.Charts.IBehaviour.AcceptedSources" /> is set by default to only accept events from the PlotArea - 
            unexpected results may currently occur if this is changed so that events from axes are also handled.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBehaviour.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBehaviour.DeInit">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AnnotationBehaviour.PointerPressed(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
      <summary>
            Override of <see cref="T:Visiblox.Charts.BehaviourBase" /> that handles the pointer being pressed. 
            This initiates the creation of an annotation.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBehaviour.PointerMoved(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
      <summary>
            Override of <see cref="T:Visiblox.Charts.BehaviourBase" /> that handles the pointer moving.
            The move must have been initiated in the plot area.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBehaviour.PointerReleased(Visiblox.Charts.IBehaviourEventSource,Visiblox.Charts.PointerEventContext)">
      <inheritdoc />
      <summary>
            Override of <see cref="T:Visiblox.Charts.BehaviourBase" /> that handles the pointer being
            released. If the button was initially pressed in the plot area then the zoom is
            initiated; it is ignored otherwise.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationBehaviour.PointerCaptureLost(Visiblox.Charts.IBehaviourEventSource)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.AnnotationBehaviour.CancelOperation">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.AnnotationBehaviour.CreationAnnotation">
      <summary>
            The annotation being created currently.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBehaviour.LastMousePosition">
      <summary>
            Gets or sets the last position the mouse was positioned at.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBehaviour.LeftMouseDownPosition">
      <summary>
            Gets or sets the last position the left mouse button was pressed down at.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBehaviour.Annotation">
      <summary>
            The current <see cref="T:Visiblox.Charts.IAnnotation" /> that is being modified.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.AnnotationBehaviour.AnnotationFactory">
      <summary>
            Annotation factory to use to construct annotations.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.AnnotationBehaviour.AnnotationDrawingStarted">
      <summary>
            Event indicating that the drawing of a new annotation has started.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.AnnotationBehaviour.AnnotationAdded">
      <summary>
            Event indicating that a newly drawn annotation has been added to the chart.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AnnotationEventArgs">
      <summary>
            Represents the arguments of an annotation creation event.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AnnotationEventArgs.#ctor(Visiblox.Charts.IAnnotation)">
      <summary>
            Constructor.
            </summary>
      <param name="annotation">The annotation being created.</param>
    </member>
    <member name="P:Visiblox.Charts.AnnotationEventArgs.Annotation">
      <summary>
            The annotation being created.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.AnnotationEventHandler">
      <summary>
            Handler for an annotation related event
            </summary>
      <param name="sender">AnnotationBehaviour raising the event</param>
      <param name="e">Event arguments</param>
    </member>
    <member name="T:Visiblox.Charts.FilteredDataSeries">
      <summary>
            FilteredDataSeries is a data series adapter that permits 
                the series to filter-out data points in response to changes in the chart axis.  
                Typically this would be used to increase the density of the data points as the user 
                zooms in, revealing more detailed data, applying data sampling algorithms or restricting the data series 
                content to what is currently visible in the chart's view port. The algorithm for choosing the data points 
                is pluggable in the form of a strategy, <see cref="P:Visiblox.Charts.FilteredDataSeries.FilterStrategy" />.
            </summary>
      <remarks>
                If either of the chart axes do not have an explicit Range set, 
                the scale will be selected automatically to match the extents of the data series. 
                With the FilteredDataSeries, change in the filtered data range might result in sudden changes 
                of the axis range if the application of the strategy affects the data extents. Using <see cref="P:Visiblox.Charts.FilteredDataSeries.ForceRangeToUnfilteredData" /> will cause
                the FilteredDataSeries to set explicit ranges covering full range of the unfiltered data on either axis if it does not already have an
                explicit range
            </remarks>
      <remarks>
        <see cref="P:Visiblox.Charts.FilteredDataSeries.ChartSeries" /> should not be set manually.  Any subclass of <see cref="T:Visiblox.Charts.ChartSeriesCommonBase" /> will automatically set itself to any 
               instance of IChartSeriesAwareDataSeries.  You only need to set ChartSeries if you are implementing your own chart series without extending 
               <see cref="T:Visiblox.Charts.ChartSeriesCommonBase" />.
            </remarks>
      <seealso cref="T:Visiblox.Charts.IFilterStrategy" />
      <seealso cref="T:Visiblox.Charts.DynamicFilterStrategy" />
      <seealso cref="T:Visiblox.Charts.IterativeEndPointFitFilterStrategy" />
      <seealso cref="T:Visiblox.Charts.RenderProximityFilterStrategy" />
      <seealso cref="T:Visiblox.Charts.SampleStatisticsFilterStrategy" />
      <seealso cref="T:Visiblox.Charts.SimpleSamplingFilterStrategy" />
    </member>
    <member name="M:Visiblox.Charts.FilteredDataSeries.#ctor">
      <summary>
            Default Constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.FilteredDataSeries.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.FilteredDataSeries.AsList">
      <summary>
            Return the filtered data as a list, if the strategy should support it
            </summary>
    </member>
    <member name="M:Visiblox.Charts.FilteredDataSeries.DeInit">
      <summary>
            De-initialises this data series.  This must be called at the point the data series is no longer going to be used to remove any
            event handlers and perform any other clean-up required.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.FilteredDataSeries.ForceReset">
      <summary>
            Raises a CollectionChanged Reset event
            </summary>
    </member>
    <member name="M:Visiblox.Charts.FilteredDataSeries.GetSearchableSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.FilteredDataSeries.GetSearchableSeries(System.Comparison{Visiblox.Charts.IDataPoint})">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.FilteredDataSeries.FilterStrategyProperty">
      <summary>
            Identifies the FilterStrategy Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.FilteredDataSeries.ChartSeriesProperty">
      <summary>
            Identifies the ChartSeries Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.FilteredDataSeries.OriginalDataSeriesProperty">
      <summary>
            Identifies the OriginalDataSeries Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.FilteredDataSeries.ForceRangeToUnfilteredDataProperty">
      <summary>
            Identifies the ForceRangeToUnfilteredData Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.FilteredDataSeries.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.FilteredDataSeries.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.FilteredDataSeries.Title">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.FilteredDataSeries.IgnoreFilterStrategyCollectionChangedEvents">
      <summary>
            If true, CollectionChanged events coming from the <see cref="P:Visiblox.Charts.FilteredDataSeries.FilterStrategy" /> aren't passed on.  
            That will mean a call to <see cref="M:Visiblox.Charts.FilteredDataSeries.ForceReset" /> will be needed to ensure the correct filter output.  
            Defaults to false.  
            </summary>
    </member>
    <member name="E:Visiblox.Charts.FilteredDataSeries.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.FilteredDataSeries.PropertyChangedRelay">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.FilteredDataSeries.FilterStrategy">
      <summary>
            Gets or sets the filter strategy to filter data points in the original data series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.FilteredDataSeries.ChartSeries">
      <summary>
            Gets or sets the chart series to which this FilteredDataSeries is attached.  Note this will be set by the ChartSeries automatically and shouldn't be set externally. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.FilteredDataSeries.OriginalDataSeries">
      <summary>
            Gets or sets the original unfiltered data series which this FilteredDataSeries wraps. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.FilteredDataSeries.ForceRangeToUnfilteredData">
      <summary>
            Gets or sets whether the FilteredDataSeries should assign an explicit range to axes which don't yet have one based on the full range of the unfiltered data. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.FilteredDataSeries.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DynamicFilterStrategy">
      <summary>
            This implementation of <see cref="T:Visiblox.Charts.IFilterStrategy" /> allows for a different filter strategy to be configured depending on the chart's 
            zoom level.  The axis on which to check for zoom changes can be configured using the <see cref="P:Visiblox.Charts.DynamicFilterStrategy.FilterMode" /> property.
            </summary>
      <seealso cref="T:Visiblox.Charts.FilteredDataSeries" />
    </member>
    <member name="M:Visiblox.Charts.DynamicFilterStrategy.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DynamicFilterStrategy.GetEnumerator">
      <summary>
            Returns the enumerator over the data based on the currently active filter.  If no filter is active (e.g. there are no filters defined)
            an empty enumerator is returned.
            </summary>
      <returns>The enumerator over the data.</returns>
    </member>
    <member name="M:Visiblox.Charts.DynamicFilterStrategy.Init(Visiblox.Charts.IAxis,Visiblox.Charts.IAxis,Visiblox.Charts.IDataSeries)">
      <inheritdoc />
      <remarks>
            This method initialises the currently active filter strategy only.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.DynamicFilterStrategy.OnOriginalCollectionChanged(Visiblox.Charts.IDataSeries,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <inheritdoc />
      <remarks>
            This method forwards the call to the currently active filter strategy only.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.DynamicFilterStrategy.OnXAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <inheritdoc />
      <remarks>
            This method forwards the axis events to the currently active filter only.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.DynamicFilterStrategy.OnYAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <inheritdoc />
      <remarks>
            This method forwards the axis events to the currently active filter only.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.DynamicFilterStrategy.GetSearchableSeries">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.DynamicFilterStrategy.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.DynamicFilterStrategy.PropertyChangedRelay">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.DynamicFilterStrategy.FilterChanged">
      <summary>
            This event is raised whenever the current active filter changes based on the zoom level
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DynamicFilterStrategy.FilterStrategies">
      <summary>
            The filter strategies to apply at different zoom levels.  This must not be null.  This list may be resorted and the first
            entry (i.e. that with the largest zoom scale) will be used to cover all zoom scales up to but not including the next smallest zoom
            scale defined.  Note that dynamic changes to this list will not be automatically applied until the next event that could cause a change
            in the filter strategy (e.g. a zoom level change or an initialisation event)
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DynamicFilterStrategy.FilterMode">
      <summary>
            Determines whether to filter based on the X axis' or the Y axis' zoom level.  Defaults to X axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DynamicFilterStrategy.IsInitialised">
      <inheritdoc />
      <remarks>
            This returns true if and only if the currently active filter strategy attached via the <see cref="P:Visiblox.Charts.DynamicFilterStrategy.FilterStrategies" /> collection
            also returns true.
            </remarks>
    </member>
    <member name="T:Visiblox.Charts.FilterStrategyZoomScale">
      <summary>
            This class represents a filter strategy to be applied at a given zoom scale level.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.FilterStrategyZoomScale.CompareTo(System.Object)">
      <inheritdoc />
      <remarks>
            This implementation is based on the comparison of <see cref="P:Visiblox.Charts.FilterStrategyZoomScale.ZoomScale" /> properties.
            </remarks>
    </member>
    <member name="P:Visiblox.Charts.FilterStrategyZoomScale.FilterStrategy">
      <summary>
            The filter strategy to apply at this scale.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.FilterStrategyZoomScale.ZoomScale">
      <summary>
            The zoom scale below which to start using this filter strategy.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.FilterChangedEventArgs">
      <summary>
            Event arguments for a FilterChanged event.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.FilterChangedEventArgs.#ctor(Visiblox.Charts.IFilterStrategy,Visiblox.Charts.IFilterStrategy)">
      <summary>
            Constructs a new event arguments for a FiltereChanged event.
            </summary>
      <param name="oldStrategy">The old filter, before the change.  May be null.</param>
      <param name="newStrategy">The new filter, after the change.  May be null.</param>
    </member>
    <member name="P:Visiblox.Charts.FilterChangedEventArgs.OldFilterStrategy">
      <summary>
            The filter before the event occurred.  May be null.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.FilterChangedEventArgs.NewFilterStrategy">
      <summary>
            The filter after the event occurred.  May be null.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DynamicFilterMode">
      <summary>
            Enumeration of whether to filter on the X or Y axis
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DynamicFilterMode.FilterOnXAxisZoom">
      <summary>
            Determines that filtering should take place on the basis of the XAxis' zoom scale.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DynamicFilterMode.FilterOnYAxisZoom">
      <summary>
            Determines that filtering should take place on the basis of the YAxis' zoom scale.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RenderProximityEnumerator">
      <summary>
            An implementation of an enumerator which iterates over an underlying enumerator and if multiple points would be rendered at the same pixel,
            it returns only the first. The "same pixel" area is defined from the tolerance.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RenderProximityEnumerator.#ctor(System.Collections.IEnumerator,System.Double,Visiblox.Charts.IAxis,Visiblox.Charts.IAxis,System.Boolean)">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RenderProximityEnumerator.MoveNext">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RenderProximityEnumerator.Reset">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RenderProximityEnumerator.Current">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.RenderProximityFilterStrategy">
      <summary>
            This implementation of <see cref="T:Visiblox.Charts.IFilterStrategy" /> maybe be used in conjunction with a <see cref="T:Visiblox.Charts.FilteredDataSeries" /> to filter out
            the points that will be rendered on the same pixel, or very close to an existing data point. 
            In order to determine if two points will be rendered on the same pixel, we calculate the
            Euclidean distance and compare it to the <see cref="P:Visiblox.Charts.RenderProximityFilterStrategy.Tolerance" /> property. The larger the <see cref="P:Visiblox.Charts.RenderProximityFilterStrategy.Tolerance" />, the fewer points will
            be rendered.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RenderProximityFilterStrategy.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RenderProximityFilterStrategy.Init(Visiblox.Charts.IAxis,Visiblox.Charts.IAxis,Visiblox.Charts.IDataSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RenderProximityFilterStrategy.OnOriginalCollectionChanged(Visiblox.Charts.IDataSeries,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RenderProximityFilterStrategy.ForceReset">
      <summary>
            Force the filter strategy to re-filter the original data series
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RenderProximityFilterStrategy.OnXAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RenderProximityFilterStrategy.OnYAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RenderProximityFilterStrategy.GetSearchableSeries">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.RenderProximityFilterStrategy.ToleranceProperty">
      <summary>
            Identifies the Tolerance Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RenderProximityFilterStrategy.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.RenderProximityFilterStrategy.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="E:Visiblox.Charts.RenderProximityFilterStrategy.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.RenderProximityFilterStrategy.PropertyChangedRelay">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RenderProximityFilterStrategy.IsInitialised">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RenderProximityFilterStrategy.Tolerance">
      <summary>
            Gets or sets the tolerance property. Setting this will set the tolerance that the filter strategy uses to compare the points. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.RenderProximityFilterStrategy.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.SampleStatisticsFilterStrategy">
      <summary>
            Represents all of the points falling with a SampleWindow with a statistic of those points.  
            </summary>
      <seealso cref="T:Visiblox.Charts.FilteredDataSeries" />
      <seealso cref="T:Visiblox.Charts.IStatisticalAlgorithm" />
      <seealso cref="T:Visiblox.Charts.MeanYValue" />
      <seealso cref="T:Visiblox.Charts.MaximumYValue" />
      <seealso cref="T:Visiblox.Charts.MinimumYValue" />
      <seealso cref="T:Visiblox.Charts.TotalYValue" />
      <seealso cref="T:Visiblox.Charts.YValueSpread" />
    </member>
    <member name="M:Visiblox.Charts.SampleStatisticsFilterStrategy.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SampleStatisticsFilterStrategy.GetSearchableSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SampleStatisticsFilterStrategy.Init(Visiblox.Charts.IAxis,Visiblox.Charts.IAxis,Visiblox.Charts.IDataSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SampleStatisticsFilterStrategy.OnOriginalCollectionChanged(Visiblox.Charts.IDataSeries,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SampleStatisticsFilterStrategy.OnXAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SampleStatisticsFilterStrategy.OnYAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.SampleStatisticsFilterStrategy.SampleWindowProperty">
      <summary>
            Identifies the SampleWindow Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.SampleStatisticsFilterStrategy.StatisticProperty">
      <summary>
            Identifies the Statistic Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.SampleStatisticsFilterStrategy.UseOnlyFullSamplesProperty">
      <summary>
            Identifies the UseOnlyFullSamples Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.SampleStatisticsFilterStrategy.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.SampleStatisticsFilterStrategy.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.SampleStatisticsFilterStrategy.IsInitialised">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.SampleStatisticsFilterStrategy.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.SampleStatisticsFilterStrategy.PropertyChangedRelay">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.SampleStatisticsFilterStrategy.SampleWindow">
      <summary>
            Gets or sets the size of the sample window used for computing statistics.  Defaults to 1. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.SampleStatisticsFilterStrategy.Statistic">
      <summary>
            Gets or sets the sample statistic to use.  Defaults to null. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.SampleStatisticsFilterStrategy.UseOnlyFullSamples">
      <summary>
            Gets or sets whether any partially filled final sample results in a data point in the filtered series.  Defaults to false. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.SampleStatisticsFilterStrategy.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.SimpleSamplingEnumerator">
      <summary>
            An implementation of an enumerator which iterates over an underlying enumerator returning every Nth point.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.SimpleSamplingEnumerator.#ctor(System.Collections.IEnumerator,System.Int32)">
      <summary>
            Constructs a new enumerator
            </summary>
      <param name="originalEnumerator">The underlying enumerator over which to iterate.  Must not be null.</param>
      <param name="samplingFrequency">The frequency with which to return objects from the underlying enumerator.  Must be positive.  
            A value of 1 will return every item, a value of 2 will return every second item, and so on.</param>
    </member>
    <member name="M:Visiblox.Charts.SimpleSamplingEnumerator.MoveNext">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SimpleSamplingEnumerator.Reset">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.SimpleSamplingEnumerator.Current">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.SimpleSamplingFilterStrategy">
      <summary>
            This implementation of <see cref="T:Visiblox.Charts.IFilterStrategy" /> maybe be used in conjunction with a <see cref="T:Visiblox.Charts.FilteredDataSeries" /> to apply a simple
            filtering of every "Nth" point in the original series, starting with the first point in the original series which is always displayed.  
            The value of N is controlled by modifying the <see cref="P:Visiblox.Charts.SimpleSamplingFilterStrategy.SampleRate" /> property.
            For example, setting that to 5 will cause the strategy to filter the data so that only every 5th point is displayed.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.SimpleSamplingFilterStrategy.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SimpleSamplingFilterStrategy.Init(Visiblox.Charts.IAxis,Visiblox.Charts.IAxis,Visiblox.Charts.IDataSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SimpleSamplingFilterStrategy.OnOriginalCollectionChanged(Visiblox.Charts.IDataSeries,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SimpleSamplingFilterStrategy.OnXAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SimpleSamplingFilterStrategy.OnYAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.SimpleSamplingFilterStrategy.GetSearchableSeries">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.SimpleSamplingFilterStrategy.SampleRateProperty">
      <summary>
            Identifies the SampleRate Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.SimpleSamplingFilterStrategy.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.SimpleSamplingFilterStrategy.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="E:Visiblox.Charts.SimpleSamplingFilterStrategy.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.SimpleSamplingFilterStrategy.PropertyChangedRelay">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.SimpleSamplingFilterStrategy.IsInitialised">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.SimpleSamplingFilterStrategy.SampleRate">
      <summary>
            Gets or sets the sample rate property.  Setting this will determine the period with which the filter strategy retains points. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.SimpleSamplingFilterStrategy.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IterativeEndPointFitFilterStrategy">
      <summary>
            An implementation of the <a href="http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm">Ramer-Douglas-Peucker algorithm</a>.
            In brief, this filter preserves the overall shape of a series but leaves out fine-grained detail.  It does this by recursively omitting datapoints that 
            would be rendered too far from the line drawn between two end points.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IterativeEndPointFitFilterStrategy.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.IterativeEndPointFitFilterStrategy.Init(Visiblox.Charts.IAxis,Visiblox.Charts.IAxis,Visiblox.Charts.IDataSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.IterativeEndPointFitFilterStrategy.OnOriginalCollectionChanged(Visiblox.Charts.IDataSeries,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.IterativeEndPointFitFilterStrategy.ComputeToleranceInPixels(System.Double)">
      <summary>
            Computes to mapping of tolerance to pixels.  By default the tolerance is mapped to pixels 1:1 but 
            this method may be overridden to alter the way that mapping is done.
            </summary>
      <param name="tolerance">The tolerance to apply.</param>
      <returns>The number of pixels represented by that tolerance.</returns>
    </member>
    <member name="M:Visiblox.Charts.IterativeEndPointFitFilterStrategy.OnXAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.IterativeEndPointFitFilterStrategy.OnYAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.IterativeEndPointFitFilterStrategy.GetSearchableSeries">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.IterativeEndPointFitFilterStrategy.MaximumDistanceFromLineSegmentProperty">
      <summary>
            Identifies the MaximumDistanceFromLineSegment Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.IterativeEndPointFitFilterStrategy.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.IterativeEndPointFitFilterStrategy.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.IterativeEndPointFitFilterStrategy.IsInitialised">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.IterativeEndPointFitFilterStrategy.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.IterativeEndPointFitFilterStrategy.PropertyChangedRelay">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.IterativeEndPointFitFilterStrategy.MaximumDistanceFromLineSegment">
      <summary>
            Gets or sets the maximum distance a data point can diverge from a line segment containing it before it is included in its own segment.  Should be non-negative.  . This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.IterativeEndPointFitFilterStrategy.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.Segment">
      <summary>
            Represents a stretch of line spanning two or more data points where only the end points are visible.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.Segment.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructs a new segment.
            </summary>
      <param name="from">The index into the original list from which this segment runs.</param>
      <param name="to">The index into the original list to which this segment runs.</param>
    </member>
    <member name="M:Visiblox.Charts.Segment.CompareTo(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Segment.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.Segment.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.Segment.FromIndex">
      <summary>
            The index into the original list from which this segment starts.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Segment.ToIndex">
      <summary>
            The index into the original list to which this segment runs.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.Segment.Span">
      <summary>
            The number of data points spanned by this segment.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IStatisticalAlgorithm">
      <summary>
            Represents an algorithm used by <see cref="T:Visiblox.Charts.SampleStatisticsFilterStrategy" /> to compute a statistic from a sample of data points.  
            </summary>
      <seealso cref="T:Visiblox.Charts.MeanYValue" />
      <seealso cref="T:Visiblox.Charts.MaximumYValue" />
      <seealso cref="T:Visiblox.Charts.MinimumYValue" />
      <seealso cref="T:Visiblox.Charts.TotalYValue" />
      <seealso cref="T:Visiblox.Charts.YValueSpread" />
    </member>
    <member name="M:Visiblox.Charts.IStatisticalAlgorithm.AddToSample(Visiblox.Charts.IDataPoint)">
      <summary>
            Adds a sample point to the sample.  <see cref="P:Visiblox.Charts.IStatisticalAlgorithm.CurrentSampleSize" /> should be incremented by one once this has been called.  
            </summary>
      <param name="sample">
      </param>
    </member>
    <member name="M:Visiblox.Charts.IStatisticalAlgorithm.ClearSample">
      <summary>
            Clears the current sample.  <see cref="P:Visiblox.Charts.IStatisticalAlgorithm.CurrentSampleSize" /> should be zero after this has been called.  
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IStatisticalAlgorithm.IsValid">
      <summary>
            True if <see cref="P:Visiblox.Charts.IStatisticalAlgorithm.SampledPoints" /> now holds meaningful values.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IStatisticalAlgorithm.NumberOfSampledPointsPerSample">
      <summary>
            The number of SampledPoints returned by this statistical algorithm for each sample.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IStatisticalAlgorithm.SampledPoints">
      <summary>
            The data point or data points which result from the sampling 
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IStatisticalAlgorithm.CurrentSampleSize">
      <summary>
            The number of sample points currently in the sample.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.MaximumYValue">
      <summary>
            Provides the x and y value of the sample point with the highest y value.  If more than one sample point has that minimum y value then the most recently added one is returned.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.MaximumYValue.#ctor">
      <summary>
            Constructs a new <see cref="T:Visiblox.Charts.MaximumYValue" />, which will have an empty sample.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.MaximumYValue.AddToSample(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.MaximumYValue.ClearSample">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.MaximumYValue.IsValid">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.MaximumYValue.NumberOfSampledPointsPerSample">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.MaximumYValue.SampledPoints">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.MaximumYValue.CurrentSampleSize">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.MeanYValue">
      <summary>
            Computes the mean of the Y values provided and and the midpoint of the X values.  
            Assumes that the supplied samples are ordered by X.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.MeanYValue.AddToSample(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.MeanYValue.ClearSample">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.MeanYValue.CurrentSampleSize">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.MeanYValue.IsValid">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.MeanYValue.NumberOfSampledPointsPerSample">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.MeanYValue.SampledPoints">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.MinimumYValue">
      <summary>
            Provides the x and y value of the sample point with the lowest y value.  If more than one sample point has that maximum y value then the most recently added one is returned.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.MinimumYValue.#ctor">
      <summary>
            Constructs a new <see cref="T:Visiblox.Charts.MinimumYValue" />, which will have an empty sample.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.MinimumYValue.AddToSample(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.MinimumYValue.ClearSample">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.MinimumYValue.IsValid">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.MinimumYValue.NumberOfSampledPointsPerSample">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.MinimumYValue.SampledPoints">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.MinimumYValue.CurrentSampleSize">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.TotalYValue">
      <summary>
            Computes the total of the Y values provided and the midpoint of the X values.  
            Assumes that the supplied samples are ordered by X.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TotalYValue.AddToSample(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.TotalYValue.ClearSample">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.TotalYValue.CurrentSampleSize">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.TotalYValue.IsValid">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.TotalYValue.NumberOfSampledPointsPerSample">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.TotalYValue.SampledPoints">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.YValueSpread">
      <summary>
            Computes the mean, min and max of the Y values provided and and the midpoint of the X values.  
            Assumes that the supplied samples are ordered by X.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.YValueSpread.AddToSample(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.YValueSpread.ClearSample">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.YValueSpread.CurrentSampleSize">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.YValueSpread.IsValid">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.YValueSpread.NumberOfSampledPointsPerSample">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.YValueSpread.SampledPoints">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.WindowedFilterStrategy">
      <summary>
            An implementation of a filter strategy for the <see cref="M:Visiblox.Charts.WindowedFilterStrategy.GetEnumerator" /> which deals with exposing only
            the currently visible data. This allows for very large data series without needing to render all the data every time.
            </summary>
      <remarks>
            Note that this strategy requires that the original data series is sorted (by X or 'X then Y') - it must either implement, or contain an implementation of ISearchableSeries.
            Data will be returned in the order specified by the original order but points inside the current window, positioned subsequent to a point
            outside the upper edge of the window in the original series will not be included in the window.
            </remarks>
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.Init(Visiblox.Charts.IAxis,Visiblox.Charts.IAxis,Visiblox.Charts.IDataSeries)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.OnOriginalCollectionChanged(Visiblox.Charts.IDataSeries,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.OnXAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.OnYAxisEvent(Visiblox.Charts.IAxis,Visiblox.Charts.AxisEventTypes)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.GetSearchableSeries">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.GetItemsOfValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.GetItemsAfterValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.GetItemsBeforeValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.GetItemsAfterValueInclusive(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.GetItemsBeforeValueInclusive(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.GetItemBeforeValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.GetItemAfterValue(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.FindIndexToInsertItem(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.Sort">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.IndexOf(System.Object)">
      <summary>
            Optimisation - use ISearchableSeries
            </summary>
    </member>
    <member name="M:Visiblox.Charts.WindowedFilterStrategy.Contains(System.Object)">
      <summary>
            Optimisation - use ISearchableSeries
            </summary>
    </member>
    <member name="P:Visiblox.Charts.WindowedFilterStrategy.PaddingFactor">
      <summary>
            This property determines how much of the width of a chart to render either side for smooth panning.
            The default value of 1.0 means one chart width either side will be rendered.
            The exact limit actually includes the next <see cref="T:Visiblox.Charts.IDataPoint" /> outside these bounds, if it exists.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.WindowedFilterStrategy.RecomputeBoundsOnZoom">
      <summary>
            If true, window bounds are recomputed on any zoom.  Defaults to false.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.WindowedFilterStrategy.IsInitialised">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.WindowedFilterStrategy.Comparison">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.WindowedFilterStrategy.Item(System.Int32)">
      <summary>
            Indexer via source indexer
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Visiblox.Charts.WindowedFilterStrategy.Count">
      <summary>
            Calculate count directly via cached bounds
            </summary>
    </member>
    <member name="T:Visiblox.Charts.InvalidLicenseException">
      <summary>
            Thrown when an invalid validation key has been detected.  
            </summary>
    </member>
    <member name="M:Visiblox.Charts.InvalidLicenseException.#ctor(Visiblox.Charts.LicenseExceptionType)">
      <summary>
            Sets a pre-defined exception message based on the <paramref name="type" />.  
            </summary>
      <param name="type">
      </param>
    </member>
    <member name="T:Visiblox.Charts.LicenseExceptionType">
      <summary>
            enum listing the ways in which a license validation key can be invalid.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LicenseExceptionType.Expired">
      <summary>
            The specified trial period has expired.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LicenseExceptionType.Invalid">
      <summary>
            There is something wrong with the <see cref="P:Visiblox.Charts.ILicensed.ValidationKey" /> provided, if one has been provided at all.  
            It may be truncated, edited or in some way differ from the key that was provided with the trial.  
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LicenseExceptionType.Missing">
      <summary>
            No <see cref="P:Visiblox.Charts.ILicensed.ValidationKey" /> has been provided - in the trial version all <see cref="T:Visiblox.Charts.Chart" /> instances
            need to have their <see cref="P:Visiblox.Charts.ILicensed.ValidationKey" /> property set to the key emailed to you at the start of the trial.  
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IRadialAxis">
      <summary>
            Represents a radial chart axis.
            </summary>
      <remarks>
        <para>
            A <see cref="T:Visiblox.Charts.IRadialAxis" /> is rendered on the plot area of a <see cref="T:Visiblox.Charts.RadialChart" />.
            It has the responsibility to render ticks, grid lines and labels, however it's the responsibility of the <see cref="T:Visiblox.Charts.RadialChart" />
            to calculate the render positions of this elements and pass this information to methods responsible for the actual rendering on this interface.
            </para>
        <para>
            The <see cref="T:Visiblox.Charts.IRadialAxis" /> also responsible for calculations converting between data values and values used by <see cref="T:Visiblox.Charts.RadialRenderPositionCalculator" />
            to calculate the render position. If the <see cref="T:System.Windows.Controls.Orientation" /> of the axis is horizontal, the <see cref="M:Visiblox.Charts.IRadialAxis.GetDataValueAsAngle(System.IComparable)" /> method returns this information,
            if it is vertical, the <see cref="M:Visiblox.Charts.IRadialAxis.GetDataValueAsRatio(System.IComparable)" /> returns it.
            </para>
      </remarks>
    </member>
    <member name="M:Visiblox.Charts.IRadialAxis.Init(System.Windows.Controls.Orientation)">
      <summary>
            Invoked by the chart when an axis is initially added to the chart.</summary>
      <remarks>
            This method allows the axis to set its <paramref name="orientation" />. 
            </remarks>
      <param name="orientation">The orientation of the axis (i.e. vertical or horizontal).</param>
    </member>
    <member name="M:Visiblox.Charts.IRadialAxis.GetDataValueAsAngle(System.IComparable)">
      <summary>
            Determines the angle at which <paramref name="dataValue" /> will be rendered at.
            </summary>
      <param name="dataValue">The data value to be rendered at an angle.</param>
      <returns>The angle to render the given data value at.</returns>
    </member>
    <member name="M:Visiblox.Charts.IRadialAxis.GetDataValueAsRatio(System.IComparable)">
      <summary>
            Determines the ratio of the <paramref name="dataValue" /> with respect to its position in the range.
            </summary>
      <param name="dataValue">The data value to be converted to a ratio.</param>
      <returns>The ratio representation of the given data value.</returns>
    </member>
    <member name="M:Visiblox.Charts.IRadialAxis.GetMajorTickValues">
      <summary>
             Calculates the major tick values to be displayed, using the current effective range of the axis.
            </summary>
      <seealso cref="M:Visiblox.Charts.IRadialAxis.GetMinorTickValues" />
      <returns>A list of major tick values.</returns>
    </member>
    <member name="M:Visiblox.Charts.IRadialAxis.GetMinorTickValues">
      <summary>
            Calculates the minor tick values to be displayed, using the current effective range of the axis.
            </summary>
      <seealso cref="M:Visiblox.Charts.IRadialAxis.GetMajorTickValues" />
      <returns>A list of minor tick values.</returns>
    </member>
    <member name="M:Visiblox.Charts.IRadialAxis.GetLargestLabelDimensions">
      <summary>
            Determine the largest label drawn by the axis and gets its dimensions.
            </summary>
      <returns>The dimensions, as a Size object, of the largest label on the axis.</returns>
    </member>
    <member name="M:Visiblox.Charts.IRadialAxis.GetMaximumAxisDiameter">
      <summary>
            Determine the maximum diameter (in pixels) that would not result in axis labels being truncated.
            </summary>
      <returns>The maximum diameter in pixels.</returns>
    </member>
    <member name="P:Visiblox.Charts.IRadialAxis.LabelHorizontalAlignment">
      <summary>
            Gets or sets the horizontal alignment for labels.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRadialAxis.LabelVerticalAlignment">
      <summary>
            Gets or sets the vertical alignment for labels.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRadialAxis.Diameter">
      <summary>
            Gets or sets the diameter of the axis (without the labels included).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRadialAxis.CentreAreaDiameter">
      <summary>
            Gets or sets the diameter of the middle, empty circle area on the <see cref="T:Visiblox.Charts.RadialChart" /> (where nothing is drawn) in pixels.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRadialAxis.CentrePoint">
      <summary>
            Gets or sets the centre point of the chart that the axis belongs to.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRadialAxis.RenderPositionCalculator">
      <summary>
            Sets the <see cref="T:Visiblox.Charts.RadialRenderPositionCalculator" /> to be used by the Axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRadialAxis.DrawingMode">
      <summary>
            Sets the drawing mode of the axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRadialAxis.LabelDistance">
      <summary>
            Gets or sets the distance of labels from the chart, in pixels. For a horizontal axis this means the distance of horizontal labels, 
            for a vertical axis this means the distance of labels if <see cref="P:Visiblox.Charts.IRadialAxis.LabelPosition" /> is set to Left or Right.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRadialAxis.LabelPosition">
      <summary>
            Gets or sets the position where the labels should be displayed at. This property is only taken into account for vertical axes.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IRadialAxisAware">
      <summary>
            Defines a component that has a notion of X and Y radial axes.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRadialAxisAware.XAxis">
      <summary>
            Gets or sets the X axis belonging to the component.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.IRadialAxisAware.YAxis">
      <summary>
            Gets or sets the Y axis belonging to the component.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.IRadialChartSeries">
      <summary>
            Defines required members a series needs to implement in order to work within a <see cref="T:Visiblox.Charts.RadialChart" />.
            </summary>
      <remarks>
            This interface represents a graphical depiction on the chart of a set of data 
            (represented in Visiblox Charts as an implementation of the <see cref="T:Visiblox.Charts.IDataSeries" /> interface).
            When implementing a new radial chart series type it may be desirable to extend <see cref="T:Visiblox.Charts.RadialChartSeriesBase" /> rather than
            implementing this interface from scratch.
            </remarks>
      <seealso cref="P:Visiblox.Charts.Chart.Series" />
      <seealso cref="T:Visiblox.Charts.LineSeries" />
      <seealso cref="T:Visiblox.Charts.BarSeries" />
      <seealso cref="T:Visiblox.Charts.ColumnSeries" />
    </member>
    <member name="T:Visiblox.Charts.RadialAxisBase`1">
      <summary>
            Provides a base implementation of <see cref="T:Visiblox.Charts.IRadialAxis" />.
            </summary>
      <remarks>
        <para>See <see cref="T:Visiblox.Charts.IRadialAxis" /> for a discussion of the general responsibilities of a radial axis.</para>
        <para>
          <see cref="T:Visiblox.Charts.RadialAxisBase`1" /> provides a base axis implementation which handles the logic required to render an axis. In particular RadialAxisBase
            handles rendering of the ticks, grid lines and labels.</para>
        <para>To provide a new axis implementation, a subclass must implement <see cref="M:Visiblox.Charts.RadialAxisBase`1.GetDataValueAsAngle(System.IComparable)" /> and <see cref="M:Visiblox.Charts.RadialAxisBase`1.GetDataValueAsRatio(System.IComparable)" />
            to convert data values to angles or a ratio on the Y axis. It must also implement <see cref="M:Visiblox.Charts.RadialAxisBase`1.GetMajorTickValues" /> and <see cref="M:Visiblox.Charts.RadialAxisBase`1.GetMinorTickValues" /> to specify
            what spacing ticks, labels and grid lines are given. Other virtual methods are provided for further customisation.</para>
        <para>
            If an invalid <see cref="P:Visiblox.Charts.IRangeProvider.Range" /> is supplied, the <see cref="P:Visiblox.Charts.RadialAxisBase`1.ActualRange" /> will remain the same. A null <see cref="P:Visiblox.Charts.IRangeProvider.Range" /> will cause the <see cref="P:Visiblox.Charts.RadialAxisBase`1.ActualRange" /> 
            to be auto-calculated.</para>
      </remarks>
      <typeparam name="TComparable">The value type for this axis.</typeparam>
      <seealso cref="T:Visiblox.Charts.RadialLinearAxis" />
      <seealso cref="T:Visiblox.Charts.RadialCategoryAxis" />
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.SetActualRange(Visiblox.Charts.IRange)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.CentrePointProperty">
      <summary>
            Identifies the CentrePoint Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.ShowAxisPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.TitlePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.MajorTickIntervalPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.MinorTickIntervalPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.LabelFormatStringPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.Init(System.Windows.Controls.Orientation)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.DoInvalidate">
      <summary>
        <inheritdoc />
            Does this by recalculating the display location / visibility of the axis.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.GetLargestLabelDimensions">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.GetDataValueAsAngle(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.GetDataValueAsRatio(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.GetMajorTickValues">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.GetMinorTickValues">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.OnApplyTemplate">
      <summary>
            Invoked when the template is applied.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.OnActualRangePropertyChanged">
      <summary>
            Invoked when <see cref="P:Visiblox.Charts.RadialAxisBase`1.ActualRange" /> has changed.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.GetMaximumAxisDiameter">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialAxisBase`1.RangePropertyChangedInternal(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Called when the PropertyChanged event has been fired on the Range.
            </summary>
      <param name="sender">The sender of the event.</param>
      <param name="e">The Property Changed Event arguments.</param>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.RenderPositionCalculatorProperty">
      <summary>
            Identifies the RenderPositionCalculator Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.DrawingModeProperty">
      <summary>
            Identifies the DrawingMode Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.DiameterProperty">
      <summary>
            Identifies the Diameter Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.CentreAreaDiameterProperty">
      <summary>
            Identifies the CentreAreaDiameter Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.LabelDistanceProperty">
      <summary>
            Identifies the LabelDistance Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.LabelPositionProperty">
      <summary>
            Identifies the LabelPosition Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.LabelLineStyleProperty">
      <summary>
            Identifies the LabelLineStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.LabelBorderStyleProperty">
      <summary>
            Identifies the LabelBorderStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.MajorGridlineStyleProperty">
      <summary>
            Identifies the MajorGridlineStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.MinorGridlineStyleProperty">
      <summary>
            Identifies the MinorGridlineStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.ShowTitleProperty">
      <summary>
            Identifies the ShowTitle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.ShowMajorTicksProperty">
      <summary>
            Identifies the ShowMajorTicks Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.ShowMinorTicksProperty">
      <summary>
            Identifies the ShowMinorTicks Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.ShowMajorGridlinesProperty">
      <summary>
            Identifies the ShowMajorGridlines Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.ShowMinorGridlinesProperty">
      <summary>
            Identifies the ShowMinorGridlines Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.LabelHorizontalAlignmentProperty">
      <summary>
            Identifies the LabelHorizontalAlignment Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisBase`1.LabelVerticalAlignmentProperty">
      <summary>
            Identifies the LabelVerticalAlignment Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.ActualRange">
      <inheritdoc cref="P:Visiblox.Charts.IRangeProvider.ActualRange" />
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.CentrePoint">
      <summary>
            Gets or sets the centre point of the chart that the axis belongs to. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.RadialAxisBase`1.InvalidationEnded">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.RenderPositionCalculator">
      <summary>
            Gets or sets the <see cref="T:Visiblox.Charts.RadialRenderPositionCalculator" /> that is used to calculate the position. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.DrawingMode">
      <summary>
            Gets or sets the drawing mode of the axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.Diameter">
      <summary>
            Gets or sets the diameter of the axis in pixels. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.CentreAreaDiameter">
      <summary>
            Gets or sets the diameter of the middle, empty circle area on the <see cref="T:Visiblox.Charts.RadialChart" /> (where nothing is drawn) in pixels. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.LabelDistance">
      <summary>
            Gets or sets the distance of labels from the chart, in pixels. For a horizontal axis this means the distance of horizontal labels, for vertical axis this means the distance of labels if LabelsPosition is set to Left or Right. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.LabelPosition">
      <summary>
            Gets or sets the position where the labels should be displayed at. This property is only taken into account for vertical axes. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.LabelLineStyle">
      <summary>
            Gets or sets the style that is applied to lines that are drawn from ticks to the labels. The Style should have a TargetType of Path. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.LabelBorderStyle">
      <summary>
            Gets or sets  the style for the border of the labels. The Style should have a TargetType of Border. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.MajorGridlineStyle">
      <summary>
            Gets or sets the style that is applied to the Grid lines drawn on the chart. The Style should have a TargetType of Line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.MinorGridlineStyle">
      <summary>
            Gets or sets the style that is applied to the Grid lines drawn on the chart. The Style should have a TargetType of Line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.ShowTitle">
      <summary>
            Gets or sets whether the title should be shown. The title is only displayed on axes with Vertical <see cref="P:Visiblox.Charts.IAxisCommon.Orientation" />  and <see cref="P:Visiblox.Charts.RadialAxisBase`1.LabelPosition" /> set to Left or Right. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.ShowMajorTicks">
      <summary>
            Gets or sets whether to show major ticks on the axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.ShowMinorTicks">
      <summary>
            Gets or sets whether to show minor ticks on the axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.ShowMajorGridlines">
      <summary>
            Gets or sets whether the grid lines are shown on the graph for this Axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.ShowMinorGridlines">
      <summary>
            Gets or sets whether the grid lines are shown on the graph for this Axis. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.LabelHorizontalAlignment">
      <summary>
            Gets or sets  the horizontal alignment for labels. This value is used by <see cref="T:Visiblox.Charts.RadialChart" /> depending on the orientation of the axis and positioning of the labels. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisBase`1.LabelVerticalAlignment">
      <summary>
            Gets or sets  the vertical alignment for labels. This value is used by <see cref="T:Visiblox.Charts.RadialChart" /> depending on the orientation of the axis and positioning of the labels. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RadialAxisEventRelay">
      <summary>
            Relays a collection of events from <see cref="T:Visiblox.Charts.IRadialAxis" /> .
            </summary>
      <remarks>
        <para>
            Relayed events are the following: property changed notifications on <see cref="P:Visiblox.Charts.IRangeProvider.ActualRange" />.
            </para>
        <para>
            The type of the event that is being relayed can be determined from the 
                enumeration value of <see cref="E:Visiblox.Charts.RadialAxisEventRelay.AxisEvent" /> which is a <see cref="T:Visiblox.Charts.RadialAxisEventEnumeration" /> 
                type enumeration.
            </para>
        <para>
            The sender of the relayed event will be the axis which originally fired the event.
            </para>
      </remarks>
    </member>
    <member name="M:Visiblox.Charts.RadialAxisEventRelay.#ctor(Visiblox.Charts.IRadialAxis,Visiblox.Charts.RadialAxisEventEnumeration)">
      <summary>
            Constructor.
            </summary>
      <param name="axis">The axis whose events are relayed.</param>
      <param name="axisEvent">Types of axis events to be relayed.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialAxisEventRelay.UnSubscribe">
      <summary>
            Un-subscribes all events from the axis it wraps.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisEventRelay.Axis">
      <summary>
            Gets the axis whose event this object is forwarding.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.RadialAxisEventRelay.AxisEvent">
      <summary>
            Fires whenever an event specified by the passed <see cref="T:Visiblox.Charts.AxisEventTypes" /> happens.
            The sender will be the axis which originally fired the event.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RadialAxisEventRelay.AxisEventHandler">
      <summary>
            Delegate for relay events.
            </summary>
      <param name="sender">The sender of the event.</param>
      <param name="e">The Axis Event Relay arguments.</param>
    </member>
    <member name="T:Visiblox.Charts.RadialAxisEventRelayEventArgs">
      <summary>
            Contains event data for <see cref="E:Visiblox.Charts.ChartAxesEventRelay.AxisEvent" />.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialAxisEventRelayEventArgs.#ctor(Visiblox.Charts.RadialAxisEventEnumeration)">
      <summary>
            Constructor.
            </summary>
      <param name="axisEvent">The Axis Event that occurred to result in this event firing.</param>
    </member>
    <member name="P:Visiblox.Charts.RadialAxisEventRelayEventArgs.AxisEvent">
      <summary>
            The type of event that has been fired.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RadialAxisEventEnumeration">
      <summary>
            Specifies types of events <see cref="T:Visiblox.Charts.ChartAxesEventRelay" /> can subscribe to and
            relay them.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialAxisEventEnumeration.ActualRangeLimitsChanged">
      <summary>
            Relays <see cref="P:Visiblox.Charts.IRange.Minimum" /> or <see cref="P:Visiblox.Charts.IRange.Maximum" /> 
            changing on <see cref="P:Visiblox.Charts.IRangeProvider.ActualRange" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RadialCategoryAxis">
      <summary>
            Represents a radial axis where the values are discrete categories.
            </summary>
      <remarks>
        <para>
            CategoryAxis will show a major tick for each distinct category plotted against it, and no minor ticks. 
            </para>
        <para>
            The <see cref="T:Visiblox.Charts.CategoryRange" /> determines the set of categories, and their ordering,
            if this is not specified the categories will be taken from the data values in their series order.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.CategoryRange" />
      <seealso cref="T:Visiblox.Charts.RadialLinearAxis" />
    </member>
    <member name="M:Visiblox.Charts.RadialCategoryAxis.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialCategoryAxis.CreateRange">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialCategoryAxis.GetDataValueAsAngle(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialCategoryAxis.GetDataValueAsRatio(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialCategoryAxis.GetMajorTickValues">
      <summary>
             Returns the major tick values (all categories).
            </summary>
      <returns>A collection of all categories.</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialCategoryAxis.GetMinorTickValues">
      <summary>
             Returns the minor tick values (none).
            </summary>
      <returns>An empty list.</returns>
    </member>
    <member name="F:Visiblox.Charts.RadialCategoryAxis.SortOrderProperty">
      <summary>
            Identifies the SortOrder Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialCategoryAxis.Categories">
      <summary>
            Gets or sets the categories of the axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialCategoryAxis.SortOrder">
      <summary>
            Gets or sets the sort order of the category labels. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RadialChart">
      <summary>
            Represents a Visiblox Charts radial chart. 
            </summary>
      <remarks>
        <para>
            A radial chart takes care of generating all its components needed for display, the developer only has to
            add one or more <see cref="T:Visiblox.Charts.IRadialChartSeries" /> to its <see cref="P:Visiblox.Charts.RadialChart.Series" /> collection.
            </para>
        <para>
            The <see cref="P:Visiblox.Charts.RadialChart.XAxis" /> is the outer axis of the chart. 
            The <see cref="P:Visiblox.Charts.RadialChart.YAxis" /> is represented by the spokes inside the chart.
            </para>
        <para>
            Drawing of the axes can be controlled with the following properties:</para>
        <list type="bullet">
          <item>
            <term>
              <see cref="P:Visiblox.Charts.RadialChart.DrawingMode" /> - </term>
            <description>Can be <see cref="F:Visiblox.Charts.RadialChartDrawingMode.Straight" /> or 
                <see cref="F:Visiblox.Charts.RadialChartDrawingMode.Circular" />. Results in X gridlines drawn as straight or
                circular lines respectively.
                </description>
          </item>
          <item>
            <term>
              <see cref="P:Visiblox.Charts.RadialChart.CentreAreaDiameter" /> - </term>
            <description>Increases the size of the empty circle in the middle of the chart.
                </description>
          </item>
        </list>
        <para>
            Positioning of the axis labels can be set with the following properties:</para>
        <list type="bullet">
          <item>
            <term>
              <see cref="P:Visiblox.Charts.RadialChart.XLabelsDistance" /> -
                </term>
            <description>
                Changes the distance that the X labels are rendered from the edge of the chart.
                </description>
          </item>
          <item>
            <term>
              <see cref="P:Visiblox.Charts.RadialChart.YLabelsPosition" /> -
                </term>
            <description>
                Can be <see cref="F:Visiblox.Charts.RadialLabelPosition.Left" /> or <see cref="F:Visiblox.Charts.RadialLabelPosition.Right" />.
                Changing this results in the Y labels being drawn on either side of the chart, with lines connecting to the values.
                Changing <see cref="P:Visiblox.Charts.RadialChart.YLabelsDistance" /> results in the distance from the chart that these labels are drawn.
                </description>
          </item>
        </list>
        <para>
            Styling the axes (their gridlines, ticks) and their labels can be done at the axis level, see <see cref="T:Visiblox.Charts.RadialAxisBase`1" /> 
            for information on this.
            </para>
        <para>
            RadialChart is designed to be fully customizable. The most important customization possibilities are the following:
            <list type="bullet"><item><term><strong>Axis</strong> - </term><description>The RadialChart always has one <see cref="P:Visiblox.Charts.RadialChart.XAxis" /> and <see cref="P:Visiblox.Charts.RadialChart.YAxis" />.
                Axes are automatically created based on the type of data in the series but they can be programmatically assigned or re-assigned as well.
                </description></item><item><term><strong>Styling</strong> - </term><description>Both the RadialChart container and its components can be fully styled using styling related properties. 
                RadialChart allows the styling of the series in various ways. Styling related properties can be set on the individual series,
                or the <see cref="T:Visiblox.Charts.Palette" /> property can be used to define a palette and apply it to the chart.
                Specifying style related properties on the individual series has the highest precedence, this followed by specifying 
                the NormalStyle, finally by declaring a custom Palette. If none of these are specified, the default Chart Palette 
                will be applied to the series.</description></item></list></para>
      </remarks>
      <example>
        <para>Create a simple chart with a single radial line series:
            <code source="Help\Charts\IncludedCode\CreateSimpleChartExample.cs" />
            Example output:
            <img src="../Help/Charts/radialChart-example.jpg" /></para>
        <para>
            Customizing the RadialChart can be done through either the style related properties or by changing its layout via 
            setting the <see cref="P:System.Windows.Controls.Control.Template" /> property and changing its control template.
            By default the following template is applied to the radial chart. 
            Use this as a base for changing the radial chart's control template.
            <code source="Help\Charts\IncludedCode\RadialChartControlTemplate.xml" lang="XAML" /></para>
      </example>
      <seealso cref="T:Visiblox.Charts.IRadialChartSeries" />
      <seealso cref="T:Visiblox.Charts.IRadialAxis" />
      <seealso cref="T:Visiblox.Charts.Palette" />
    </member>
    <member name="F:Visiblox.Charts.RadialChart.PlotAreaPaddingProperty">
      <summary>
            Identifies the PlotAreaPadding Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialChart.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialChart.DisposeInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChart.OnApplyTemplateInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChart.UpdateLegend">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChart.PlotAreaSizeChanged(System.Windows.SizeChangedEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChart.ChartSizeChanged">
      <summary>
            Invoked when the size of the chart has changed.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialChart.InvalidateInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChart.PalettePropertyChanged">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.RadialChart.DrawingModeProperty">
      <summary>
            Identifies the DrawingMode Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChart.XAxisProperty">
      <summary>
            Identifies the XAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChart.YAxisProperty">
      <summary>
            Identifies the YAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChart.SeriesProperty">
      <summary>
            Identifies the Series Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChart.CentreAreaDiameterProperty">
      <summary>
            Identifies the CentreAreaDiameter Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChart.XLabelsDistanceProperty">
      <summary>
            Identifies the XLabelsDistance Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChart.YLabelsDistanceProperty">
      <summary>
            Identifies the YLabelsDistance Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChart.YLabelsPositionProperty">
      <summary>
            Identifies the YLabelsPosition Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChart.LegendPositionProperty">
      <summary>
            Identifies the LegendPosition Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChart.ValidationKey">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RadialChart.PlotAreaPadding">
      <summary>
            Gets or sets the margin around the plot area. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChart.DefaultPaletteKey">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RadialChart.DrawingMode">
      <summary>
            Gets or sets the drawing mode of the chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChart.XAxis">
      <summary>
            Gets or sets the X Axis of the chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChart.YAxis">
      <summary>
            Gets or sets the (primary) Y Axis of the chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChart.Series">
      <summary>
            Gets or sets the collection of chart series that are on this chart. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChart.CentreAreaDiameter">
      <summary>
            Gets or sets what size the middle, empty part of the radial chart should take up, in pixels. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChart.XLabelsDistance">
      <summary>
            Gets or sets the distance of X labels from the chart, in pixels. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChart.YLabelsDistance">
      <summary>
            Gets or sets the distance of Y labels from the chart, when <see cref="T:Visiblox.Charts.RadialLabelPosition" /> is set to Left or Right. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChart.YLabelsPosition">
      <summary>
            Gets or sets the position where the Y labels should be displayed at. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChart.LegendPosition">
      <summary>
            Gets or sets the position of the legend. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RadialChartDrawingMode">
      <summary>
            Defines the possible drawing modes for <see cref="T:Visiblox.Charts.RadialChart" />.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChartDrawingMode.Straight">
      <summary>
            Draw straight lines between major X ticks.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChartDrawingMode.Circular">
      <summary>
            Draw circular lines between major X ticks.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RadialChartSeriesBase">
      <summary>
            Represents the base class for <see cref="T:Visiblox.Charts.IRadialChartSeries" /> implementations. 
            </summary>
      <remarks>
        <para>A class inheriting from ChartSeriesBase represents a particular type of series which is drawn on a <see cref="T:Visiblox.Charts.Chart" />,
            such as a <see cref="T:Visiblox.Charts.RadialLineSeries" />. A chart series defines how data is presented on the chart;
            the data to display is given by its <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.DataSeries" /> property.</para>
        <para>A series is also associated with a pair of axes against which the data is plotted, represented by its <see cref="P:Visiblox.Charts.RadialChartSeriesBase.XAxis" /> and
            <see cref="P:Visiblox.Charts.RadialChartSeriesBase.YAxis" /> properties (although in most cases these do not have to be set explicitly).</para>
        <para>
            When styling the series, do not set the Style property directly, instead assign the style to be used to the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" /> property.
            To style the highlighted and selected state, assign styles to the <see cref="P:Visiblox.Charts.RadialChartSeriesBase.SelectedStyle" /> 
            and <see cref="P:Visiblox.Charts.RadialChartSeriesBase.HighlightedStyle" /> properties.
            </para>
        <para>ToolTip support is implemented in this class, and can be enabled via the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.ToolTipEnabled" /> property.
            Each series defines a default tooltip format, but tooltips can also be customised as described in the example below.</para>
        <para>Styling: to style a series, do this by either setting its style specific properties or by setting <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" />.
            Using the Style property to style the series is not advised, use NormalStyle instead.</para>
      </remarks>
      <example>
        <para>ToolTips can be templated via the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.ToolTipTemplate" /> property, and styled via the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.ToolTipStyle" /> property.
            The default ToolTip templates for line series and candlestick series are shown below. The line series tooltip template can be used
            as a base for changing the template for a series with single-valued data points, and similarly the Candlestick series tooltip template
            can be used as a base for changing the template for a series with multi-valued data points.</para>
      </example>
      <seealso cref="T:Visiblox.Charts.IRadialChartSeries" />
      <seealso cref="T:Visiblox.Charts.RadialLineSeries" />
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.AreKeyPropertiesNull">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.UpdateDataSeriesWithRanges">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.GetPointRenderPosition(Visiblox.Charts.IDataPoint)">
      <summary>
            Returns the physical render coordinates of the logical <paramref name="dataPoint" />.
            </summary>
      <param name="dataPoint">The data point to get the render position of.</param>
      <returns>The render coordinates of <paramref name="dataPoint" />.</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.InvalidateBase">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.InitInternalBase">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.InitInternal">
      <summary>
            Override to implement custom initialization.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.DeInitInternalBase">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.DeInitInternal">
      <summary>
            Override to implement custom deinitalization.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.InvalidateInternal">
      <summary>
            Invoked by the public <see cref="M:Visiblox.Charts.ChartSeriesCommonBase.Invalidate" /> method in order to 
            construct the visual layout of this series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.AxisChanged(Visiblox.Charts.IRadialAxis)">
      <summary>
            Invoked when either the XAxis or YAxis property changes.
            </summary>
      <param name="sender">The axis that has changed.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.SelectBaseAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.SelectPerpendicularAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.ComputeMinimumDistanceBetweenPoints">
      <summary>
            Determine the minimum distance between points on the X axis.
            </summary>
      <returns>The minimum distance between points on the X axis.</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.OnStyleUpdated">
      <summary>
            Add entries to the StateStylesCollection for the 4 general states - Normal, Highlighted, Selected and SelectedHighlighted.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.ResolveStyles(System.Windows.Style)">
      <summary>
            Resolve the series styling based on the requirements of the given series.
            </summary>
      <param name="seriesStyle">The base style to be resolved.</param>
      <returns>A style that will be applied when Series is in a certain state (highlighted, selected).</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.UpdateSeriesHighlighting">
      <summary>
            Override in subclasses to visualize series highlighting.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.EnableSeriesSelection(System.Windows.FrameworkElement)">
      <summary>
            Enables the selection of the series when clicking on <paramref name="element" />.
            </summary>
      <param name="element">Element to use to trigger series selection.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.EnablePointSelection(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <summary>
            Enables the selection of the plotted point ("physical" point) on the series. 
            </summary>
      <param name="physicalPoint">The physical point to enable selection for.</param>
      <param name="logicalPoint">The logical point of the series associated with the element when the element is selected.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.EnableSeriesHighlighting(System.Windows.FrameworkElement)">
      <summary>
            Registers event handlers that make the series highlight when the mouse hovers over <paramref name="element" />.
            </summary>
      <param name="element">Element to use to trigger series highlighting.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.IsPointRenderableInternal(Visiblox.Charts.IDataPoint)">
      <summary>
            Determines whether the point can be rendered on the canvas. Subclasses using multiple Y valued data points or
            having other constraints should override IsPointRenderableInternal to enforce validity.
            </summary>
      <remarks>
        <para>This base implementation checks the point's X value and its minimum Y value, which
            in both the case of single and multi-valued data points should indicate that the point is likely to be renderable.
            Subclasses may wish to override this to perform additional or alternative checks, such as the multiple
            Y values used by the series.</para>
        <para>Series implementations should not render points for which IsPointRenderableInternal returns false; when extending
            <see cref="T:Visiblox.Charts.MultiValueSeriesBase" /> or other provided series, beware that 
            these classes will filter out points deemed unrenderable by this method.</para>
      </remarks>
      <param name="dataPoint">Point to check.</param>
      <returns>Whether the point is displayable.</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.RemoveSelectedItem(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.RemoveSelectedItems">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.ClearSelectedItems">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.RemoveSelectedItemsFromDataPoints">
      <summary>
            If resetting the collection, it may be necessary to manually remove each point separately. Override this method when this is the case.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.InitializeDataLabels(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.SpecializeLabel(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.StyleDataLabel(Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.GetDataLabelString(Visiblox.Charts.IAxisCommon,Visiblox.Charts.IAxisCommon,Visiblox.Charts.IDataPoint,System.String)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialChartSeriesBase.RenderDataLabels">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.RadialChartSeriesBase.XAxisProperty">
      <summary>
            Identifies the XAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChartSeriesBase.YAxisProperty">
      <summary>
            Identifies the YAxis Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChartSeriesBase.IsSelectedProperty">
      <summary>
            Identifies the IsSelected Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChartSeriesBase.IsHighlightedProperty">
      <summary>
            Identifies the IsHighlighted Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChartSeriesBase.HighlightingEnabledProperty">
      <summary>
            Identifies the HighlightingEnabled Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChartSeriesBase.SelectionModeProperty">
      <summary>
            Identifies the SelectionMode Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChartSeriesBase.SelectedItemProperty">
      <summary>
            Identifies the SelectedItem Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChartSeriesBase.SelectedItemsProperty">
      <summary>
            Identifies the SelectedItems Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChartSeriesBase.SelectedStyleProperty">
      <summary>
            Identifies the SelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChartSeriesBase.HighlightedStyleProperty">
      <summary>
            Identifies the HighlightedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChartSeriesBase.LabelStyleProperty">
      <summary>
            Identifies the LabelStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChartSeriesBase.LabelFormatStringProperty">
      <summary>
            Identifies the LabelFormatString Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialChartSeriesBase.ShowDataLabelsProperty">
      <summary>
            Identifies the ShowDataLabels Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.RenderPositionCalculator">
      <summary>
            Gets or sets the helper object to calculate render positions.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.CachedIsHighlighted">
      <summary>
            Gets or sets the cached <see cref="P:Visiblox.Charts.RadialChartSeriesBase.IsHighlighted" /> to avoid hitting it repeatedly (as it is a Dependency Property).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.CachedIsSelected">
      <summary>
            Gets or sets the cached <see cref="P:Visiblox.Charts.RadialChartSeriesBase.IsSelected" /> to avoid hitting it repeatedly (as it is a Dependency Property).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.CachedXAxis">
      <summary>
            Gets or sets the cached <see cref="P:Visiblox.Charts.RadialChartSeriesBase.XAxis" /> to avoid hitting it repeatedly (as it is a Dependency Property).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.CachedYAxis">
      <summary>
            Gets or sets the cached <see cref="P:Visiblox.Charts.RadialChartSeriesBase.YAxis" /> to avoid hitting it repeatedly (as it is a Dependency Property).
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.XRange">
      <inheritdoc />
      <remarks>This default implementation simply returns the data range.</remarks>
      <remarks> Do not change the properties on this object as it may be overwritten by the chart. 
            Instead use IRadialAxis.Range to set a specific range.</remarks>
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.YRange">
      <inheritdoc />
      <remarks>This default implementation simply returns the data range.</remarks>
      <remarks> Do not change the properties on this object as it may be overwritten by the chart. 
            Instead use IRadialAxis.Range to set a specific range.</remarks>
    </member>
    <member name="E:Visiblox.Charts.RadialChartSeriesBase.SelectionChanged">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.XAxis">
      <summary>Gets or sets the X axis with which this series is associated.</summary>
      <remarks>This property is set by the <see cref="T:Visiblox.Charts.Chart" /> initially and whenever it changes.</remarks>
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.YAxis">
      <summary>Gets or sets the Y axis with which this series is associated.</summary>
      <remarks>This property is set by the <see cref="T:Visiblox.Charts.Chart" /> initially and whenever it changes.</remarks>
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.IsSelected">
      <summary>Gets or sets whether the series is selected.</summary>
      <remarks>This value can only be true if selection is enabled on the series, that is <see cref="P:Visiblox.Charts.RadialChartSeriesBase.SelectionMode" /> is set to <see cref="F:Visiblox.Charts.SelectionMode.Series" />.Generally clicking on the series will select it, if it is selectable, but this property can also be manipulated programmatically.</remarks>
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.IsHighlighted">
      <summary>
            Gets or sets whether the series is highlighted. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.HighlightingEnabled">
      <summary>
            Gets or sets whether highlighting of the series is enabled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.SelectionMode">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.SelectedItem">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.SelectedItems">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.SelectedStyle">
      <summary>
            Gets or sets the style applied to the series when it's selected. This style is combined with <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" /> when rendering the series.  Properties defined in this style take precedence over the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" /> during that merge. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.HighlightedStyle">
      <summary>
            Gets or sets the style applied to the series when it's highlighted. This style is merged with <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" /> and, if selected, the <see cref="P:Visiblox.Charts.RadialChartSeriesBase.SelectedStyle" /> when rendering the series in a selected state. Properties defined in this style take precedence over the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" /> and <see cref="P:Visiblox.Charts.RadialChartSeriesBase.SelectedStyle" /> during that merge. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.LabelStyle">
      <summary>
            Gets or sets the text style applied to any data labels.  TargetType should be DataLabel. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.LabelFormatString">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RadialChartSeriesBase.ShowDataLabels">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.RadialLabelPosition">
      <summary>
            Defines possible positions of the label container on <see cref="P:Visiblox.Charts.RadialChart.YAxis" />.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLabelPosition.Left">
      <summary>
            Displayed on the left of the chart, connected with lines to the values.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLabelPosition.Centre">
      <summary>
            Displayed on the centre of the chart.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLabelPosition.Right">
      <summary>
            Displayed on the right of the chart, connected with lines to the values.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RadialLinearAxis">
      <summary>
            Represents a radial linear axis which is used to display numeric values.
            </summary>
      <remarks>
        <para>This class represents an axis whose value type is numeric, represented by <see cref="T:System.Double" />s, with a linear scale.
            </para>
        <para>This is the default radial axis type which the chart will create automatically where the data is numeric, 
            but will often be explicitly created by the chart user in order to set the various axis properties.</para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.RadialAxisBase`1" />
      <seealso cref="T:Visiblox.Charts.RadialCategoryAxis" />
    </member>
    <member name="M:Visiblox.Charts.RadialLinearAxis.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialLinearAxis.CreateRange">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialLinearAxis.GetDataValueAsAngle(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialLinearAxis.GetDataValueAsRatio(System.IComparable)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialLinearAxis.GetMajorTickValues">
      <summary>
            Determines values of ticks based on the MajorTickInterval.
            </summary>
      <returns>A list of values where major ticks are on the axis.</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialLinearAxis.GetMinorTickValues">
      <summary>
             Determines values of ticks based on the MinorTickInterval.
            </summary>
      <returns>A list of values where minor ticks are on the axis.</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialLinearAxis.ComputeActualIntervalInternal">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.RadialLineSeries">
      <summary>
            Represents a radial line series.
            </summary>
      <remarks>
        <para>
            A RadialLineSeries by default consists of straight lines connecting its data points. To indicate the location
            of each data point, the <see cref="P:Visiblox.Charts.RadialLineSeries.ShowPoints" /> property can be set to <c>true</c>, or to fill in the area below the line
            the <see cref="P:Visiblox.Charts.RadialLineSeries.ShowArea" /> property can be set to <c>true</c>. It is also possible to set the <see cref="P:Visiblox.Charts.RadialLineSeries.ShowLine" /> property
            to <c>false</c> to disable the connecting lines (a scatter chart effect can be created by turning lines off and points on).
            </para>
        <para>
            When styling the chart, do not use the Style setter, instead set <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.NormalStyle" />, <see cref="P:Visiblox.Charts.RadialChartSeriesBase.SelectedStyle" /> or <see cref="P:Visiblox.Charts.RadialChartSeriesBase.HighlightedStyle" />.
            See <see cref="T:Visiblox.Charts.RadialChartSeriesBase" /> on details of this.
            </para>
        <para>
            Styling of the series can be done by setting the <see cref="P:Visiblox.Charts.RadialLineSeries.PointFill" />, <see cref="P:Visiblox.Charts.RadialLineSeries.LineStroke" />, <see cref="P:Visiblox.Charts.RadialLineSeries.LineStrokeThickness" />, <see cref="P:Visiblox.Charts.RadialLineSeries.AreaFill" />
            properties or the <see cref="P:Visiblox.Charts.RadialLineSeries.PointStyle" />, <see cref="P:Visiblox.Charts.RadialLineSeries.LineStyle" /> or <see cref="P:Visiblox.Charts.RadialLineSeries.AreaStyle" /> style properties.
            </para>
        <para>
            If <see cref="P:Visiblox.Charts.RadialLineSeries.ShowPoints" /> is true, RadialLineSeries supports selection of points.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.RadialChartSeriesBase" />
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.OnApplyTemplate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.InvalidateInternal">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.DrawArea(System.Collections.Generic.IList{Visiblox.Charts.RadialLineSeries.DataPointItem})">
      <summary>
            Draws an area on the canvas.
            </summary>
      <param name="points">The points to draw.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.DrawLine(System.Collections.Generic.IList{Visiblox.Charts.RadialLineSeries.DataPointItem})">
      <summary>
            Draws a line on the canvas.
            </summary>
      <param name="points">The points to draw.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.CreatePoint(Visiblox.Charts.IDataPoint)">
      <summary>
            Creates the physical representation of the logical <paramref name="dataPoint" />.
            </summary>
      <param name="dataPoint">The logical point.</param>
      <returns>The point to be plotted on the screen.</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.UpdatePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <summary>
            Updates the physical <paramref name="point" /> that is the representation of the logical <paramref name="dataPoint" />.
            </summary>
      <param name="point">The physical representation of the point.</param>
      <param name="dataPoint">The logical point.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.DrawPoints(System.Collections.Generic.IList{Visiblox.Charts.RadialLineSeries.DataPointItem})">
      <summary>
            Draws the points of the line series on the canvas.
            </summary>
      <param name="points">The points to draw.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.DrawPoint(Visiblox.Charts.RadialLineSeries.DataPointItem,Visiblox.Charts.Primitives.UniqueAndNotNullShadowedObservableCollection{System.Object},Visiblox.Charts.SelectionMode)">
      <summary>
            Adds a data point to the chart.
            </summary>
      <param name="combinedPoint">The point to draw.</param>
      <param name="selectedItems">Cached to avoid repeatedly hitting the Dependency Property.</param>
      <param name="selectionMode">Cached to avoid repeatedly hitting the Dependency Property.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.OnPointCreated(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <summary>
            Called when a new data point element has been created.
            </summary>
      <param name="point">The physical point.</param>
      <param name="dataPoint">The logical point.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.GetCenterTransform(System.Windows.FrameworkElement)">
      <summary>
            Gets the transform that will move the point to the centre location.
            </summary>
      <param name="visualPoint">The physical point to position.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.AddDataPoint(Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.UpdateDataPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.RemoveDataPoint(Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.OnPointRendered(Visiblox.Charts.IDataPoint,System.Windows.FrameworkElement)">
      <summary>
            Raise a PointRendered event if appropriate.
            </summary>
      <param name="dataPoint">The data point for the point which was rendered.</param>
      <param name="frameworkElement">The render element for that point.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.StylePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <summary>
            Determine which styling should be applied to the given point.
            </summary>
      <param name="point">The physical representation of the point.</param>
      <param name="dataPoint">The logical point.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.StyleDataLabel(Visiblox.Charts.IDataPoint,System.Int32)">
      <summary>
            Determine which styling should be applied to the data labels of the given point.
            </summary>
      <param name="dataPoint">The physical representation of the point.</param>
      <param name="index">The index of the data label of the point to be styled.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.StylePath(System.Windows.Shapes.Path,System.Boolean)">
      <summary>
            Determine which styling should be applied to the path.
            </summary>
      <param name="element">The physical path to be styled.</param>
      <param name="isLine">Indicates if the path is a line or an area.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.StyleDataLabel(Visiblox.Charts.IDataPoint,Visiblox.Charts.Primitives.StateSpecificStyle)">
      <summary>
            Apply the <paramref name="styles" /> to data labels of the <paramref name="dataPoint" />.
            </summary>
      <param name="dataPoint">The physical representation of a data point.</param>
      <param name="styles">The collection of Style objects to be used.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.StylePath(System.Windows.Shapes.Path,System.Boolean,Visiblox.Charts.Primitives.StateSpecificStyle)">
      <summary>
            Apply the <paramref name="styles" /> to the <paramref name="element" />.
            </summary>
      <param name="element">The physical path object to style.</param>
      <param name="isLine">Indicates if the path is a line or an area so the correct Style object can be applied.</param>
      <param name="styles">The collection of Style objects to be used.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.UpdateSeriesHighlighting">
      <summary>
            Invoked when the selection helper line path receives the MouseEnter event.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.ResolveStyles(System.Windows.Style)">
      <summary>
            Resolve the given <paramref name="seriesStyle" /> into a specific style for the series type.
            </summary>
      <param name="seriesStyle">The base style to be resolved.</param>
      <returns>A style that will be applied when Series is in a certain state such as highlighted or selected.</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.ApplyStyleToExistingElements">
      <summary>
            Applies a given set of cached line/area/point styles to elements already existing on the zoom canvas.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.ApplyStyleToPoints">
      <summary>
            Style each point.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.ApplyStyleToDataLabels">
      <summary>
            Style each data label.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.ApplyStyleToLinePaths">
      <summary>
            Style each line path.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.ApplyStyleToAreaPaths">
      <summary>
            Style each area path.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.ShowPointsProperty">
      <summary>
            Identifies the ShowPoints Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.ShowLineProperty">
      <summary>
            Identifies the ShowLine Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.IsPathClosedProperty">
      <summary>
            Identifies the IsPathClosed Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.ShowAreaProperty">
      <summary>
            Identifies the ShowArea Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.LineStyleProperty">
      <summary>
            Identifies the LineStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.PointStyleProperty">
      <summary>
            Identifies the PointStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.AreaStyleProperty">
      <summary>
            Identifies the AreaStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.PointFillProperty">
      <summary>
            Identifies the PointFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.PointSizeProperty">
      <summary>
            Identifies the PointSize Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.PointStrokeProperty">
      <summary>
            Identifies the PointStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.PointStrokeThicknessProperty">
      <summary>
            Identifies the PointStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.LineStrokeProperty">
      <summary>
            Identifies the LineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.LineStrokeThicknessProperty">
      <summary>
            Identifies the LineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.AreaFillProperty">
      <summary>
            Identifies the AreaFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.PointShapeProperty">
      <summary>
            Identifies the PointShape Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.SelectionHelperLineThicknessProperty">
      <summary>
            Identifies the SelectionHelperLineThickness Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.RadialLineSeries.PointRendered">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.ShowPoints">
      <summary>
            Gets or sets whether the points are plotted on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.ShowLine">
      <summary>
            Gets or sets whether the line is plotted on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.IsPathClosed">
      <summary>
            Gets or sets whether the path between the first and last point should be closed. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.ShowArea">
      <summary>
            Gets or sets whether the area is plotted on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.LineStyle">
      <summary>
            Gets or sets the line style. The Style should have a TargetType of Path. Stroke and StrokeThickness setters should not be defined in this style when using the default palette, as they will be overridden by the LineStroke and LineStrokeThickness dependency properties. To set the stroke and stroke thickness, set the <see cref="P:Visiblox.Charts.RadialLineSeries.LineStroke" /> and <see cref="P:Visiblox.Charts.RadialLineSeries.LineStrokeThickness" /> properties on this class. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.PointStyle">
      <summary>
            Gets or sets the point style. The Style should have a TargetType of Shape. Fill, Stroke and StrokeThickness setters should not be defined in this style when using the default palette, as this will be overridden by the PointFill, PointStroke and PointStrokeThickness dependency properties defined in this palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.AreaStyle">
      <summary>
            Gets or sets the area style. The Style should have a TargetType of Path. Fill setter should not be defined in this style when using the default palette, as this will be overridden by the AreaFill dependency property. To set the area fill, set the <see cref="P:Visiblox.Charts.RadialLineSeries.AreaFill" /> property on this class. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.PointFill">
      <summary>
            Gets or sets the brush used for filling a point on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.PointSize">
      <summary>
            Gets or sets the size (width and height) of a point on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.PointStroke">
      <summary>
            Gets or sets the brush used for stroking the path of a point on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.PointStrokeThickness">
      <summary>
            Gets or sets the thickness used for stroking the path of a point on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.LineStroke">
      <summary>
            Gets or sets the brush used to draw a line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.LineStrokeThickness">
      <summary>
            Gets or sets the thickness of a the drawn line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.AreaFill">
      <summary>
            Gets or sets the brush used for filling the area on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.PointShape">
      <summary>
            Gets or sets the the shape to draw for points on this line series if ShowPoints is true. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialLineSeries.SelectionHelperLineThickness">
      <summary>
            Gets or sets the thickness of the invisible line around the series line path that helps selection. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RadialLineSeries.DataPointItem">
      <summary>
            Internal class for representing a render point
            and its associated IDataPoint.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.DataPointItem.RenderPoint">
      <summary>
            The point to be rendered.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RadialLineSeries.DataPointItem.DataPoint">
      <summary>
            The data point.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialLineSeries.DataPointItem.#ctor(System.Windows.Point,Visiblox.Charts.IDataPoint)">
      <summary>
            Creates a DataPointItem.
            </summary>
      <param name="dataPoint">Data point.</param>
      <param name="renderPoint">Render point associated with <paramref name="dataPoint" />.</param>
    </member>
    <member name="T:Visiblox.Charts.RadialRenderPositionCalculator">
      <summary>
            Helper class for calculating render positions on a radial chart. 
            Both <see cref="P:Visiblox.Charts.RadialRenderPositionCalculator.XAxis" /> and <see cref="P:Visiblox.Charts.RadialRenderPositionCalculator.YAxis" /> has to be set for such calculations.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialRenderPositionCalculator.GetDataValueAsAngle(System.IComparable)">
      <summary>
            Returns the angle at which <paramref name="dataValue" /> dataValue will be rendered at on the <see cref="P:Visiblox.Charts.RadialRenderPositionCalculator.XAxis" />.
            </summary>
      <param name="dataValue">The data value to retrieve as an angle.</param>
      <returns>The angle of the given data value.</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialRenderPositionCalculator.GetOtherAxisMaximum(Visiblox.Charts.IRadialAxis)">
      <summary>
            Determines which axis is passed in and returns the maximum of the range of the other axis.
            </summary>
      <param name="axis">The axis to test against.</param>
      <returns>The maximum of the range of the other axis, i.e. the Y axis if passed the X axis and vice versa,
            or null if other axis or its range are null.</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialRenderPositionCalculator.GetOtherAxisMinimum(Visiblox.Charts.IRadialAxis)">
      <summary>
            Determines which axis is passed in and returns the minimum of the range of the other axis.
            </summary>
      <param name="axis">The axis to test against.</param>
      <returns>The minimum of the range of the other axis, i.e. the Y axis if passed the X axis and vice versa,
            or null if other axis or its range are null.</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialRenderPositionCalculator.GetOtherAxisMajorTickValues(Visiblox.Charts.IRadialAxis)">
      <summary>
            Determines which axis is passed in and returns the major tick values of the other axis.
            </summary>
      <param name="axis">The axis to test against.</param>
      <returns>The major tick values of the other axis, i.e. the Y axis if passed the X axis and vice versa,
            or an empty list if other axis is null.</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialRenderPositionCalculator.GetOtherAxisMinorTickValues(Visiblox.Charts.IRadialAxis)">
      <summary>
            Determines which axis is passed in and returns the minor tick values of the other axis.
            </summary>
      <param name="axis">The axis to test against.</param>
      <returns>The minor tick values of the other axis, i.e. the Y axis if passed the X axis and vice versa,
            or an empty list if other axis is null.</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialRenderPositionCalculator.GetDataValueAsRenderPosition(Visiblox.Charts.IDataPoint)">
      <summary>
            Take the supplied <paramref name="dataPoint" /> and determine its render position on the chart.
            </summary>
      <param name="dataPoint">The logical data point to find the render position of.</param>
      <returns>The render position of the data point or (Double.NaN, Double.NaN) if 
            <see cref="P:Visiblox.Charts.RadialRenderPositionCalculator.XAxis" />, <see cref="P:Visiblox.Charts.RadialRenderPositionCalculator.YAxis" /> are null or the data point is not renderable.</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialRenderPositionCalculator.GetDataValueAsRenderPosition(System.IComparable,System.IComparable)">
      <summary>
            Take the supplied (<paramref name="dataX" />, <paramref name="dataY" />) coordinates and determine the
            render position on the chart.
            </summary>
      <param name="dataX">The X value to be rendered.</param>
      <param name="dataY">The Y value to be rendered.</param>
      <returns>The render position of the given coordinates or (Double.Nan, Double.Nan) if 
            <see cref="P:Visiblox.Charts.RadialRenderPositionCalculator.XAxis" />, <see cref="P:Visiblox.Charts.RadialRenderPositionCalculator.YAxis" /> are null or the coordinates are not renderable.</returns>
    </member>
    <member name="M:Visiblox.Charts.RadialRenderPositionCalculator.GetLineIntersectionPoint(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
      <summary>
            Gets the intersection point between the lines (linePoint1, linePoint2) and (centerPoint, originalPoint).
            </summary>
      <param name="linePoint1">First point of first line.</param>
      <param name="linePoint2">Second point of first line.</param>
      <param name="centerPoint">First point of second line.</param>
      <param name="originalPoint">Second point of second line.</param>
      <returns>A Point on the chart where the two lines intersect.</returns>
    </member>
    <member name="P:Visiblox.Charts.RadialRenderPositionCalculator.XAxis">
      <summary>
            Gets or sets the X axis.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RadialRenderPositionCalculator.YAxis">
      <summary>
            Gets or sets the Y axis.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RadialSeriesCollection">
      <summary>
            Represents an observable collection which forwards DataSeriesCollectionChanged events for the 
            <see cref="T:Visiblox.Charts.IRadialChartSeries" /> instances which it contains.
            </summary>
      <remarks>
        <see cref="T:Visiblox.Charts.Chart" /> uses this class as its <see cref="P:Visiblox.Charts.Chart.Series" /> member
            to relay the DataSeriesCollectionChanged events for its series.
            </remarks>
      <seealso cref="P:Visiblox.Charts.Chart.Series" />
      <seealso cref="T:Visiblox.Charts.IRadialChartSeries" />
    </member>
    <member name="M:Visiblox.Charts.RadialSeriesCollection.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialSeriesCollection.Init(System.Windows.Controls.Grid)">
      <summary>
            Initializes the series collection.
            </summary>
      <param name="element">The Grid object that will be the root element in the visual tree of the series collection.</param>
    </member>
    <member name="M:Visiblox.Charts.RadialSeriesCollection.DeInit">
      <summary>
            De-initializes the series collection.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RadialSeriesCollection.DoInvalidate">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RadialSeriesCollection.OnDataSeriesCollectionChanged(System.Object,System.EventArgs)">
      <summary>
            Raises the DataSeriesCollectionChanged event.
            </summary>
      <param name="sender">The sender - which is the IRadialChartSeries that has changed.</param>
      <param name="e">The notify event arguments.</param>
    </member>
    <member name="E:Visiblox.Charts.RadialSeriesCollection.DataSeriesCollectionChanged">
      <summary>
        <para>
             Occurs when the DataSeries collection changes, see <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" />.
            </para>
        <para>
             The sender will be the IRadialChartSeries that has changed.
            </para>
      </summary>
    </member>
    <member name="E:Visiblox.Charts.RadialSeriesCollection.SeriesPropertyChangedAggregate">
      <summary>
            Occurs when any of the series' properties changes.
            </summary>
      <remarks>
            The sender will be the IRadialChartSeries that has raised the PropertyChanged event.
            </remarks>
    </member>
    <member name="T:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits">
      <summary>Represents the range of a <see cref="T:Visiblox.Charts.DiscontinuousDateTimeAxis" /> (a range of DateTime values 
            with discontinuities (excluded periods).</summary>
      <remarks>
        <para>The DiscontinuousDateTimeRangeWithEffectiveLimits implements the conversion between the "real world" of actual dates/times and the continuous
            compressed world of included times. It does this via the
            <see cref="M:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.ToContinuousValueRange(System.DateTime)" /> and <see cref="M:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.ToDiscreteValueRange(System.DateTime)" /> methods (where here the "discrete" value range is in fact the
            discontinuous one), based on the provided <see cref="P:Visiblox.Charts.DiscontinuousDateTimeAxis.DiscontinuityProvider" />.</para>
        <para>To use the effective minimum/maximum values in "real-world" DateTimes, the following method can be used: <c>axis.ActualRange.ToDiscreteValueRange(axis.ActualRange.EffectiveMinimum)</c>.</para>
      </remarks>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.#ctor(System.DateTime,System.DateTime)">
      <summary>
            Constructor taking range <paramref name="minimum" /> and <paramref name="maximum" />.
            </summary>
      <param name="minimum">Range minimum</param>
      <param name="maximum">Range maximum</param>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.SetContinuousRange(System.DateTime,System.DateTime)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.ToContinuousValueRange(System.DateTime)">
      <summary>
            Converts <paramref name="discreteValue" /> from a real-world DateTime to the continuous range of compressed DateTime values.
            </summary>
      <param name="discreteValue">Real-world DateTime.</param>
      <returns>Converted value.</returns>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.ToDiscreteValueRange(System.DateTime)">
      <summary>
            Converts <paramref name="continuousValue" /> from the continuous range of compressed DateTime values to the
            discontinuous range of real-world DateTime values.
            </summary>
      <param name="continuousValue">DateTime in the compressed value range.</param>
      <returns>Corresponding real-world DateTime.</returns>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.ToContinuousValueRange(System.IComparable)">
      <summary>
            Converts <paramref name="discreteValue" /> from a real-world DateTime to the continuous range of compressed DateTime values.
            </summary>
      <param name="discreteValue">Real-world DateTime.</param>
      <returns>Converted value.</returns>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.ToDiscreteValueRange(System.IComparable)">
      <summary>
            Converts <paramref name="continuousValue" /> from the continuous range of compressed DateTime values to the
            discontinuous range of real-world DateTime values.
            </summary>
      <param name="continuousValue">DateTime in the compressed value range.</param>
      <returns>Corresponding real-world DateTime.</returns>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.GrowByFactor(System.Double,System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.EffectiveMaximum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.EffectiveMinimum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.IsValid">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.ContinuousEffectiveMaximum">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.ContinuousEffectiveMinimum">
      <inheritdoc />
    </member>
    <member name="E:Visiblox.Charts.DiscontinuousDateTimeRangeWithEffectiveLimits.ValueConversionChanged">
      <summary>
            Raised to indicate the render position &lt;-&gt; data value conversion has changed.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.CandlestickSeries">
      <summary>
            Represents a Candlestick series where each point has a High, Low, Open and Close value.
            </summary>
      <remarks>
            CandlestickSeries is rendered as a vertical line from low to high, with a rectangle placed upon this line 
            reaching from open to close.  The individual candlesticks may be filled or unfilled depending on the styling applied.
            </remarks>
      <seealso cref="T:Visiblox.Charts.ChartSeriesCommonBase" />
      <seealso cref="T:Visiblox.Charts.MultiValueSeriesBase" />
      <seealso cref="T:Visiblox.Charts.HlocSeries" />
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeries.High">
      <summary>
            The key to the Y value points which represent the High value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeries.Low">
      <summary>
            The key to the Y value points which represent the Low value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeries.Open">
      <summary>
            The key to the Y value points which represent the Open value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeries.Close">
      <summary>
            The key to the Y value points which represent the Close value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeries.RisingPoints">
      <summary>
            The key to the rising points fast path element.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeries.FallingPoints">
      <summary>
            The key to the falling points fast path element.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CandlestickSeries.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CandlestickSeries.BuildFastPathGeometry">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CandlestickSeries.IsPointRenderableInternal(Visiblox.Charts.IDataPoint)">
      <summary>
            A Candlestick series point is renderable if its X and high/low/open/close coordinates are renderable by its axes.
            </summary>
      <param name="dataPoint">Data point to check.</param>
      <returns>Whether the point is renderable.</returns>
    </member>
    <member name="M:Visiblox.Charts.CandlestickSeries.GetPathGeometry(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CandlestickSeries.PointDrawn(Visiblox.Charts.IDataPoint,System.Windows.FrameworkElement)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CandlestickSeries.OnPointRendered(Visiblox.Charts.IDataPoint,System.Windows.FrameworkElement)">
      <summary>
            Raise a PointRendered event if appropriate.
            </summary>
      <param name="dp">The data point to which the event relates.</param>
      <param name="element">The visual representation of the data point.</param>
    </member>
    <member name="M:Visiblox.Charts.CandlestickSeries.RenderDataLabels">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CandlestickSeries.StylePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint,Visiblox.Charts.Primitives.StateSpecificStyle)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CandlestickSeries.ResolveStyles(System.Windows.Style)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.CandlestickSeries.StyleFastPathElements(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeries.CandleWidthFractionProperty">
      <summary>
            Identifies the CandleWidthFraction Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeries.FallingLineStyleProperty">
      <summary>
            Identifies the FallingLineStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeries.FallingLineFillProperty">
      <summary>
            Identifies the FallingLineFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeries.FallingLineStrokeProperty">
      <summary>
            Identifies the FallingLineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeries.FallingLineStrokeThicknessProperty">
      <summary>
            Identifies the FallingLineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeries.RisingLineStyleProperty">
      <summary>
            Identifies the RisingLineStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeries.RisingLineFillProperty">
      <summary>
            Identifies the RisingLineFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeries.RisingLineStrokeProperty">
      <summary>
            Identifies the RisingLineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeries.RisingLineStrokeThicknessProperty">
      <summary>
            Identifies the RisingLineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.CandlestickSeries.PointRendered">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeries.CandleWidthFraction">
      <summary>
            Gets or sets the enforced width of each candle, as a fraction of the calculated width. If this is not set, the width is calculated automatically. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeries.FallingLineStyle">
      <summary>
            Gets or sets the style used for candlestick points which closed lower than the opening value. The Style should have a TargetType of Path. Fill, Stroke and StrokeThickness setters should not be defined in this style when using the default palette, as they will be overridden by the FallingLineFill, FallingLineStroke and FallingLineStrokeThickness dependency properties defined in this palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeries.FallingLineFill">
      <summary>
            Gets or sets the fill style used for candlestick points which closed lower than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeries.FallingLineStroke">
      <summary>
            Gets or sets the stroke used for candlestick points which closed lower than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeries.FallingLineStrokeThickness">
      <summary>
            Gets or sets the stroke thickness used for candlestick points which closed lower than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeries.RisingLineStyle">
      <summary>
            Gets or sets the style used for candlestick points which closed higher than the opening value. The Style should have a TargetType of Path. Fill, Stroke and StrokeThickness setters should not be defined in this style when using the default palette, as they will be overridden by the RisingLineFill, RisingLineStroke and RisingLineStrokeThickness dependency properties defined in this palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeries.RisingLineFill">
      <summary>
            Gets or sets the fill style used for candlestick points which closed higher than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeries.RisingLineStroke">
      <summary>
            Gets or sets the stroke used for candlestick points which closed higher than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeries.RisingLineStrokeThickness">
      <summary>
            Gets or sets the stroke thickness used for candlestick points which closed higher than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.DiscontinuousLineSeries">
      <summary>
            This series type represents a line series which may be broken up by segments of alternative styling or gaps.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousLineSeries.IsPointRenderable(Visiblox.Charts.IDataPoint,Visiblox.Charts.IAxis,Visiblox.Charts.IAxis)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousLineSeries.IsPointRenderable(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousLineSeries.DrawLines(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem})">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousLineSeries.DrawAreas(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem})">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousLineSeries.DrawPoints(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem})">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousLineSeries.DrawPointWithStyle(Visiblox.Charts.LineSeries.DataPointItem,System.Boolean,Visiblox.Charts.Primitives.UniqueAndNotNullShadowedObservableCollection{System.Object},Visiblox.Charts.SelectionMode,System.Boolean)">
      <summary>
            Adds a point to the chart with a style.
            </summary>
      <param name="combinedPoint">The point to draw.</param>
      <param name="isSelected">Cached to avoid repeatedly hitting the Dependency Property.</param>
      <param name="selectedItems">Cached to avoid repeatedly hitting the Dependency Property.</param>
      <param name="selectionMode">Cached to avoid repeatedly hitting the Dependency Property.</param>
      <param name="isStyled">Determines whether the points to draw should be styled.</param>
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousLineSeries.BuildGeometry(System.Collections.Generic.IList{Visiblox.Charts.LineSeries.DataPointItem},System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousLineSeries.AddDataPoint(Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousLineSeries.RemoveDataPoint(Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousLineSeries.OnStyleUpdated">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousLineSeries.StylePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousLineSeries.StyleDataLabel(Visiblox.Charts.IDataPoint,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.DiscontinuousLineSeries.StylePath(System.Windows.Shapes.Path,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.DiscontinuousLineSeries.NullHandlingModeProperty">
      <summary>
            Identifies the NullHandlingMode Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DiscontinuousLineSeries.NullHandlingStyleProperty">
      <summary>
            Identifies the NullHandlingStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.DiscontinuousLineSeries.AllowFastPathRenderingProperty">
      <summary>
            Identifies the AllowFastPathRendering Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscontinuousLineSeries.PointsFastPathDictionary">
      <summary>
            A list with the paths needed to implement fast path.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscontinuousLineSeries.NullHandlingMode">
      <summary>
            Gets or sets the null handling mode. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscontinuousLineSeries.NullHandlingStyle">
      <summary>
            Gets or sets the style to apply if the NullHandlingMode is Styled. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.DiscontinuousLineSeries.AllowFastPathRendering">
      <summary>
            Gets or sets whether this series should attempt to use fast rendering mode.  Note that the fast rendering mode is only efficient under a restricted set of circumstances depending on whether hardware or software rendering is used and whether anti-aliasing is enabled or not.  Even if this property is set to true, the implementation is series specific.  Enabling should not change the behaviour of the series in any way other than how it is rendered and potential minor visual differences. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.HlcSeries">
      <summary>
            Represents a HLC series where each point has a High, Low and Close value.  
            </summary>
      <remarks>
            HLC is rendered as a vertical line from low to high, with a horizontal line on right 
            indicating close.
            </remarks>
      <seealso cref="T:Visiblox.Charts.HlocSeries" />
      <seealso cref="T:Visiblox.Charts.ChartSeriesCommonBase" />
      <seealso cref="T:Visiblox.Charts.CandlestickSeries" />
    </member>
    <member name="T:Visiblox.Charts.HlocSeries">
      <summary>
            Represents a HLOC series where each point has a High, Low, Open and Close value.  
            </summary>
      <remarks>
            HLOC is rendered as a vertical line from low to high, with horizontal lines on left and right 
            indicating open and close respectively.
            </remarks>
      <seealso cref="T:Visiblox.Charts.HlcSeries" />
      <seealso cref="T:Visiblox.Charts.ChartSeriesCommonBase" />
      <seealso cref="T:Visiblox.Charts.CandlestickSeries" />
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.High">
      <summary>
            The key to the Y value which represent the High value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.Low">
      <summary>
            The key to the Y value which represent the Low value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.Open">
      <summary>
            The key to the Y value which represent the Open value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.Close">
      <summary>
            The key to the Y value which represent the Close value.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.RisingPoints">
      <summary>
            The key to the rising points fast path element.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.FallingPoints">
      <summary>
            The key to the falling points fast path element.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.HlocSeries.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.HlocSeries.CreatePointInteractionHelper(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HlocSeries.UpdatePointInteractionHelper(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HlocSeries.BuildFastPathGeometry">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HlocSeries.IsPointRenderableInternal(Visiblox.Charts.IDataPoint)">
      <summary>
            A HL(O)C series point is renderable if its X and high/low/(open)/close coordinates are renderable by its axes.
            </summary>
      <param name="dataPoint">Data point to check.</param>
      <returns>True if the point is renderable and false otherwise.</returns>
    </member>
    <member name="M:Visiblox.Charts.HlocSeries.PointDrawn(Visiblox.Charts.IDataPoint,System.Windows.FrameworkElement)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HlocSeries.OnPointRendered(Visiblox.Charts.IDataPoint,System.Windows.FrameworkElement)">
      <summary>
            Raise a PointRendered event if appropriate.
            </summary>
      <param name="dp">The data point to which the event relates.</param>
      <param name="element">The visual representation of the data point.</param>
    </member>
    <member name="M:Visiblox.Charts.HlocSeries.GetPathGeometry(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HlocSeries.RenderDataLabels">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HlocSeries.StylePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint,Visiblox.Charts.Primitives.StateSpecificStyle)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HlocSeries.ResolveStyles(System.Windows.Style)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.HlocSeries.StyleFastPathElements(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.TickWidthFractionProperty">
      <summary>
            Identifies the TickWidthFraction Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.FallingLineStyleProperty">
      <summary>
            Identifies the FallingLineStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.FallingLineFillProperty">
      <summary>
            Identifies the FallingLineFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.FallingLineStrokeProperty">
      <summary>
            Identifies the FallingLineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.FallingLineStrokeThicknessProperty">
      <summary>
            Identifies the FallingLineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.RisingLineStyleProperty">
      <summary>
            Identifies the RisingLineStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.RisingLineFillProperty">
      <summary>
            Identifies the RisingLineFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.RisingLineStrokeProperty">
      <summary>
            Identifies the RisingLineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.RisingLineStrokeThicknessProperty">
      <summary>
            Identifies the RisingLineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeries.CentreLineWidthFractionProperty">
      <summary>
            Identifies the CentreLineWidthFraction Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.HlocSeries.PointRendered">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.HlocSeries.RenderOpen">
      <summary>
            Determines whether this instance of HlocSeries renders the "open" path element, which is used by the HLC series.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeries.TickWidthFraction">
      <summary>
            Gets or sets the enforced width of the open/close ticks, as a fraction of the calculated width. If this is not set, the width is calculated automatically. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeries.FallingLineStyle">
      <summary>
            Gets or sets the style used for HLOC points which closed lower than the opening value. The Style should have a TargetType of Path. Stroke and StrokeThickness setters should not be defined in this style when using the default palette, as they will be overridden by the FallingLineStroke and FallingLineStrokeThickness dependency properties defined in this palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeries.FallingLineFill">
      <summary>
            Gets or sets the fill style used for HLOC points which closed lower than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeries.FallingLineStroke">
      <summary>
            Gets or sets the stroke used for HLOC points which closed lower than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeries.FallingLineStrokeThickness">
      <summary>
            Gets or sets the stroke thickness used for HLOC points which closed lower than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeries.RisingLineStyle">
      <summary>
            Gets or sets the style used for HLOC points which closed higher than the opening value. The Style should have a TargetType of Path. Stroke and StrokeThickness setters should not be defined in this style when using the default palette, as they will be overridden by the RisingLineStroke and RisingLineStrokeThickness dependency properties defined in this palette. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeries.RisingLineFill">
      <summary>
            Gets or sets the fill style used for HLOC points which closed higher than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeries.RisingLineStroke">
      <summary>
            Gets or sets the stroke used for HLOC points which closed higher than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeries.RisingLineStrokeThickness">
      <summary>
            Gets or sets the stroke thickness used for HLOC points which closed higher than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeries.CentreLineWidthFraction">
      <summary>
            Gets or sets the width of the vertical line connecting high and low points as a fraction of the available space, between 0.0 and 1.0. A default value of 0.0 gives a single pixel line width. This is a Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.HlcSeries.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlcSeries.RenderOpen">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.TemplatedLineSeries">
      <summary>
            Represents a line series whose points can be templated.
            </summary>
      <remarks>
        <para>
            Templating is done by setting <see cref="P:Visiblox.Charts.TemplatedLineSeries.PointTemplate" />. This template will be used to render all points on the chart.
            If <see cref="P:Visiblox.Charts.TemplatedLineSeries.SelectedPointTemplate" /> and/or <see cref="P:Visiblox.Charts.TemplatedLineSeries.HighlightedPointTemplate" /> templates are set, these will
                be used when rendering selected or highlighted points.
            </para>
        <para>
            The legend is displayed using <see cref="P:Visiblox.Charts.TemplatedLineSeries.PointTemplate" /> and scaling it appropriately. Therefore even if creating the points of the series programmatically,
                without using <see cref="P:Visiblox.Charts.TemplatedLineSeries.PointTemplate" />, this value still needs to be set in order to display an element on the legend.
            The above described process can be ignored if directly setting the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.LegendItemTemplate" /> control template.
            </para>
      </remarks>
      <seealso cref="T:Visiblox.Charts.LineSeries" />
    </member>
    <member name="M:Visiblox.Charts.TemplatedLineSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TemplatedLineSeries.CreatePoint(Visiblox.Charts.IDataPoint)">
      <summary>
            Creates an instance of the data point used in the series. 
            Override in subclass to enable templating of the data point; however the direct
            use of a Path of any kind is not supported.
            </summary>
      <returns>An instance of the DataPoint shape representation.</returns>
    </member>
    <member name="M:Visiblox.Charts.TemplatedLineSeries.StylePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <summary>
            Style the given point based on it highlighted and selected states.
            </summary>
      <param name="point">The physical representation of the point.</param>
      <param name="dataPoint">The logical point.</param>
    </member>
    <member name="M:Visiblox.Charts.TemplatedLineSeries.OnPointCreated(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.TemplatedLineSeries.RecalculateLegendPointTransform(System.Windows.FrameworkElement)">
      <summary>
            Recalculates the transform of the legend item point based on the dimensions of the point
                passed so that the point will be centred.
            </summary>
      <remarks>
            Uses the point's size, <see cref="P:Visiblox.Charts.TemplatedLineSeries.LegendPointContainerWidth" /> and <see cref="P:Visiblox.Charts.TemplatedLineSeries.LegendPointContainerHeight" />
                to determine the transformation needed to centre the point.
            </remarks>
      <param name="point">The physical representation of the point.</param>
    </member>
    <member name="F:Visiblox.Charts.TemplatedLineSeries.PointTemplateProperty">
      <summary>
            Identifies the PointTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TemplatedLineSeries.SelectedPointTemplateProperty">
      <summary>
            Identifies the SelectedPointTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TemplatedLineSeries.HighlightedPointTemplateProperty">
      <summary>
            Identifies the HighlightedPointTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TemplatedLineSeries.LegendPointContainerWidthProperty">
      <summary>
            Identifies the LegendPointContainerWidth Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TemplatedLineSeries.LegendPointContainerHeightProperty">
      <summary>
            Identifies the LegendPointContainerHeight Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TemplatedLineSeries.LegendPointRenderTransform">
      <summary>
            Gets the transformation for the point displayed in the legend.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TemplatedLineSeries.PointTemplate">
      <summary>
            The ControlTemplate for a point on the series. The TargetType for this template should be TemplatedPoint. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TemplatedLineSeries.SelectedPointTemplate">
      <summary>
            The ControlTemplate for a point on the series that is selected. The TargetType for this template should be TemplatedPoint. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TemplatedLineSeries.HighlightedPointTemplate">
      <summary>
            The ControlTemplate for a point on the series that is highlighted. The TargetType for this template should be TemplatedPoint. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TemplatedLineSeries.LegendPointContainerWidth">
      <summary>
            The width of the container on the legend wrapping the point of the series. This value is used to centre the displayed point. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TemplatedLineSeries.LegendPointContainerHeight">
      <summary>
            The height of the container on the legend wrapping the point of the series. This value is used to centre the displayed point. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.TemplatedPoint">
      <summary>
            Represents a templated point that is used by one of the templated series.
            Exposes <see cref="P:Visiblox.Charts.TemplatedPoint.Series" /> and <see cref="P:Visiblox.Charts.TemplatedPoint.SuggestedPointWidth" /> properties
                that can be bound to when creating a control template for templated points on the chart.
            </summary>
      <seealso cref="T:Visiblox.Charts.TemplatedSeries" />
      <seealso cref="T:Visiblox.Charts.TemplatedLineSeries" />
    </member>
    <member name="M:Visiblox.Charts.TemplatedPoint.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TemplatedPoint.#ctor(Visiblox.Charts.IDataPoint,Visiblox.Charts.IChartSeries,System.Double)">
      <summary>
            Constructor.
            </summary>
      <param name="dataPoint">The data point the templated point visualizes.</param>
      <param name="series">The series that <paramref name="dataPoint" /> belongs to.</param>
      <param name="suggestedPointWidth">Suggested width for the plotted point.</param>
    </member>
    <member name="M:Visiblox.Charts.TemplatedPoint.FindTemplateChild``1(System.String)">
      <summary>
            Finds the named template child and if not found will print a debug warning.
            </summary>
      <param name="name">The name of the template part to find</param>
    </member>
    <member name="F:Visiblox.Charts.TemplatedPoint.SuggestedPointWidthProperty">
      <summary>
            Identifies the SuggestedPointWidth Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TemplatedPoint.SeriesProperty">
      <summary>
            Identifies the Series Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TemplatedPoint.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.TemplatedPoint.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.TemplatedPoint.SuggestedPointWidth">
      <summary>
            Suggested maximum width of points. Its value is 80% of the minimum distance between two points within the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TemplatedPoint.Series">
      <summary>
            The series this data point belongs to. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.TemplatedPoint.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.TemplatedSeries">
      <summary>
            Represents a series in which each point is a templatable control.
            </summary>
      <remarks>
        <para>
            Setting <see cref="P:Visiblox.Charts.TemplatedSeries.PointTemplate" /> will set the template for the normal points. 
            Setting <see cref="P:Visiblox.Charts.TemplatedSeries.SelectedPointTemplate" /> sets the template for selected points,
            setting <see cref="P:Visiblox.Charts.TemplatedSeries.HighlightedPointTemplate" /> sets the template for highlighted points.
            </para>
        <para>
            To create points programmatically, with data based on the data point, inherit from the class
            and override <see cref="M:Visiblox.Charts.TemplatedSeries.CreatePoint(Visiblox.Charts.IDataPoint)" /> (for creating a point) and <see cref="M:Visiblox.Charts.TemplatedSeries.UpdatePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)" /> (for updating an existing point).
            By default a <see cref="T:Visiblox.Charts.TemplatedPoint" /> object is created by  <see cref="M:Visiblox.Charts.TemplatedSeries.CreatePoint(Visiblox.Charts.IDataPoint)" />.
            </para>
        <para>
            The legend item is displayed using <see cref="P:Visiblox.Charts.TemplatedSeries.LegendPointTemplate" />. If more customization is needed than just specifying
                the legend item, set the <see cref="P:Visiblox.Charts.ChartSeriesCommonBase.LegendItemTemplate" /> control template.
            </para>
      </remarks>
    </member>
    <member name="M:Visiblox.Charts.TemplatedSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.TemplatedSeries.PositionPointOnZoomCanvas">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.TemplatedSeries.CreatePoint(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.TemplatedSeries.UpdatePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <summary>
            Updates the physical point <paramref name="point" /> that is the representation of the logical point <paramref name="dataPoint" />
            to reflect the new value of <paramref name="dataPoint" />. Returns false, a new point is always created.
            </summary>
      <param name="point">The existing physical representation of the point.</param>
      <param name="dataPoint">The logical point.</param>
      <returns>False.</returns>
    </member>
    <member name="M:Visiblox.Charts.TemplatedSeries.OnStyleUpdated">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.TemplatedSeries.StylePoint(System.Windows.FrameworkElement,Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.TemplatedSeries.RenderDataLabels">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.TemplatedSeries.PointTemplateProperty">
      <summary>
            Identifies the PointTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TemplatedSeries.SelectedPointTemplateProperty">
      <summary>
            Identifies the SelectedPointTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TemplatedSeries.HighlightedPointTemplateProperty">
      <summary>
            Identifies the HighlightedPointTemplate Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.TemplatedSeries.LegendPointTemplateProperty">
      <summary>
            Identifies the LegendPointTemplate Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TemplatedSeries.LegendPointRenderTransform">
      <summary>
            Gets the transformation for the point displayed in the legend.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TemplatedSeries.XRange">
      <summary>
            Seal the virtual member XRange.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TemplatedSeries.YRange">
      <summary>
            Seal the virtual member YRange.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TemplatedSeries.PointTemplate">
      <summary>
            The ControlTemplate for a point on the series. The TargetType for this template should be TemplatedPoint. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TemplatedSeries.SelectedPointTemplate">
      <summary>
            The ControlTemplate for a point on the series that is selected. The TargetType for this template should be TemplatedPoint. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TemplatedSeries.HighlightedPointTemplate">
      <summary>
            The ControlTemplate for a point on the series that is highlighted. The TargetType for this template should be TemplatedPoint. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.TemplatedSeries.LegendPointTemplate">
      <summary>
            The ControlTemplate for the point displayed on the legend. The TargetType for this template should be TemplatedPoint. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RasterBarOrColumnSeriesBase">
      <summary>
            Represents a base bar or column series series.
            </summary>
      <seealso cref="T:Visiblox.Charts.ChartSeriesCommonBase" />
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.ConvertDataPointToRenderPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.CartesianPoint,System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.CreateScaledRenderPoint(Visiblox.Charts.CartesianPoint,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.CreateRenderContextObject">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.DrawPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.CartesianPoint,Visiblox.Charts.BarOrColumnSeriesStyle,System.Boolean,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.DrawPoint(System.Int32,System.Int32,Visiblox.Charts.BarOrColumnSeriesStyle,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester,Visiblox.Charts.IDataPoint)">
      <summary>
            Draws the point identified by the provided x and y integer co-ordinates.
            </summary>
      <param name="x">The x render co-ordinate to be used.</param>
      <param name="y">The y render co-ordinate to be used.</param>
      <param name="style">The style to apply to the rendering of this point.</param>
      <param name="bitmap">The Writeable bitmap to draw the point onto.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The item that should be set in the selection testing array for positions as appropriate.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.GetBaseAxisZoomScale">
      <summary>
            Get the zoom scale for the base axis for this series type.
            </summary>
      <returns>The zoom scale to apply.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.ApplyScaledOffsetToCoordinates(System.Int32@,System.Int32@,System.Int32)">
      <summary>
            Offset the x and y coordinates based on the scaled offset from the offset provider.
            </summary>
      <param name="x">The X coordinate updated to include the offset if appropriate.</param>
      <param name="y">The Y coordinate updated to include the offset if appropriate.</param>
      <param name="baseOffset">The scaled offset to apply.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.DrawBorder(Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester,Visiblox.Charts.IDataPoint,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draw a border round the bar or column series.
            </summary>
      <param name="bitmap">The bitmap to draw onto.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The item to set as the selected item.</param>
      <param name="x1">The position of X1 (top left).</param>
      <param name="x2">The position of X2 (bottom right).</param>
      <param name="y1">The position of Y1 (top left).</param>
      <param name="y2">The position of Y2 (bottom right).</param>
      <param name="lineWidth">The width of the border in pixels.</param>
      <param name="strokeColor">The colour of the border as an integer colour.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.FindX1(System.Int32,System.Int32,System.Int32)">
      <summary>
            Finds the position of X1 (top left).
            </summary>
      <param name="x">The base x render co-ordinate.</param>
      <param name="y">The base y render co-ordinate.</param>
      <param name="rectangleWidth">The width of the rectangle to be drawn.</param>
      <returns>The top left point in x render space to be drawn.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.FindY1(System.Int32,System.Int32,System.Int32)">
      <summary>
            Finds the position of Y1 (top left).
            </summary>
      <param name="x">The base x render co-ordinate.</param>
      <param name="y">The base y render co-ordinate.</param>
      <param name="rectangleWidth">The width of the rectangle to be drawn.</param>
      <returns>The top left point in y render space to be drawn.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.FindX2(System.Int32,System.Int32,System.Int32)">
      <summary>
            Finds the position of X2 (bottom right).
            </summary>
      <param name="x">The base x render co-ordinate.</param>
      <param name="y">The base y render co-ordinate.</param>
      <param name="rectangleWidth">The width of the rectangle to be drawn.</param>
      <returns>The bottom right point in x render space to be drawn.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.FindY2(System.Int32,System.Int32,System.Int32)">
      <summary>
            Finds the position of Y2 (bottom right).
            </summary>
      <param name="x">The base x render co-ordinate.</param>
      <param name="y">The base y render co-ordinate.</param>
      <param name="rectangleWidth">The width of the rectangle to be drawn.</param>
      <returns>The bottom right point in y render space to be drawn.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.CalculateWidthOfPointInPixels(System.Double,System.Double)">
      <summary>
            Calculates the total width of the point in pixels.
            </summary>
      <param name="barWidthFraction">How much of the total space, as a fraction, the point should occupy.  This should take account of any zoom scale.</param>
      <param name="baseZoomScale">The zoom scale to apply to the width.</param>
      <returns>The total width of the point in pixels.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.GetBaseAxisValuesUsed">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBarOrColumnSeriesBase.GetStylesForColour(System.Windows.Media.Color,System.Windows.Style)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.RasterBarOrColumnSeriesBase.DefaultStyleProperty">
      <summary>
            Identifies the DefaultStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterBarOrColumnSeriesBase.HighlightedStyleProperty">
      <summary>
            Identifies the HighlightedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterBarOrColumnSeriesBase.SelectedStyleProperty">
      <summary>
            Identifies the SelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterBarOrColumnSeriesBase.HighlightedAndSelectedStyleProperty">
      <summary>
            Identifies the HighlightedAndSelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterBarOrColumnSeriesBase.BarWidthFractionProperty">
      <summary>
            Identifies the BarWidthFraction Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.Type">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.CachedDefaultStyle">
      <summary>
            The cached Default Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.CachedHighlightedStyle">
      <summary>
            The cached Highlighted Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.CachedSelectedStyle">
      <summary>
            The cached Selected Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.CachedHighlightedAndSelectedStyle">
      <summary>
            The cached Selected and Highlighted Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.CachedBarWidthFraction">
      <summary>
            The cached Bar Width Fraction property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.IsConnectedSeries">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.MinBarWidth">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.IsXMinimumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.IsXMaximumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.IsYMinimumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.IsYMaximumMarginEnabled">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.XMargin">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.YMargin">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.DefaultStyle">
      <summary>
            Gets or sets the default style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.HighlightedStyle">
      <summary>
            Gets or sets the highlighted style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.SelectedStyle">
      <summary>
            Gets or sets the selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.HighlightedAndSelectedStyle">
      <summary>
            Gets or sets the highlighted and selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterBarOrColumnSeriesBase.BarWidthFraction">
      <summary>
            Gets or sets the enforced width of each bar, as a fraction of the calculated width. If this is not set, the width is calculated automatically. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RasterBarSeries">
      <summary>
            Represents a bar series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterBarSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterBarSeries.FindX1(System.Int32,System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBarSeries.FindY1(System.Int32,System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBarSeries.FindX2(System.Int32,System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBarSeries.FindY2(System.Int32,System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBarSeries.GetBaseAxisZoomScale">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBarSeries.ApplyScaledOffsetToCoordinates(System.Int32@,System.Int32@,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBarSeries.GetBaseAxisValuesUsed">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBarSeries.ComputeMinimumDistanceBetweenPoints">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBarSeries.SelectBaseAxis">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterBarSeries.SelectPerpendicularAxis">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterBarSeries.Type">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.RasterCandlestickSeries">
      <summary>
            Represents a candlestick series.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RasterHlocSeriesBase`1">
      <summary>
            Base class for a Hloc series type.
            </summary>
      <seealso cref="T:Visiblox.Charts.ChartSeriesCommonBase" />
    </member>
    <member name="M:Visiblox.Charts.RasterHlocSeriesBase`1.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterHlocSeriesBase`1.ConvertDataPointToRenderPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.HlocPoint,System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterHlocSeriesBase`1.CreateScaledRenderPoint(Visiblox.Charts.HlocPoint,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterHlocSeriesBase`1.RenderOpen">
      <summary>
            If the open position should be rendered.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterCandlestickSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterCandlestickSeries.CreateRenderContextObject">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterCandlestickSeries.DrawPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.HlocPoint,Visiblox.Charts.CandlestickSeriesStyle,System.Boolean,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterCandlestickSeries.DrawCandlestick(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,Visiblox.Charts.CandlestickSeriesStyle,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester,Visiblox.Charts.IDataPoint)">
      <summary>
            Draws the point identified by the provided integer co-ordinates.
            </summary>
      <param name="x">The x render co-ordinate to be used.</param>
      <param name="open">The open (y axis) render co-ordinate to be used.</param>
      <param name="high">The high (y axis) render co-ordinate to be used.</param>
      <param name="low">The low (y axis) render co-ordinate to be used.</param>
      <param name="close">The close (y axis) render co-ordinate to be used.</param>
      <param name="isRising">If the candlestick should be rendered as rising.</param>
      <param name="style">The style to apply to the rendering of this point.</param>
      <param name="bitmap">The Writeable bitmap to draw the point onto.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The item that should be set in the selection testing array for positions as appropriate.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterCandlestickSeries.CalculateWidthOfPointInPixels">
      <summary>
            Calculates the total width of the point in pixels.
            </summary>
      <returns>The total width of the point in pixels.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterCandlestickSeries.FindYValues(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.RasterCandlestickSeries.DefaultStyleProperty">
      <summary>
            Identifies the DefaultStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterCandlestickSeries.HighlightedStyleProperty">
      <summary>
            Identifies the HighlightedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterCandlestickSeries.SelectedStyleProperty">
      <summary>
            Identifies the SelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterCandlestickSeries.HighlightedAndSelectedStyleProperty">
      <summary>
            Identifies the HighlightedAndSelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterCandlestickSeries.CandleWidthFractionProperty">
      <summary>
            Identifies the CandleWidthFraction Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterCandlestickSeries.CachedCandlestickWidthFraction">
      <summary>
            The cached Candlestick Width Fraction property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterCandlestickSeries.CachedDefaultStyle">
      <summary>
            The cached Default Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterCandlestickSeries.CachedHighlightedStyle">
      <summary>
            The cached Highlighted Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterCandlestickSeries.CachedSelectedStyle">
      <summary>
            The cached Selected Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterCandlestickSeries.CachedHighlightedAndSelectedStyle">
      <summary>
            The cached Selected and Highlighted Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterCandlestickSeries.IsConnectedSeries">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterCandlestickSeries.RenderOpen">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterCandlestickSeries.DefaultStyle">
      <summary>
            Gets or sets the default style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterCandlestickSeries.HighlightedStyle">
      <summary>
            Gets or sets the highlighted style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterCandlestickSeries.SelectedStyle">
      <summary>
            Gets or sets the selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterCandlestickSeries.HighlightedAndSelectedStyle">
      <summary>
            Gets or sets the highlighted and selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterCandlestickSeries.CandleWidthFraction">
      <summary>
            Gets or sets the enforced width of each candle, as a fraction of the calculated width. If this is not set, the width is calculated automatically. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RasterColumnSeries">
      <summary>
            Represents a column series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterColumnSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterColumnSeries.FindX1(System.Int32,System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterColumnSeries.FindX2(System.Int32,System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterColumnSeries.FindY1(System.Int32,System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterColumnSeries.FindY2(System.Int32,System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterColumnSeries.GetBaseAxisZoomScale">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterColumnSeries.ApplyScaledOffsetToCoordinates(System.Int32@,System.Int32@,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterColumnSeries.GetBaseAxisValuesUsed">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterColumnSeries.Type">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.RasterHlcSeries">
      <summary>
            Represents a HLC series.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RasterHlocSeries">
      <summary>
            Represents a HLOC series.
            </summary>
      <seealso cref="T:Visiblox.Charts.ChartSeriesCommonBase" />
    </member>
    <member name="M:Visiblox.Charts.RasterHlocSeries.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.RasterHlocSeries.CreateRenderContextObject">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterHlocSeries.DrawPoint(Visiblox.Charts.IDataPoint,Visiblox.Charts.HlocPoint,Visiblox.Charts.HlocSeriesStyle,System.Boolean,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterHlocSeries.DrawHlocLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,Visiblox.Charts.HlocSeriesStyle,Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester,Visiblox.Charts.IDataPoint)">
      <summary>
            Draws the point identified by the provided integer co-ordinates.
            </summary>
      <param name="x">The x render co-ordinate to be used.</param>
      <param name="open">The open (y axis) render co-ordinate to be used.</param>
      <param name="high">The high (y axis) render co-ordinate to be used.</param>
      <param name="low">The low (y axis) render co-ordinate to be used.</param>
      <param name="close">The close (y axis) render co-ordinate to be used.</param>
      <param name="isRising">If the candlestick should be rendered as rising.</param>
      <param name="style">The style to apply to the rendering of this point.</param>
      <param name="bitmap">The Writeable bitmap to draw the point onto.</param>
      <param name="hitTester">An <see cref="T:Visiblox.Charts.IHitTester" /></param>
      <param name="selectionSource">The item that should be set in the selection testing array for positions as appropriate.</param>
    </member>
    <member name="M:Visiblox.Charts.RasterHlocSeries.CalculateLineThicknessInPixels(System.Boolean,Visiblox.Charts.HlocSeriesStyle)">
      <summary>
            Calculates the line thickness in pixels.
            </summary>
      <param name="isRising">If the point is a rising point.</param>
      <param name="style">The style to apply to the rendering of this point.</param>
      <returns>The total width of the point in pixels.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterHlocSeries.CalculateWidthOfTickInPixels(System.Int32)">
      <summary>
            Calculate the width of each arm in pixels.
            </summary>
      <param name="widthOfCentreLine">The number of pixels the centre line occupies.</param>
      <returns>The number of pixels that the width of the arm should be.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterHlocSeries.CalculateWidthOfCentreLineInPixels">
      <summary>
            Calculates the width of the centre line in pixels.
            </summary>
      <returns>The width of the centre line in pixels.</returns>
    </member>
    <member name="M:Visiblox.Charts.RasterHlocSeries.FindYValues(Visiblox.Charts.IDataPoint)">
      <inheritdoc />
    </member>
    <member name="F:Visiblox.Charts.RasterHlocSeries.DefaultStyleProperty">
      <summary>
            Identifies the DefaultStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterHlocSeries.HighlightedStyleProperty">
      <summary>
            Identifies the HighlightedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterHlocSeries.SelectedStyleProperty">
      <summary>
            Identifies the SelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterHlocSeries.HighlightedAndSelectedStyleProperty">
      <summary>
            Identifies the HighlightedAndSelectedStyle Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterHlocSeries.TickWidthFractionProperty">
      <summary>
            Identifies the TickWidthFraction Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.RasterHlocSeries.CentreLineWidthFractionProperty">
      <summary>
            Identifies the CentreLineWidthFraction Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterHlocSeries.CachedTickWidthFraction">
      <summary>
            The cached Tick Width Fraction property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterHlocSeries.CachedCentreLineWidthFraction">
      <summary>
            The cached Centre Line Width Fraction property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterHlocSeries.CachedDefaultStyle">
      <summary>
            The cached Default Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterHlocSeries.CachedHighlightedStyle">
      <summary>
            The cached Highlighted Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterHlocSeries.CachedSelectedStyle">
      <summary>
            The cached Selected Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterHlocSeries.CachedHighlightedAndSelectedStyle">
      <summary>
            The cached Highlighted and Selected Style property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterHlocSeries.RenderOpen">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterHlocSeries.IsConnectedSeries">
      <inheritdoc />
    </member>
    <member name="P:Visiblox.Charts.RasterHlocSeries.DefaultStyle">
      <summary>
            Gets or sets the default style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterHlocSeries.HighlightedStyle">
      <summary>
            Gets or sets the highlighted style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterHlocSeries.SelectedStyle">
      <summary>
            Gets or sets the selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterHlocSeries.HighlightedAndSelectedStyle">
      <summary>
            Gets or sets the highlighted and selected style for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterHlocSeries.TickWidthFraction">
      <summary>
            Gets or sets the enforced width of the open/close ticks, as a fraction of the calculated width. If this is not set, the width is calculated automatically. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterHlocSeries.CentreLineWidthFraction">
      <summary>
            Gets or sets the width of the vertical line connecting high and low points as a fraction of the available space, between 0.0 and 1.0. A default value of 0.0 gives a single pixel line width. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterHlcSeries.RenderOpen">
      <inheritdoc />
    </member>
    <member name="T:Visiblox.Charts.AreaStyleContainer">
      <summary>
            A helper class for containing a list of area points
            and it's style to be rendered with.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AreaStyleContainer.points">
      <summary>
            The points to be rendered for this area.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.AreaStyleContainer.fillColour">
      <summary>
            The fill colour to fill the area with.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.AreaStyleContainer.#ctor(System.Int32[],System.Int32)">
      <summary>
            Default constructor.
            </summary>
      <param name="points">The points to be rendered.</param>
      <param name="fillColour">The fill colour to be used when rendering the points.</param>
    </member>
    <member name="T:Visiblox.Charts.RasterStaircaseSeries">
      <summary>
            Represents a staircase series.
            </summary>
      <remarks>
        <para>
            A StaircaseSeries consists of vertical and horizontal lines connecting points. 
            By default, the line between two points travels horizontally to the right and then vertically.  
            In other words, the position of the step (up or down) in the line is on the right of the region between points.  
            The StepPosition can also be set to Left or Center.  
            </para>
        <para>
            Example:  if <see cref="P:Visiblox.Charts.RasterStaircaseSeries.StepPosition" /> is set to Right and the series contains two points (1,1) and (3,3) then
            a series of horizontal and vertical lines will be drawn with corners at (1,1), (3,1), (3,3).  
            </para>
      </remarks>
    </member>
    <member name="M:Visiblox.Charts.RasterStaircaseSeries.FinaliseDrawing(Visiblox.Charts.WriteableBitmapAdapter,Visiblox.Charts.IHitTester)">
      <inheritdoc />
    </member>
    <member name="M:Visiblox.Charts.RasterStaircaseSeries.CreateSteppedRenderPoints(System.Collections.Generic.List{Visiblox.Charts.LineSeriesRenderPoint})">
      <summary>
            Iterate over the list of render points and create a new list which includes any 'step' points between the
            original list of render points.
            </summary>
      <param name="renderPoints">The original list of render points.</param>
      <returns>A list of LineSeriesRenderPoint objects that includes the original points along with any step points between them.</returns>
    </member>
    <member name="F:Visiblox.Charts.RasterStaircaseSeries.StepPositionProperty">
      <summary>
            Identifies the StepPosition Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.RasterStaircaseSeries.StepPosition">
      <summary>
            Gets or sets the position of the step between two adjacent data points. This is a Dependency Property.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.BarOrColumnSeriesStyle">
      <summary>
            A wrapper around the style for a bar or column series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesStyle.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesStyle.PointFillProperty">
      <summary>
            Identifies the PointFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesStyle.PointStrokeProperty">
      <summary>
            Identifies the PointStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.BarOrColumnSeriesStyle.PointStrokeThicknessProperty">
      <summary>
            Identifies the PointStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.BarOrColumnSeriesStyle.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.BarOrColumnSeriesStyle.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesStyle.CachedPointFill">
      <summary>
            The cached Point Fill property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesStyle.CachedPointStroke">
      <summary>
            The cached Point Stroke property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesStyle.CachedPointStrokeThickness">
      <summary>
            The cached Point Stroke Thickness property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesStyle.PointFill">
      <summary>
            Gets or sets the fill to be used on the points of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesStyle.PointStroke">
      <summary>
            Gets or sets the stroke colour to be used on the outline of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.BarOrColumnSeriesStyle.PointStrokeThickness">
      <summary>
            Gets or sets the stroke thickness to be used on the outline of the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.BarOrColumnSeriesStyle.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.CandlestickSeriesStyle">
      <summary>
            A wrapper around the style for a candlestick series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CandlestickSeriesStyle.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeriesStyle.FallingLineFillProperty">
      <summary>
            Identifies the FallingLineFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeriesStyle.FallingLineStrokeProperty">
      <summary>
            Identifies the FallingLineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeriesStyle.FallingLineStrokeThicknessProperty">
      <summary>
            Identifies the FallingLineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeriesStyle.RisingLineFillProperty">
      <summary>
            Identifies the RisingLineFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeriesStyle.RisingLineStrokeProperty">
      <summary>
            Identifies the RisingLineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.CandlestickSeriesStyle.RisingLineStrokeThicknessProperty">
      <summary>
            Identifies the RisingLineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.CandlestickSeriesStyle.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.CandlestickSeriesStyle.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeriesStyle.CachedFallingLineFill">
      <summary>
            The cached Falling Line Fill property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeriesStyle.CachedFallingLineStroke">
      <summary>
            The cached Falling Line Stroke property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeriesStyle.CachedFallingLineStrokeThickness">
      <summary>
            The cached Falling Line Stroke Thickness property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeriesStyle.CachedRisingLineFill">
      <summary>
            The cached Rising Line Fill property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeriesStyle.CachedRisingLineStroke">
      <summary>
            The cached Rising Line Stroke property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeriesStyle.CachedRisingLineStrokeThickness">
      <summary>
            The cached Rising Line Stroke Thickness property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeriesStyle.FallingLineFill">
      <summary>
            Gets or sets the fill style used for candlestick points which closed lower than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeriesStyle.FallingLineStroke">
      <summary>
            Gets or sets the stroke used for candlestick points which closed lower than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeriesStyle.FallingLineStrokeThickness">
      <summary>
            Gets or sets the stroke thickness used for candlestick points which closed lower than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeriesStyle.RisingLineFill">
      <summary>
            Gets or sets the fill style used for candlestick points which closed higher than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeriesStyle.RisingLineStroke">
      <summary>
            Gets or sets the stroke used for candlestick points which closed higher than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.CandlestickSeriesStyle.RisingLineStrokeThickness">
      <summary>
            Gets or sets the stroke thickness used for candlestick points which closed higher than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.CandlestickSeriesStyle.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.HlocSeriesStyle">
      <summary>
            A wrapper around the style for a Hloc series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.HlocSeriesStyle.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeriesStyle.FallingLineStrokeProperty">
      <summary>
            Identifies the FallingLineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeriesStyle.FallingLineStrokeThicknessProperty">
      <summary>
            Identifies the FallingLineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeriesStyle.RisingLineStrokeProperty">
      <summary>
            Identifies the RisingLineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.HlocSeriesStyle.RisingLineStrokeThicknessProperty">
      <summary>
            Identifies the RisingLineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.HlocSeriesStyle.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.HlocSeriesStyle.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.HlocSeriesStyle.CachedFallingLineStroke">
      <summary>
            The cached Falling Line Stroke property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeriesStyle.CachedFallingLineStrokeThickness">
      <summary>
            The cached Falling Line Stroke Thickness property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeriesStyle.CachedRisingLineStroke">
      <summary>
            The cached Rising Line Stroke property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeriesStyle.CachedRisingLineStrokeThickness">
      <summary>
            The cached Rising Line Stroke Thickness property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeriesStyle.FallingLineStroke">
      <summary>
            Gets or sets the stroke used for hloc points which closed lower than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeriesStyle.FallingLineStrokeThickness">
      <summary>
            Gets or sets the stroke thickness used for hloc points which closed lower than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeriesStyle.RisingLineStroke">
      <summary>
            Gets or sets the stroke used for hloc points which closed higher than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.HlocSeriesStyle.RisingLineStrokeThickness">
      <summary>
            Gets or sets the stroke thickness used for hloc points which closed higher than the opening value. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.HlocSeriesStyle.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.LineSeriesStyle">
      <summary>
            A wrapper around the style for a line series.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LineSeriesStyle.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeriesStyle.LineStrokeProperty">
      <summary>
            Identifies the LineStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeriesStyle.LineStrokeThicknessProperty">
      <summary>
            Identifies the LineStrokeThickness Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeriesStyle.PointFillProperty">
      <summary>
            Identifies the PointFill Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeriesStyle.PointStrokeProperty">
      <summary>
            Identifies the PointStroke Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeriesStyle.PointSizeProperty">
      <summary>
            Identifies the PointSize Dependency Property.
            </summary>
    </member>
    <member name="F:Visiblox.Charts.LineSeriesStyle.AreaFillProperty">
      <summary>
            Identifies the AreaFill Dependency Property.
            </summary>
    </member>
    <member name="M:Visiblox.Charts.LineSeriesStyle.OnPropertyChanged(System.String)">
      <summary>
            Raises a <see cref="E:Visiblox.Charts.LineSeriesStyle.PropertyChanged" /> event for the<see cref="T:System.ComponentModel.INotifyPropertyChanged" /> implementation.
            </summary>
      <param name="propertyName">The name of the property which has changed.</param>
    </member>
    <member name="P:Visiblox.Charts.LineSeriesStyle.CachedLineStroke">
      <summary>
            The cached Line Stroke property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeriesStyle.CachedLineStrokeThickness">
      <summary>
            The cached Line Stroke Thickness property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeriesStyle.CachedPointFill">
      <summary>
            The cached Point Fill property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeriesStyle.CachedPointStroke">
      <summary>
            The cached Point Stroke property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeriesStyle.CachedPointSize">
      <summary>
            The cached Point Size property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeriesStyle.CachedAreaFill">
      <summary>
            The cached Area Fill property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeriesStyle.LineStroke">
      <summary>
            Gets or sets the line colour for the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeriesStyle.LineStrokeThickness">
      <summary>
            Gets or sets the thickness of the drawn line. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeriesStyle.PointFill">
      <summary>
            Gets or sets the brush used for filling a point on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeriesStyle.PointStroke">
      <summary>
            Gets or sets the brush used for drawing a point on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeriesStyle.PointSize">
      <summary>
            Gets or sets the size (width and height) of a point on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="P:Visiblox.Charts.LineSeriesStyle.AreaFill">
      <summary>
            Gets or sets the brush used for filling the area on the series. This is a Dependency Property.
            </summary>
    </member>
    <member name="E:Visiblox.Charts.LineSeriesStyle.PropertyChanged">
      <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="T:Visiblox.Charts.RenderContextObject`1">
      <summary>
            A context object for the styles required while rendering
            </summary>
      <typeparam name="TStyle">The style object that the raster series requires.</typeparam>
    </member>
    <member name="M:Visiblox.Charts.RenderContextObject`1.#ctor(`0,`0,`0,`0)">
      <summary>
            Default Constructor.
            </summary>
      <param name="normal">The normal style for the series.</param>
      <param name="selected">The selected style for the series.</param>
      <param name="highlighted">The highlighted style for the series.</param>
      <param name="highlightedAndSelected">The highlighted and selected style for the series.</param>
    </member>
    <member name="M:Visiblox.Charts.RenderContextObject`1.FindSelectedStyle(System.Boolean)">
      <summary>
            Find the selected style based on if the series is highlighted or not.
            </summary>
      <param name="isHighlighted">If the series is highlighted.</param>
      <returns>The highlighted and selected style if the series is highlighted else the highlighted style.</returns>
    </member>
    <member name="M:Visiblox.Charts.RenderContextObject`1.FindUnselectedStyle(System.Boolean)">
      <summary>
            Find the unselected style based on if the series is highlighted or not.
            </summary>
      <param name="isHighlighted">If the series is highlighted.</param>
      <returns>The highlighted style if the series is highlighted else the normal style.</returns>
    </member>
  </members>
</doc>